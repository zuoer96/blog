import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.027d2da0.js";const p="/images/image-20220607113456118.png",e="/images/image-20220607114144700.png",o="/images/image-20220607114810291.png",c="/images/image-20220607115222167.png",t="/images/image-20220607115347966.png",r="/images/image-20220607115533435.png",i="/images/image-20220607115742658.png",y="/images/image-20220607120437106.png",E="/images/image-20220607120747847.png",d="/images/image-20220607134311282.png",h="/images/image-20220607135010550.png",F="/images/image-20220607135927069.png",u="/images/image-20220607140615847.png",g="/images/image-20220607143157872.png",m="/images/image-20220607144429276.png",C="/images/image-20220607170941905.png",b="/images/image-20220607171132377.png",q="/images/image-20220607171217257.png",B="/images/image-20220607180337766.png",v="/images/image-20220607182626553.png",k="/images/image-20220607183449780.png",$="/images/image-20220607183724845.png",D="/images/image-20220607184701488.png",f="/images/image-20220607184953816.png",A="/images/image-20220607185059759.png",_="/images/image-20220607185348573.png",x="/images/image-20220612073920404.png",w="/images/image-20220612074534794.png",P="/images/image-20220612075036263.png",S="/images/image-20220612075604292.png",Y="/images/image-20220612080239780.png",M="/images/image-20220612080909466.png",T="/images/image-20220612081608837.png",I="/images/image-20220612082739465.png",O="/images/image-20220612081745234.png",L="/images/image-20220612091134821.png",U="/images/image-20220612093719609.png",N="/images/image-20220612100108641.png",H="/images/image-20220615103913356.png",J="/images/image-20220615104120820.png",z="/images/image-20220615104202128.png",Q="/images/image-20220615104405439.png",V="/images/image-20220615104516925.png",K="/images/image-20220615104737355.png",j="/images/image-20220615105131650.png",G="/images/image-20220615112705782.png",Z="/images/image-20220615105747346.png",R="/images/image-20220615110034695.png",X="/images/image-20220615110059226.png",W="/images/image-20220615110252170.png",ss="/images/image-20220615111154590.png",as="/images/image-20220615111744523.png",ns="/images/image-20220615131716368.png",ls="/images/image-20220615114140640.png",ps="/images/image-20220615125350529.png",es="/images/image-20220615125459551.png",os="/images/image-20220615125920528.png",cs="/images/image-20220615130016931.png",ts="/images/image-20220615131825647.png",rs="/images/image-20220615152940496.png",is="/images/image-20220615164123829.png",ys="/images/image-20220615140938130.png",Es="/images/image-20220615141208246.png",ds="/images/image-20220615152352616.png",hs="/images/image-20220615152429132.png",Fs="/images/image-20220615143410605.png",us="/images/image-20220615143638509.png",gs="/images/image-20220615173627673.png",ms="/images/image-20220615173556388.png",Cs="/images/image-20220615173607834.png",bs="/images/image-20220615174126588.png",qs="/images/image-20220615174333674.png",Bs="/images/image-20220615174210791.png",vs="/images/image-20220615174218028.png",ks="/images/image-20220615174941844.png",Ts=JSON.parse('{"title":"shell基础","description":"","frontmatter":{"typora-root-url":"./..\\\\..\\\\..\\\\public"},"headers":[],"relativePath":"devops-deploy-shell.md","filePath":"docs/05_DevOps/01_部署/02_Shell.md"}'),$s={name:"devops-deploy-shell.md"},Ds=l('<blockquote><p>没有一种编程语言是完美的。甚至也没有一种最好的语言；只有一种非常合适或可能非常不合适实际目标的语言。</p><p>​ -- Herbert Mayer</p><p>If it is good for everything, it is good for nothing</p></blockquote><h1 id="shell基础" tabindex="-1">shell基础 <a class="header-anchor" href="#shell基础" aria-label="Permalink to &quot;shell基础&quot;">​</a></h1><h2 id="前置细节准备" tabindex="-1">前置细节准备 <a class="header-anchor" href="#前置细节准备" aria-label="Permalink to &quot;前置细节准备&quot;">​</a></h2><p><code>echo+$?</code> 获取上个命令执行是否成功，0，成功，不为0，失败</p><p><img src="'+p+`" alt="image-20220607113456118"></p><p>可以看到date成功，返回0，随便乱输入一个命令，返回值不为0</p><p><code>;</code> 不具备逻辑,只是命令的排序</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">www.baidu.com</span><span style="color:#E1E4E8;"> ; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;www.baidu.com is access&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">www.baidu.com</span><span style="color:#24292E;"> ; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;www.baidu.com is access&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span></code></pre></div><p><code>&amp;&amp; ||</code> 具备逻辑判断能力,相当于三目运算</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">www.baidu.com</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;www.baidu.com is access&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;www.baidu.com is inaccess&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># c1，次数为1次</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">www.baidu.com</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;www.baidu.com is access&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;www.baidu.com is inaccess&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># c1，次数为1次</span></span></code></pre></div><p>这里表示，如果第一个命令执行成功(即<code>$?==0</code>),则执行&amp;&amp;后面的,否则执行||后面的</p><p><img src="`+e+'" alt="image-20220607114144700"></p><p><code>$&gt;/dev/null</code> <code>$&gt;</code>是混合输出(包括标准输出和错误输出)。重定向到null</p><p>比如我不想要上面命令ping的过程</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">www.baidu.com</span><span style="color:#E1E4E8;"> &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;www.baidu.com is access&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;www.baidu.com is inaccess&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">www.baidu.com</span><span style="color:#24292E;"> &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;www.baidu.com is access&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;www.baidu.com is inaccess&quot;</span></span></code></pre></div><p><img src="'+o+'" alt="image-20220607114810291"></p><p>上面我们是直接执行的,保存到脚本,一样的</p><p><code>bash和sh</code> 执行脚本</p><p><img src="'+c+'" alt="image-20220607115222167"></p><p>如果用其他命令,比如Python,会语法错误</p><p><img src="'+t+'" alt="image-20220607115347966"></p><p>如果想要用绝对路径/相对路径执行,会报权限不足</p><p><img src="'+r+'" alt="image-20220607115533435"></p><p>如果我们就是想要这样执行,要加权限(所以我们通常也习惯给脚本加上权限)</p><p><img src="'+i+'" alt="image-20220607115742658"></p><p><code>#!/usr/bin/bash</code> <strong>第一行</strong><code>#!</code>表示声明用哪个解释器执行,如果执行的试试不带解释器,则使用第一行声明的解释器执行(<code>#</code>不在第一行是注释)</p><p><img src="'+y+'" alt="image-20220607120437106"></p><p>不同的程序用不同的解释器执行,所以我们最好在每个脚本头部都指定解释器</p><p><img src="'+E+'" alt="image-20220607120747847"></p><p><code>EOF</code> 外包</p><p>我们知道最好是脚本头部各找各妈，shell脚本头部就设置为bash，但是如果我就想也用上Python解释器呢？</p><p>用<code>/usr/bin/python</code>(前面的/usr/bin/可以省略) <code>+ &lt;&lt;-EOF 编写Python执行的逻辑 EOF</code>就可以做到了。</p><p><img src="'+d+'" alt="image-20220607134311282"></p><p><code>EOF</code>是自定义，加上<code>-</code>的话,结尾<code>EOF</code>不顶在行首也可以,不加的话,就必须顶在行首了.</p><p><img src="'+h+'" alt="image-20220607135010550"></p><p><code>source 和 .</code> 当前shell生效</p><p><img src="'+F+'" alt="image-20220607135927069"></p><p>常规情况(<code>bash和./</code>)下,程序在sub shell 子shell中执行(新开的shell),你可以理解为父子进程的概念。</p><p><strong>子shell操作完成之后，会马上退出，子shell中的变量和操作全部都会被收回，所以回到终端就看不出变化了。</strong></p><p>比如我定义了一个别名,想要在当前shell中执行。（我希望脚本定义的东西能够影响到当前shell,就用<code>source</code>或<code>.</code>执行）</p><p><img src="'+u+'" alt="image-20220607140615847"></p><blockquote><p>这个有多NB: 想要做什么是就请个外源来干，例子是Python,还可以是sql，expect，etc..</p></blockquote><p><code>login shell 和 nologin shell</code></p><p>创建用户chen，用<code>su chen</code>和<code>su - chen</code>，前者切换后没有权限，后者有权限</p><p>原因：<code>su chen</code>是非登录shell，没有加载登录后新用户的shell环境，<code>su - chen</code>是登录shell，加载登录后新用户的shell环境</p><p><img src="'+g+'" alt="image-20220607143157872"></p><p>如果是登录的shell,1234都执行,不登录的shell，只执行1和4</p><p><img src="'+m+'" alt="image-20220607144429276"></p><p>更多细节：</p><blockquote><p>建议把这些当成习惯来用</p></blockquote><p>1.命令和文件可以自动补齐</p><p><img src="'+C+'" alt="image-20220607170941905"></p><p>2.命令历史记忆功能</p><p><code>上下键、!number、!string、!$、!!、^R</code></p><p>根据历史的执行id执行</p><p><img src="'+b+'" alt="image-20220607171132377"></p><p>最近一个da开头的命令</p><p><img src="'+q+`" alt="image-20220607171217257"></p><p><code>!$</code>表示上一个命令的最后一个参数</p><p><code>!!</code>表示上一个命令</p><p><code>^R</code>表示搜索历史命令</p><p>3.别名</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">alias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查看别名</span></span>
<span class="line"><span style="color:#79B8FF;">unalias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">取消别名</span></span>
<span class="line"><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">username/.bashrc</span></span>
<span class="line"><span style="color:#B392F0;">\\cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/hosts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">取消别名的作用。</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">这里cp在系统里的别名是</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i，所以拷贝第二次的时候会询问是否覆盖。反斜杠后不会询问。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">alias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查看别名</span></span>
<span class="line"><span style="color:#005CC5;">unalias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">取消别名</span></span>
<span class="line"><span style="color:#D73A49;">~</span><span style="color:#24292E;">username/.bashrc</span></span>
<span class="line"><span style="color:#6F42C1;">\\cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/hosts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">取消别名的作用。</span><span style="color:#24292E;">  </span><span style="color:#032F62;">这里cp在系统里的别名是</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i，所以拷贝第二次的时候会询问是否覆盖。反斜杠后不会询问。</span></span></code></pre></div><p>4.快捷键</p><p><code>^</code>代表<kbd>ctrl</kbd></p><p><code>^R</code>：搜索历史命令</p><p><code>^D</code>: 退出 相当于exit,logout</p><p><code>^A</code>: 光标到行首</p><p><code>^E</code>: 光标到行尾</p><p><code>^L</code>: 从新的一屏开始</p><p><code>^U</code>: 从光标处往前删除</p><p><code>^K</code>: 从光标处往后删除</p><p><code>^S</code>: 盲打,打的命令是有在执行的！</p><p><code>^Q</code>: 退出盲打</p><p>5.前后台作用控制</p><p><code>&amp;</code>: sleep 5000 &amp; 后台执行5000s,重启进程会没了</p><p><code>nohup</code>: nohup sleep 5000 &amp; 一样的效果**,重启进程不会没**,且会生成nohup.out日志,java启动常用,终端守护进程</p><p><code>screen</code>: 偏向于保护工作现场(会话)的用法</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yum -y install screen</span></span>
<span class="line"><span style="color:#e1e4e8;">screen -S 会话的名字</span></span>
<span class="line"><span style="color:#e1e4e8;">dodododo</span></span>
<span class="line"><span style="color:#e1e4e8;">dodododo</span></span>
<span class="line"><span style="color:#e1e4e8;">会话断掉重连</span></span>
<span class="line"><span style="color:#e1e4e8;">screen -list</span></span>
<span class="line"><span style="color:#e1e4e8;">screen -r 会话的ID ==&gt; 可以恢复会话</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yum -y install screen</span></span>
<span class="line"><span style="color:#24292e;">screen -S 会话的名字</span></span>
<span class="line"><span style="color:#24292e;">dodododo</span></span>
<span class="line"><span style="color:#24292e;">dodododo</span></span>
<span class="line"><span style="color:#24292e;">会话断掉重连</span></span>
<span class="line"><span style="color:#24292e;">screen -list</span></span>
<span class="line"><span style="color:#24292e;">screen -r 会话的ID ==&gt; 可以恢复会话</span></span></code></pre></div><p><code>^C ^Z</code>: 停止前台运行的作业</p><p><code>bg %1 fg %1</code>: 去后台界面/前台界面</p><p>骚操作: 编辑文档的时候,想暂停不想退出,<code>^Z</code>,然后回到命令行界面,执行balabala命令,执行<code>fg</code>,就可以回到刚才暂停的页面了</p><p><code>kill %3</code>: 一般作业%可以省略,但是 kill 3表示给pid为3的进程发信号,kill %3 给当前终端内作业号为3的发信号。代表2种情况,所以不能省略</p><p>6.输入输出重定向</p><p><code>0,1,2</code> 0 b标准输入，默认键盘 1 屏幕 2 改变方向重定向</p><p><img src="`+B+`" alt="image-20220607180337766"></p><p><code>&gt;</code> 输出重定向,覆盖</p><p><code>&gt;&gt;</code> 输出重定向,追加</p><p><code>2&gt;</code> 错误输出</p><p><code>2&gt;&gt;</code> 错误输出,追加</p><p><code>2&gt;&amp;1</code> 描述符2的内容重定向描述符1</p><p><code>&amp;&gt;</code> 混合输出</p><p><code>cat &lt; /etc/hosts</code> 后面可以带参数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">这个相当于拷贝：cat &lt;/etc/hosts &gt;/etc/hosts1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">这个相当于拷贝：cat &lt;/etc/hosts &gt;/etc/hosts1</span></span></code></pre></div><p><code>cat &lt;&lt;EOF</code> 把<code>EOF</code>包裹的命令的结果传给cat</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 快速创建单行文件</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;111&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 快速创建多行文件</span></span>
<span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">file2</span></span>
<span class="line"><span style="color:#9ECBFF;">111</span></span>
<span class="line"><span style="color:#9ECBFF;">222</span></span>
<span class="line"><span style="color:#9ECBFF;">333</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 快速创建单行文件</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;111&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 快速创建多行文件</span></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">file2</span></span>
<span class="line"><span style="color:#032F62;">111</span></span>
<span class="line"><span style="color:#032F62;">222</span></span>
<span class="line"><span style="color:#032F62;">333</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span></code></pre></div><p>7.管道 | tree</p><p>一个命令的输出作为下个命令的输入</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">addr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;inet&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eho0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">addr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;inet&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">addr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;inet&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">追加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">df</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/$&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">df</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">df.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/$&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">date.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 会输入到文件</span></span>
<span class="line"><span style="color:#B392F0;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">date.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 会输入到文件,并且创建显示内容,更直观</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">addr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;inet&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eho0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">addr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;inet&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tree</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">addr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;inet&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tree</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">追加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">df</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/$&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">df</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tree</span><span style="color:#24292E;"> </span><span style="color:#032F62;">df.txt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/$&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">date.txt</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 会输入到文件</span></span>
<span class="line"><span style="color:#6F42C1;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tree</span><span style="color:#24292E;"> </span><span style="color:#032F62;">date.txt</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 会输入到文件,并且创建显示内容,更直观</span></span></code></pre></div><p>8.命令排序</p><p><code>;</code> 不具备逻辑判断,在一行敲多个命令，用分号隔开，依次执行。不关心前面的命令执行就过,就算第一个命令失败了，第二个还是会执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;">;</span><span style="color:#B392F0;">eject</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># eject 是弹出光驱</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;">;</span><span style="color:#6F42C1;">eject</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># eject 是弹出光驱</span></span></code></pre></div><p><code>&amp;&amp;</code> 第一个命令返回成功(0),才会执行后面的命令(断路效果)</p><p><code>||</code> 前面的命令执行失败,才会执行后面的命令(短路效果)</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">./configure</span><span style="color:#E1E4E8;"> &amp;</span><span style="color:#B392F0;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> (命令返回值echo </span><span style="color:#79B8FF;">$?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/var/111/222/333</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ok</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 前面失败,后面打印不会执行</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/var/111/222/333</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ok</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 前面成功,后面打印OK</span></span>
<span class="line"><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/222/333</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/222/333</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 前面执行失败,则执行后面,创建目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">www.baidu.com</span><span style="color:#E1E4E8;"> &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;www.baidu.com is access&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;www.baidu.com is inaccess&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 这2个命令配合使用组成3目运算,也就是if else的效果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">./configure</span><span style="color:#24292E;"> &amp;</span><span style="color:#6F42C1;">7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> (命令返回值echo </span><span style="color:#005CC5;">$?</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/111/222/333</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ok</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 前面失败,后面打印不会执行</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/111/222/333</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ok</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 前面成功,后面打印OK</span></span>
<span class="line"><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/222/333</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/222/333</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 前面执行失败,则执行后面,创建目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">www.baidu.com</span><span style="color:#24292E;"> &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;www.baidu.com is access&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;www.baidu.com is inaccess&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 这2个命令配合使用组成3目运算,也就是if else的效果</span></span></code></pre></div><p>9.shell通配符(元字符) <strong>表示的不是本意</strong></p><p><code>*</code> 匹配任意多个字符</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">.pdf</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-iname</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*-eth0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#032F62;">.pdf</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">find</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-iname</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*-eth0&quot;</span></span></code></pre></div><p><code>?</code>匹配任意一个字符</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">love</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">loove</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">live</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">l7ve</span><span style="color:#E1E4E8;">;</span><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">l?ve</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">love</span><span style="color:#24292E;"> </span><span style="color:#032F62;">loove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">live</span><span style="color:#24292E;"> </span><span style="color:#032F62;">l7ve</span><span style="color:#24292E;">;</span><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#032F62;">l?ve</span></span></code></pre></div><p><img src="`+v+`" alt="image-20220607182626553"></p><p><code>[]</code> : 匹配括号中任意<strong>一个</strong>字符</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[abc] </span></span>
<span class="line"><span style="color:#E1E4E8;">[a-z]</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">-9]</span></span>
<span class="line"><span style="color:#E1E4E8;">[a-zA-Z0-9]</span></span>
<span class="line"><span style="color:#E1E4E8;">[^a-zA-Z0-9]</span></span>
<span class="line"><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">l[io]ve</span></span>
<span class="line"><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">l[^a-z]ve</span></span>
<span class="line"><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/dev/sd[a-z]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[abc] </span></span>
<span class="line"><span style="color:#24292E;">[a-z]</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">-9]</span></span>
<span class="line"><span style="color:#24292E;">[a-zA-Z0-9]</span></span>
<span class="line"><span style="color:#24292E;">[^a-zA-Z0-9]</span></span>
<span class="line"><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#032F62;">l[io]ve</span></span>
<span class="line"><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#032F62;">l[^a-z]ve</span></span>
<span class="line"><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/dev/sd[a-z]</span></span></code></pre></div><p><code>()</code>: 在子shell中执行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(cd /boot;ls)(umask 077;touch file1000)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(cd /boot;ls)(umask 077;touch file1000)</span></span></code></pre></div><p><img src="`+k+`" alt="image-20220607183449780"></p><p>可以看到cd目录,不会影响到当前shell</p><p><code>{}</code>: 集合</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">touch file{1:9}</span></span>
<span class="line"><span style="color:#e1e4e8;">mkdir /home/{111,222} mkdir -pv /root/script/{333/{aaa,bbb},444}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">touch file{1:9}</span></span>
<span class="line"><span style="color:#24292e;">mkdir /home/{111,222} mkdir -pv /root/script/{333/{aaa,bbb},444}</span></span></code></pre></div><p><img src="`+$+`" alt="image-20220607183724845"></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 大括号在拷贝中的应用</span></span>
<span class="line"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/sysconfig/network-scripts/ifcfg-eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/sysconfig/network-scripts/ifcfg-eth0.old</span></span>
<span class="line"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/sysconfig/network-scripts/{ifcfg-eth0,ifcfg-eth0.old}</span></span>
<span class="line"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/sysconfig/network-scripts/ifcfg-eth0{,.old}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 大括号在拷贝中的应用</span></span>
<span class="line"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/sysconfig/network-scripts/ifcfg-eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/sysconfig/network-scripts/ifcfg-eth0.old</span></span>
<span class="line"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/sysconfig/network-scripts/{ifcfg-eth0,ifcfg-eth0.old}</span></span>
<span class="line"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/sysconfig/network-scripts/ifcfg-eth0{,.old}</span></span></code></pre></div><p><code>\\</code>转义符,让元字符回归本意</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 打印所有文件</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\*</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 打印 * 号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\\\</span></span>
<span class="line"><span style="color:#E1E4E8;">echo </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;atb&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a\\tb&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;anb&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a\\nb&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 打印所有文件</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\*</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 打印 * 号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\\\</span></span>
<span class="line"><span style="color:#24292E;">echo </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;atb&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a\\tb&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;anb&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a\\nb&quot;</span></span></code></pre></div><p>可以理解为把回车转义了,所以可以换行输入多行命令</p><p><img src="`+D+`" alt="image-20220607184701488"></p><p>10.echo颜色输出</p><p>前景色<code>\\e[1;31m</code></p><p>背景色<code>\\e[1;41m</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\\e[1;31mThis a red text&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 加颜色</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\\e[0m&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 恢复</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\\e[1;31mThis a red text&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 加颜色</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\\e[0m&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 恢复</span></span></code></pre></div><p><img src="`+f+'" alt="image-20220607184953816"></p><p>也可以使用完直接重置掉,(局部效果)</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\\e[1;33mThis a red text.\\e[0m&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\\e[1;33mThis a red text.\\e[0m&quot;</span></span></code></pre></div><p><img src="'+A+'" alt="image-20220607185059759"></p><p>背景色</p><p><img src="'+_+`" alt="image-20220607185348573"></p><h2 id="shell变量" tabindex="-1">Shell变量 <a class="header-anchor" href="#shell变量" aria-label="Permalink to &quot;Shell变量&quot;">​</a></h2><blockquote><p>shell语法...emmmmm...shell和java、Python等比没有语法难度,它只是一个工具,难的是shell<strong>结合其他软件</strong>的命令编写</p></blockquote><p>程序 = 逻辑 + 数据</p><h3 id="shell-变量是什么" tabindex="-1">shell 变量是什么 <a class="header-anchor" href="#shell-变量是什么" aria-label="Permalink to &quot;shell 变量是什么&quot;">​</a></h3><blockquote><p>比如一个脚本中,有很多次ip,我们要去一个一个改,很麻烦,就可以定义一个变量代替.修改只要修改变量的值即可。方便很多。</p></blockquote><h3 id="变量的类型" tabindex="-1"><strong>变量的类型</strong> <a class="header-anchor" href="#变量的类型" aria-label="Permalink to &quot;**变量的类型**&quot;">​</a></h3><ul><li>自定义变量</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">定义变量:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">变量名=变量值</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 变量名必须以字母或下划线开头,区分大小写 ip1=192.168.2.115</span></span>
<span class="line"><span style="color:#B392F0;">引用变量:</span><span style="color:#E1E4E8;"> $变量名 </span><span style="color:#9ECBFF;">或</span><span style="color:#E1E4E8;"> \${变量名}</span></span>
<span class="line"><span style="color:#B392F0;">查看变量:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> $变量名 </span><span style="color:#9ECBFF;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">所有变量:包括自定义变量和环境变量</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">取消变量:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">变量名</span></span>
<span class="line"><span style="color:#B392F0;">作用范围:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">仅在当前shell中有效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">定义变量:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">变量名=变量值</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 变量名必须以字母或下划线开头,区分大小写 ip1=192.168.2.115</span></span>
<span class="line"><span style="color:#6F42C1;">引用变量:</span><span style="color:#24292E;"> $变量名 </span><span style="color:#032F62;">或</span><span style="color:#24292E;"> \${变量名}</span></span>
<span class="line"><span style="color:#6F42C1;">查看变量:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> $变量名 </span><span style="color:#032F62;">set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">所有变量:包括自定义变量和环境变量</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">取消变量:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">变量名</span></span>
<span class="line"><span style="color:#6F42C1;">作用范围:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">仅在当前shell中有效</span></span></code></pre></div><p>示例：变量<strong>显式赋值</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#E1E4E8;">ip</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">192.168</span><span style="color:#9ECBFF;">.13.14</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> $ip &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;"> is up.&quot;</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;"> is down.&quot;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#B392F0;">执行结果：</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@VM-4-13-centos scripts]# sh ping02.sh </span></span>
<span class="line"><span style="color:#B392F0;">192.168.13.14</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">down.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#24292E;">ip</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.13.14</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> $ip &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;"> is up.&quot;</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;"> is down.&quot;</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#6F42C1;">执行结果：</span></span>
<span class="line"><span style="color:#24292E;">[root@VM-4-13-centos scripts]# sh ping02.sh </span></span>
<span class="line"><span style="color:#6F42C1;">192.168.13.14</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">down.</span></span></code></pre></div><blockquote><p>一般我们不这么写,而是用上个命令的执行结果作为if的条件</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#E1E4E8;">ip</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">192.168</span><span style="color:#9ECBFF;">.13.14</span></span>
<span class="line"><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> $ip &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#79B8FF;">$?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-eq</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># $? 表示上个命令的返回值结果,成功0,失败!=0.方括号两边必须有空格!!!</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;"> is up.&quot;</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;"> is down.&quot;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#24292E;">ip</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.13.14</span></span>
<span class="line"><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> $ip &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#005CC5;">$?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-eq</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># $? 表示上个命令的返回值结果,成功0,失败!=0.方括号两边必须有空格!!!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;"> is up.&quot;</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;"> is down.&quot;</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span></code></pre></div><p>这里还可以用<code>read</code>读入ip的值,相当于java的scanner,获取键盘输入。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;请输入ip值:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出结果:</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@VM-4-13-centos scripts]# sh ping02.sh </span></span>
<span class="line"><span style="color:#B392F0;">请输入ip值:192.168.1.1</span></span>
<span class="line"><span style="color:#B392F0;">192.168.1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">down.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">read</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;请输入ip值:&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出结果:</span></span>
<span class="line"><span style="color:#24292E;">[root@VM-4-13-centos scripts]# sh ping02.sh </span></span>
<span class="line"><span style="color:#6F42C1;">请输入ip值:192.168.1.1</span></span>
<span class="line"><span style="color:#6F42C1;">192.168.1.1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">down.</span></span></code></pre></div><p>还可以用<strong>位置变量</strong>,获取脚本参数。<code>$1</code>表示执行脚本时的第一个参数,<code>$2</code>表示第二个,类推</p><p><img src="`+x+`" alt="image-20220612073920404"></p><ul><li>环境变量</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">定义变量:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">方法1：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">back_dir2=/home/backup</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">方法2:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">back_dir1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">将自定义的变量转换成环境变量</span></span>
<span class="line"><span style="color:#B392F0;">引用变量:</span><span style="color:#E1E4E8;"> $变量名 </span><span style="color:#9ECBFF;">或</span><span style="color:#E1E4E8;"> \${变量名}</span></span>
<span class="line"><span style="color:#B392F0;">查看变量:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> $变量名 </span><span style="color:#9ECBFF;">env</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">例如:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">env</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">back_dir2</span></span>
<span class="line"><span style="color:#B392F0;">取消变量:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">变量名</span></span>
<span class="line"><span style="color:#B392F0;">作用范围:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">仅在当前shell和子shell中有效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">定义变量:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">方法1：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">back_dir2=/home/backup</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">方法2:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">back_dir1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">将自定义的变量转换成环境变量</span></span>
<span class="line"><span style="color:#6F42C1;">引用变量:</span><span style="color:#24292E;"> $变量名 </span><span style="color:#032F62;">或</span><span style="color:#24292E;"> \${变量名}</span></span>
<span class="line"><span style="color:#6F42C1;">查看变量:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> $变量名 </span><span style="color:#032F62;">env</span><span style="color:#24292E;">  </span><span style="color:#032F62;">例如:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">back_dir2</span></span>
<span class="line"><span style="color:#6F42C1;">取消变量:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">变量名</span></span>
<span class="line"><span style="color:#6F42C1;">作用范围:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">仅在当前shell和子shell中有效</span></span></code></pre></div><p>不加export是自定义变量,加export的是环境变量,作用域全局,可以在子shell中获取到</p><p><img src="`+w+'" alt="image-20220612074534794"></p><p>如果想要用其他文件的脚本中的变量,可以用export导出,但是一般没必要用。<strong>在用到的地方,加载执行后就可以获取到</strong></p><p><img src="'+P+'" alt="image-20220612075036263"></p><blockquote><p>相当于public.sh可以是一个大项目中公共的地方.定义各种变量路径.1.sh 2.sh 引用它</p></blockquote><ul><li><code>env</code>可以查看所有环境变量，（包括自己export的）</li></ul><p><img src="'+S+`" alt="image-20220612075604292"></p><blockquote><p>像 <code>/etc/profile</code>下的PATH等,都是系统环境变量,我们可以<code>$PATH</code>直接使用</p></blockquote><ul><li><code>\${}</code></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">\${}可以区分歧义，</span></span>
<span class="line"><span style="color:#B392F0;">比如$ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和</span><span style="color:#E1E4E8;"> $ipnew </span><span style="color:#9ECBFF;">，实际上我们想要的是变量ip,但是它会认为ipnew是变量</span></span>
<span class="line"><span style="color:#B392F0;">这时就可以用大括号隔开</span></span>
<span class="line"><span style="color:#E1E4E8;">\${ip}new</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">\${}可以区分歧义，</span></span>
<span class="line"><span style="color:#6F42C1;">比如$ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> $ipnew </span><span style="color:#032F62;">，实际上我们想要的是变量ip,但是它会认为ipnew是变量</span></span>
<span class="line"><span style="color:#6F42C1;">这时就可以用大括号隔开</span></span>
<span class="line"><span style="color:#24292E;">\${ip}new</span></span></code></pre></div><ul><li>位置变量</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$1 $2 $3 $4 $5 $6 $6 $7 $8 $8 $9 \${10}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$1 $2 $3 $4 $5 $6 $6 $7 $8 $8 $9 \${10}</span></span></code></pre></div><ul><li>预定义变量</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FFAB70;">$0</span><span style="color:#E1E4E8;"> 脚本名</span></span>
<span class="line"><span style="color:#79B8FF;">$*</span><span style="color:#E1E4E8;"> 所有的参数</span></span>
<span class="line"><span style="color:#FFAB70;">$@</span><span style="color:#E1E4E8;"> 所有的参数</span></span>
<span class="line"><span style="color:#79B8FF;">$#</span><span style="color:#E1E4E8;"> 参数的个数</span></span>
<span class="line"><span style="color:#79B8FF;">$$</span><span style="color:#E1E4E8;"> 当前进程的PID</span></span>
<span class="line"><span style="color:#79B8FF;">$!</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">上一个后台进程的PID</span></span>
<span class="line"><span style="color:#79B8FF;">$?</span><span style="color:#E1E4E8;"> 上一个命令的返回值 0 表示成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#E36209;">$0</span><span style="color:#24292E;"> 脚本名</span></span>
<span class="line"><span style="color:#005CC5;">$*</span><span style="color:#24292E;"> 所有的参数</span></span>
<span class="line"><span style="color:#E36209;">$@</span><span style="color:#24292E;"> 所有的参数</span></span>
<span class="line"><span style="color:#005CC5;">$#</span><span style="color:#24292E;"> 参数的个数</span></span>
<span class="line"><span style="color:#005CC5;">$$</span><span style="color:#24292E;"> 当前进程的PID</span></span>
<span class="line"><span style="color:#005CC5;">$!</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">上一个后台进程的PID</span></span>
<span class="line"><span style="color:#005CC5;">$?</span><span style="color:#24292E;"> 上一个命令的返回值 0 表示成功</span></span></code></pre></div><p>获取上个进程的后台进程：</p><p><img src="`+Y+`" alt="image-20220612080239780"></p><p>更详细的测试脚本:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;第2个位置参数是</span><span style="color:#79B8FF;">$2</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;第1个位置参数是</span><span style="color:#79B8FF;">$1</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;第4个位置参数是</span><span style="color:#79B8FF;">$4</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;所有参数是: </span><span style="color:#79B8FF;">$*</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;所有参数是: </span><span style="color:#79B8FF;">$@</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;参数个数是: </span><span style="color:#79B8FF;">$#</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;当前进程PID是: </span><span style="color:#79B8FF;">$$</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$1=&#39;</span><span style="color:#FFAB70;">$1</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$2=&#39;</span><span style="color:#FFAB70;">$2</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$3=&#39;</span><span style="color:#FFAB70;">$3</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$*=&#39;</span><span style="color:#79B8FF;">$*</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$@=&#39;</span><span style="color:#FFAB70;">$@</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$#=&#39;</span><span style="color:#79B8FF;">$#</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$$=&#39;</span><span style="color:#79B8FF;">$$</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">这里要注意下,单引号是强引用,不能方便量,会被原样输出.双引号可以放变量.如果有!要转义\\！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;第2个位置参数是</span><span style="color:#005CC5;">$2</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;第1个位置参数是</span><span style="color:#005CC5;">$1</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;第4个位置参数是</span><span style="color:#005CC5;">$4</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;所有参数是: </span><span style="color:#005CC5;">$*</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;所有参数是: </span><span style="color:#005CC5;">$@</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;参数个数是: </span><span style="color:#005CC5;">$#</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;当前进程PID是: </span><span style="color:#005CC5;">$$</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$1=&#39;</span><span style="color:#E36209;">$1</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$2=&#39;</span><span style="color:#E36209;">$2</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$3=&#39;</span><span style="color:#E36209;">$3</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$*=&#39;</span><span style="color:#005CC5;">$*</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$@=&#39;</span><span style="color:#E36209;">$@</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$#=&#39;</span><span style="color:#005CC5;">$#</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$$=&#39;</span><span style="color:#005CC5;">$$</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">这里要注意下,单引号是强引用,不能方便量,会被原样输出.双引号可以放变量.如果有!要转义\\！</span></span></code></pre></div><p><img src="`+M+'" alt="image-20220612080909466"></p><p>案例:<code>$0 $1 $?</code>的整合使用</p><p>定义个脚本ping07.sh,访问ip.txt中的所有ip</p><p><img src="'+T+`" alt="image-20220612081608837"></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># 如果用户没有加参数</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#79B8FF;">$#</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-eq</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ];</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;usage: \`</span><span style="color:#B392F0;">basename</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">$0</span><span style="color:#9ECBFF;">\` file&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#这样写也可以,这种方式叫命令替换,反引号和$()</span></span>
<span class="line"><span style="color:#6A737D;">#echo &quot;usage: $(basename $0) file&quot;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 判断是文件</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">$1</span><span style="color:#E1E4E8;"> ];</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;error file!&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 错误的文件,退出</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">exit</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 循环ip</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ping ......&quot;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ip </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">cat</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">$1</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c1</span><span style="color:#E1E4E8;"> $ip &amp;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">/dev/null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#79B8FF;">$?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-eq</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ];</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;"> is up.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$ip</span><span style="color:#9ECBFF;"> is down.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># 如果用户没有加参数</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#005CC5;">$#</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-eq</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ];</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;usage: \`</span><span style="color:#6F42C1;">basename</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">$0</span><span style="color:#032F62;">\` file&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#这样写也可以,这种方式叫命令替换,反引号和$()</span></span>
<span class="line"><span style="color:#6A737D;">#echo &quot;usage: $(basename $0) file&quot;</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 判断是文件</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-f</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$1</span><span style="color:#24292E;"> ];</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error file!&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 错误的文件,退出</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">exit</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 循环ip</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ping ......&quot;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ip </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">cat</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">$1</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c1</span><span style="color:#24292E;"> $ip &amp;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">/dev/null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#005CC5;">$?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-eq</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ];</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;"> is up.&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$ip</span><span style="color:#032F62;"> is down.&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>效果：</p><p><img src="`+I+'" alt="image-20220612082739465"></p><blockquote><p>basename和dirname，可以获取基础路径</p></blockquote><p><img src="'+O+'" alt="image-20220612081745234"></p><p>变量<code>&quot;&quot; 和 `` 和 $()</code>区别</p><p><img src="'+L+`" alt="image-20220612091134821"></p><h3 id="变量运算" tabindex="-1">变量运算 <a class="header-anchor" href="#变量运算" aria-label="Permalink to &quot;变量运算&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">方法1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">expr</span></span>
<span class="line"><span style="color:#B392F0;">expr</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">+2</span></span>
<span class="line"><span style="color:#B392F0;">expr</span><span style="color:#E1E4E8;"> $num1 </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> $num2</span></span>
<span class="line"><span style="color:#B392F0;">方法2：$((</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$((</span><span style="color:#E1E4E8;">$num1</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">$num2</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$((</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(((</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">)</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$((</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">**</span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">sum</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$((</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">))</span><span style="color:#E1E4E8;">;</span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $sum</span></span>
<span class="line"><span style="color:#B392F0;">方法3:</span><span style="color:#E1E4E8;"> $</span><span style="color:#9ECBFF;">[]</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">+1]</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">2**</span><span style="color:#9ECBFF;">3]</span></span>
<span class="line"><span style="color:#B392F0;">方法4：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">let</span></span>
<span class="line"><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sum=</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">+2</span><span style="color:#E1E4E8;">;</span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $sum</span></span>
<span class="line"><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i++</span><span style="color:#E1E4E8;">;</span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $i</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">方法1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">expr</span></span>
<span class="line"><span style="color:#6F42C1;">expr</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">+2</span></span>
<span class="line"><span style="color:#6F42C1;">expr</span><span style="color:#24292E;"> $num1 </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> $num2</span></span>
<span class="line"><span style="color:#6F42C1;">方法2：$((</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$((</span><span style="color:#24292E;">$num1</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">$num2</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$((</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(((</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$((</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">**</span><span style="color:#005CC5;">3</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#24292E;">sum</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$((</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">))</span><span style="color:#24292E;">;</span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $sum</span></span>
<span class="line"><span style="color:#6F42C1;">方法3:</span><span style="color:#24292E;"> $</span><span style="color:#032F62;">[]</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">+1]</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">2**</span><span style="color:#032F62;">3]</span></span>
<span class="line"><span style="color:#6F42C1;">方法4：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">let</span></span>
<span class="line"><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sum=</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">+2</span><span style="color:#24292E;">;</span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $sum</span></span>
<span class="line"><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i++</span><span style="color:#24292E;">;</span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $i</span></span></code></pre></div><blockquote><p>bash -vx test.sh 调试模式运行脚本</p></blockquote><p><code>let i++</code>应用场景：循环中变量自增,条件退出</p><p><img src="`+U+`" alt="image-20220612093719609"></p><p>小数运算</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2*4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bc</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2^4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bc</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;scale=2;6/4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bc</span></span>
<span class="line"><span style="color:#B392F0;">awk</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;BEGIN{print 1/2}&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;print 5.0/2&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">python</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2*4&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bc</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2^4&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bc</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;scale=2;6/4&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bc</span></span>
<span class="line"><span style="color:#6F42C1;">awk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;BEGIN{print 1/2}&#39;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;print 5.0/2&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">python</span></span></code></pre></div><p>变量扩展删除和替换</p><p><img src="`+N+'" alt="image-20220612100108641"></p><p><img src="'+H+'" alt="image-20220615103913356"></p><p><img src="'+J+'" alt="image-20220615104120820"></p><p><img src="'+z+'" alt="image-20220615104202128"></p><blockquote><p><code>-</code> 是没有值(没有被定义过)的时候,给个默认值</p></blockquote><p><img src="'+Q+'" alt="image-20220615104405439"></p><blockquote><p><code>:-</code> 是没有值/空值的时候,给个默认值</p></blockquote><p><img src="'+V+'" alt="image-20220615104516925"></p><h3 id="变量自增" tabindex="-1">变量自增 <a class="header-anchor" href="#变量自增" aria-label="Permalink to &quot;变量自增&quot;">​</a></h3><p><img src="'+K+'" alt="image-20220615104737355"></p><p><img src="'+j+`" alt="image-20220615105131650"></p><h2 id="条件测试" tabindex="-1">条件测试 <a class="header-anchor" href="#条件测试" aria-label="Permalink to &quot;条件测试&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">格式1：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">条件表达式</span></span>
<span class="line"><span style="color:#B392F0;">格式2:</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">条件表达式</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#B392F0;">格式3:</span><span style="color:#E1E4E8;"> [[  </span><span style="color:#9ECBFF;">条件表达式</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">格式1：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">条件表达式</span></span>
<span class="line"><span style="color:#6F42C1;">格式2:</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">条件表达式</span><span style="color:#24292E;"> </span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#6F42C1;">格式3:</span><span style="color:#24292E;"> [[  </span><span style="color:#032F62;">条件表达式</span><span style="color:#24292E;"> </span><span style="color:#032F62;">]]</span></span></code></pre></div><p><img src="`+G+'" alt="image-20220615112705782"></p><blockquote><p>d 目录,f 文件,L 连接</p></blockquote><h3 id="test" tabindex="-1">test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;test&quot;">​</a></h3><blockquote><p>man test ： test是条件测试的命令</p></blockquote><p><img src="'+Z+`" alt="image-20220615105747346"></p><p>目录存在返回0,真,不存在,返回1,假</p><h3 id="文件测试" tabindex="-1">文件测试 <a class="header-anchor" href="#文件测试" aria-label="Permalink to &quot;文件测试&quot;">​</a></h3><p>如果目录不存在,就创建</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">back_dir</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/var/mysql_back</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 测试目录是否存在</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> $back_dir;</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> $back_dir</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;开始备份...&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">back_dir</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/var/mysql_back</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 测试目录是否存在</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> $back_dir;</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> $back_dir</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;开始备份...&quot;</span></span></code></pre></div><p>测试: <code>bash -vx test.sh</code></p><p><img src="`+R+'" alt="image-20220615110034695"></p><p>var目录下创建了目录</p><p><img src="'+X+'" alt="image-20220615110059226"></p><h3 id="" tabindex="-1"><code>[]</code> <a class="header-anchor" href="#" aria-label="Permalink to &quot;`[]`&quot;">​</a></h3><p>注意<code>[]</code>也是个命令.所以也是要加空格的.</p><p><img src="'+W+'" alt="image-20220615110252170"></p><blockquote><p>类似于 <code>[</code> 是个命令,而<code>]</code>是必须的参数</p></blockquote><p>可以man 查看test的帮助</p><p><img src="'+ss+'" alt="image-20220615111154590"></p><p>还可以用<code>type -a [</code>观察他们的区别</p><p><img src="'+as+'" alt="image-20220615111744523"></p><p><code>if</code>只是做判断(后面可以跟任何语句),如果想退出脚本用<code>exit</code></p><p>数值比较 <code>eq</code>,<code>ne</code>等 字符串比较 <code>==</code>（<code>=</code>一个等号也可以），<strong>详细的可以在man test里面找到</strong></p><h3 id="-1" tabindex="-1"><code>[[]]</code> <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;`[[]]`&quot;">​</a></h3><p>可以比正则表达式</p><p>比较是不是数字: <code>[[ &quot;$num&quot; =~ ^[0-9]+$ ]]</code></p><p>快速创建多个用户的应用案例:</p><p><img src="'+ns+'" alt="image-20220615131716368"></p><h2 id="数值比较" tabindex="-1">数值比较 <a class="header-anchor" href="#数值比较" aria-label="Permalink to &quot;数值比较&quot;">​</a></h2><p><img src="'+ls+'" alt="image-20220615114140640"></p><p><img src="'+ps+'" alt="image-20220615125350529"></p><h2 id="字符串比较" tabindex="-1">字符串比较 <a class="header-anchor" href="#字符串比较" aria-label="Permalink to &quot;字符串比较&quot;">​</a></h2><p><img src="'+es+'" alt="image-20220615125459551"></p><blockquote><p>字符串比较建议都加上双引号</p></blockquote><p><code>-z</code>判断长度是0,<code>-n</code>判断长度不是0</p><p>如果不加双引号,判断的时候,可能得不到想要的效果</p><p><img src="'+os+'" alt="image-20220615125920528"></p><p><img src="'+cs+`" alt="image-20220615130016931"></p><h2 id="脚本规范" tabindex="-1">脚本规范 <a class="header-anchor" href="#脚本规范" aria-label="Permalink to &quot;脚本规范&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;">############################</span></span>
<span class="line"><span style="color:#6A737D;">#脚本作用					#</span></span>
<span class="line"><span style="color:#6A737D;">#v1.0 by nbchen 2022/06/15 #</span></span>
<span class="line"><span style="color:#6A737D;">############################</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">if判断,错误的输出，一般exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">退出的值是任意的，可以自定义的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;">############################</span></span>
<span class="line"><span style="color:#6A737D;">#脚本作用					#</span></span>
<span class="line"><span style="color:#6A737D;">#v1.0 by nbchen 2022/06/15 #</span></span>
<span class="line"><span style="color:#6A737D;">############################</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">if判断,错误的输出，一般exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">退出的值是任意的，可以自定义的</span></span></code></pre></div><h2 id="循环中" tabindex="-1">循环中 <a class="header-anchor" href="#循环中" aria-label="Permalink to &quot;循环中&quot;">​</a></h2><h3 id="使用序列" tabindex="-1">使用序列 <a class="header-anchor" href="#使用序列" aria-label="Permalink to &quot;使用序列&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">num</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">1...10}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">1...$num}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">seq</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$num</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">正确的写法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">num</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">1...10}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">1...$num}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">seq</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$num</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">正确的写法</span></span></code></pre></div><h3 id="case模式匹配" tabindex="-1">case模式匹配 <a class="header-anchor" href="#case模式匹配" aria-label="Permalink to &quot;case模式匹配&quot;">​</a></h3><p><img src="`+ts+`" alt="image-20220615131825647"></p><blockquote><p>模式就是你的值</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">while true</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">do</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">done</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">for i in \`seq $num\`</span></span>
<span class="line"><span style="color:#e1e4e8;">do</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">while true</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">do</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">done</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">for i in \`seq $num\`</span></span>
<span class="line"><span style="color:#24292e;">do</span></span></code></pre></div><h3 id="while循环" tabindex="-1">while循环 <a class="header-anchor" href="#while循环" aria-label="Permalink to &quot;while循环&quot;">​</a></h3><p>获取文件内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">while read inputstr </span></span>
<span class="line"><span style="color:#e1e4e8;">do </span></span>
<span class="line"><span style="color:#e1e4e8;">done &lt; user.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">while read inputstr </span></span>
<span class="line"><span style="color:#24292e;">do </span></span>
<span class="line"><span style="color:#24292e;">done &lt; user.txt</span></span></code></pre></div><p>死循环：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">:</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">:</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><h3 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h3><p><img src="`+rs+`" alt="image-20220615152940496"></p><p>等待for 循环结束</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 1...10</span></span>
<span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">....</span></span>
<span class="line"><span style="color:#E1E4E8;">	}&amp;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span>
<span class="line"><span style="color:#79B8FF;">wait</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 等前面的所有后台进程结束,然后打印。不加的话,可能代码循环结束了,不一定执行完，所以可能会先执行下面的</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 1...10</span></span>
<span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">....</span></span>
<span class="line"><span style="color:#24292E;">	}&amp;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span>
<span class="line"><span style="color:#005CC5;">wait</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 等前面的所有后台进程结束,然后打印。不加的话,可能代码循环结束了,不一定执行完，所以可能会先执行下面的</span></span>
<span class="line"><span style="color:#005CC5;">echo</span></span></code></pre></div><h3 id="while-util" tabindex="-1">while util <a class="header-anchor" href="#while-util" aria-label="Permalink to &quot;while util&quot;">​</a></h3><p><img src="`+is+'" alt="image-20220615164123829"></p><p>小结</p><h2 id="特殊符号" tabindex="-1">特殊符号 <a class="header-anchor" href="#特殊符号" aria-label="Permalink to &quot;特殊符号&quot;">​</a></h2><p><img src="'+ys+'" alt="image-20220615140938130"></p><p><img src="'+Es+`" alt="image-20220615141208246"></p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><blockquote><p>主要是为了可以重复调用</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 调用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">test</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 调用</span></span></code></pre></div><h2 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-label="Permalink to &quot;流程控制&quot;">​</a></h2><p><img src="`+ds+'" alt="image-20220615152352616"></p><p><img src="'+hs+'" alt="image-20220615152429132"></p><h1 id="学习demo" tabindex="-1">学习demo <a class="header-anchor" href="#学习demo" aria-label="Permalink to &quot;学习demo&quot;">​</a></h1><h2 id="删除用户" tabindex="-1">删除用户 <a class="header-anchor" href="#删除用户" aria-label="Permalink to &quot;删除用户&quot;">​</a></h2><p>if 例子</p><p><img src="'+Fs+'" alt="image-20220615143410605"></p><p>case</p><p><img src="'+us+'" alt="image-20220615143638509"></p><blockquote><p>模式可以使多个,剩下的情况用*</p></blockquote><h1 id="其他命令" tabindex="-1">其他命令 <a class="header-anchor" href="#其他命令" aria-label="Permalink to &quot;其他命令&quot;">​</a></h1><blockquote><p>捕捉信号,防止ctrl+c,从脚本退出: trap &quot;&quot; HUP INT OUIT TSUP</p></blockquote><h1 id="多进程并发" tabindex="-1">多进程并发 <a class="header-anchor" href="#多进程并发" aria-label="Permalink to &quot;多进程并发&quot;">​</a></h1><p>无控制的并发</p><p><img src="'+gs+'" alt="image-20220615173627673"></p><p>有控制的并发</p><p><img src="'+ms+'" alt="image-20220615173556388"></p><p><img src="'+Cs+'" alt="image-20220615173607834"></p><blockquote><p>句柄还没有释放,文件就算删除了，也可以再拷贝回来</p></blockquote><p><img src="'+bs+'" alt="image-20220615174126588"></p><p><img src="'+qs+'" alt="image-20220615174333674"></p><p><img src="'+Bs+'" alt="image-20220615174210791"></p><p><img src="'+vs+'" alt="image-20220615174218028"></p><p><img src="'+ks+`" alt="image-20220615174941844"></p><h1 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h1><p>shell脚本编写</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">全链路平台报表业务复杂,SQL繁琐,导致如果直接查&quot;逻辑SQL[处理数据的SQL]&quot;会很慢。所以,可以通过写oracle存储过程或者是编写shell脚本的方式生成数据处理完成的结果表。这样直接查结果表,单表查询,就很快。</span></span>
<span class="line"><span style="color:#e1e4e8;">我们这里使用shell脚本编写,其实就是把SQL逻辑写在脚本里面,放到linux上,让他定时去跑,脚本的内容包括您的处理数据逻辑和虚拟表(数据处理完的表,类似view视图)等。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">全链路平台报表业务复杂,SQL繁琐,导致如果直接查&quot;逻辑SQL[处理数据的SQL]&quot;会很慢。所以,可以通过写oracle存储过程或者是编写shell脚本的方式生成数据处理完成的结果表。这样直接查结果表,单表查询,就很快。</span></span>
<span class="line"><span style="color:#24292e;">我们这里使用shell脚本编写,其实就是把SQL逻辑写在脚本里面,放到linux上,让他定时去跑,脚本的内容包括您的处理数据逻辑和虚拟表(数据处理完的表,类似view视图)等。</span></span></code></pre></div><p>linux之if [ $? -ne 0 ];</p><hr><p>$# 是启动脚本时携带的参数个数</p><p>-ne 是不等于</p><p>这个语句的意思是“如果shell的启动参数不等于1个”</p><p>$# 表示提供到shell脚本或者函数的参数总数；</p><p>$1 表示第一个参数。</p><p>-ne 表示 不等于</p><p>另外：</p><p>整数比较</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">-eq  等于,如:if [&quot;$a&quot; -eq &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#e1e4e8;">-ne  不等于,如:if [&quot;$a&quot; -ne &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#e1e4e8;">-gt  大于,如:if [&quot;$a&quot; -gt &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#e1e4e8;">-ge  大于等于,如:if [&quot;$a&quot; -ge &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#e1e4e8;">-lt  小于,如:if [&quot;$a&quot; -lt &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#e1e4e8;">-le  小于等于,如:if [&quot;$a&quot; -le &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;    小于(需要双括号),如:((&quot;$a&quot; &lt; &quot;$b&quot;))</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;=   小于等于(需要双括号),如:((&quot;$a&quot; &lt;= &quot;$b&quot;))</span></span>
<span class="line"><span style="color:#e1e4e8;">&gt;       大于(需要双括号),如:((&quot;$a&quot; &gt; &quot;$b&quot;))</span></span>
<span class="line"><span style="color:#e1e4e8;">&gt;=      大于等于(需要双括号),如:((&quot;$a&quot; &gt;= &quot;$b&quot;))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">-eq  等于,如:if [&quot;$a&quot; -eq &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#24292e;">-ne  不等于,如:if [&quot;$a&quot; -ne &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#24292e;">-gt  大于,如:if [&quot;$a&quot; -gt &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#24292e;">-ge  大于等于,如:if [&quot;$a&quot; -ge &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#24292e;">-lt  小于,如:if [&quot;$a&quot; -lt &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#24292e;">-le  小于等于,如:if [&quot;$a&quot; -le &quot;$b&quot; ]</span></span>
<span class="line"><span style="color:#24292e;">&lt;    小于(需要双括号),如:((&quot;$a&quot; &lt; &quot;$b&quot;))</span></span>
<span class="line"><span style="color:#24292e;">&lt;=   小于等于(需要双括号),如:((&quot;$a&quot; &lt;= &quot;$b&quot;))</span></span>
<span class="line"><span style="color:#24292e;">&gt;       大于(需要双括号),如:((&quot;$a&quot; &gt; &quot;$b&quot;))</span></span>
<span class="line"><span style="color:#24292e;">&gt;=      大于等于(需要双括号),如:((&quot;$a&quot; &gt;= &quot;$b&quot;))</span></span></code></pre></div><p><strong>另外：$?是shell变量,表示&quot;最后一次执行命令&quot;的退出状态.0为成功,非0为失败.</strong></p><p><a href="http://www.cnblogs.com/mfryf/archive/2012/03/23/2413362.html" target="_blank" rel="noreferrer">linux在shell中获取时间</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">获得当天的日期</span></span>
<span class="line"><span style="color:#e1e4e8;">date +%Y-%m-%d</span></span>
<span class="line"><span style="color:#e1e4e8;">输出： 2011-07-28</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">将当前日期赋值给DATE变量</span></span>
<span class="line"><span style="color:#e1e4e8;">DATE=$(date +%Y%m%d)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">有时候我们需要使用今天之前或者往后的日期，这时可以使用date的 -d参数</span></span>
<span class="line"><span style="color:#e1e4e8;">获取明天的日期</span></span>
<span class="line"><span style="color:#e1e4e8;">date -d next-day +%Y%m%d</span></span>
<span class="line"><span style="color:#e1e4e8;">获取昨天的日期</span></span>
<span class="line"><span style="color:#e1e4e8;">date -d last-day +%Y%m%d</span></span>
<span class="line"><span style="color:#e1e4e8;">获取上个月的年和月</span></span>
<span class="line"><span style="color:#e1e4e8;">date -d last-month +%Y%m</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">获取下个月的年和月</span></span>
<span class="line"><span style="color:#e1e4e8;">date -d next-month +%Y%m</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">获取明年的年份</span></span>
<span class="line"><span style="color:#e1e4e8;">date -d next-year +%Y</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">下面是一些date参数的说明和一些例子</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">名称 : date</span></span>
<span class="line"><span style="color:#e1e4e8;">使用权限 : 所有使用者</span></span>
<span class="line"><span style="color:#e1e4e8;">使用方式 : date [-u] [-d datestr] [-s datestr] [--utc] [--universal] [--date=datestr] [--set=datestr] [--help] [--version] [+FORMAT] [MMDDhhmm[[CC]YY][.ss]]</span></span>
<span class="line"><span style="color:#e1e4e8;">说明 : date 能用来显示或设定系统的日期和时间，在显示方面，使用者能设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下 :</span></span>
<span class="line"><span style="color:#e1e4e8;">时间方面 :</span></span>
<span class="line"><span style="color:#e1e4e8;">% : 印出</span></span>
<span class="line"><span style="color:#e1e4e8;">% %n : 下一行</span></span>
<span class="line"><span style="color:#e1e4e8;">%t : 跳格</span></span>
<span class="line"><span style="color:#e1e4e8;">%H : 小时(00..23)</span></span>
<span class="line"><span style="color:#e1e4e8;">%I : 小时(01..12)</span></span>
<span class="line"><span style="color:#e1e4e8;">%k : 小时(0..23)</span></span>
<span class="line"><span style="color:#e1e4e8;">%l : 小时(1..12)</span></span>
<span class="line"><span style="color:#e1e4e8;">%M : 分钟(00..59)</span></span>
<span class="line"><span style="color:#e1e4e8;">%p : 显示本地 AM 或 PM</span></span>
<span class="line"><span style="color:#e1e4e8;">%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)</span></span>
<span class="line"><span style="color:#e1e4e8;">%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数 %S : 秒(00..61)</span></span>
<span class="line"><span style="color:#e1e4e8;">%T : 直接显示时间 (24 小时制)</span></span>
<span class="line"><span style="color:#e1e4e8;">%X : 相当于 %H:%M:%S</span></span>
<span class="line"><span style="color:#e1e4e8;">%Z : 显示时区</span></span>
<span class="line"><span style="color:#e1e4e8;">日期方面 :</span></span>
<span class="line"><span style="color:#e1e4e8;">%a : 星期几 (Sun..Sat)</span></span>
<span class="line"><span style="color:#e1e4e8;">%A : 星期几 (Sunday..Saturday)</span></span>
<span class="line"><span style="color:#e1e4e8;">%b : 月份 (Jan..Dec)</span></span>
<span class="line"><span style="color:#e1e4e8;">%B : 月份 (January..December)</span></span>
<span class="line"><span style="color:#e1e4e8;">%c : 直接显示日期和时间</span></span>
<span class="line"><span style="color:#e1e4e8;">%d : 日 (01..31)</span></span>
<span class="line"><span style="color:#e1e4e8;">%D : 直接显示日期 (mm/dd/yy)</span></span>
<span class="line"><span style="color:#e1e4e8;">%h : 同 %b</span></span>
<span class="line"><span style="color:#e1e4e8;">%j : 一年中的第几天 (001..366)</span></span>
<span class="line"><span style="color:#e1e4e8;">%m : 月份 (01..12)</span></span>
<span class="line"><span style="color:#e1e4e8;">%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)</span></span>
<span class="line"><span style="color:#e1e4e8;">%w : 一周中的第几天 (0..6)</span></span>
<span class="line"><span style="color:#e1e4e8;">%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)</span></span>
<span class="line"><span style="color:#e1e4e8;">%x : 直接显示日期 (mm/dd/yy)</span></span>
<span class="line"><span style="color:#e1e4e8;">%y : 年份的最后两位数字 (00.99)</span></span>
<span class="line"><span style="color:#e1e4e8;">%Y : 完整年份 (0000..9999)</span></span>
<span class="line"><span style="color:#e1e4e8;">若是不以加号作为开头，则表示要设定时间，而时间格式为 MMDDhhmm[[CC]YY][.ss]，</span></span>
<span class="line"><span style="color:#e1e4e8;">其中 MM 为月份，</span></span>
<span class="line"><span style="color:#e1e4e8;">DD 为日，</span></span>
<span class="line"><span style="color:#e1e4e8;">hh 为小时，</span></span>
<span class="line"><span style="color:#e1e4e8;">mm 为分钟，</span></span>
<span class="line"><span style="color:#e1e4e8;">CC 为年份前两位数字，</span></span>
<span class="line"><span style="color:#e1e4e8;">YY 为年份后两位数字，</span></span>
<span class="line"><span style="color:#e1e4e8;">ss 为秒数</span></span>
<span class="line"><span style="color:#e1e4e8;">把计 :</span></span>
<span class="line"><span style="color:#e1e4e8;">-d datestr : 显示 datestr 中所设定的时间 (非系统时间)</span></span>
<span class="line"><span style="color:#e1e4e8;">--help : 显示辅助讯息</span></span>
<span class="line"><span style="color:#e1e4e8;">-s datestr : 将系统时间设为 datestr 中所设定的时间</span></span>
<span class="line"><span style="color:#e1e4e8;">-u : 显示目前的格林威治时间</span></span>
<span class="line"><span style="color:#e1e4e8;">--version : 显示版本编号</span></span>
<span class="line"><span style="color:#e1e4e8;">例子 :</span></span>
<span class="line"><span style="color:#e1e4e8;">显示时间后跳行，再显示目前日期 : date +%T%n%D</span></span>
<span class="line"><span style="color:#e1e4e8;">显示月份和日数 : date +%B %d</span></span>
<span class="line"><span style="color:#e1e4e8;">显示日期和设定时间(12:34:56) : date --date 12:34:56</span></span>
<span class="line"><span style="color:#e1e4e8;">设置系统当前时间（12:34:56）：date --s 12:34:56</span></span>
<span class="line"><span style="color:#e1e4e8;">注意 : 当你不希望出现无意义的 0 时(比如说 1999/03/07)，则能在标记中插入 - 符号，比如说 date +%-H:%-M:%-S 会把时分秒中无意义的 0 给去掉，像是原本的 08:09:04 会变为 8:9:4。另外，只有取得权限者(比如说 root)才能设定系统时间。 当你以 root 身分更改了系统时间之后，请记得以 clock -w 来将系统时间写入 CMOS 中，这样下次重新开机时系统时间才会持续抱持最新的正确值。</span></span>
<span class="line"><span style="color:#e1e4e8;">ntp时间同步</span></span>
<span class="line"><span style="color:#e1e4e8;">linux系统下默认安装了ntp服务，手动进行ntp同步如下</span></span>
<span class="line"><span style="color:#e1e4e8;">ntpdate ntp1.nl.net</span></span>
<span class="line"><span style="color:#e1e4e8;">当然，也能指定其他的ntp服务器</span></span>
<span class="line"><span style="color:#e1e4e8;">-------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">扩展功能</span></span>
<span class="line"><span style="color:#e1e4e8;">date 工具可以完成更多的工作，不仅仅只是打印出当前的系统日期。您可以使用它来得到给定的日期究竟是星期几，并得到相对于当前日期的相对日期。了解某一天是星期几</span></span>
<span class="line"><span style="color:#e1e4e8;">GNU 对 date 命令的另一个扩展是 -d 选项，当您的桌上没有日历表时（UNIX 用户不需要日历表），该选项非常有用。使用这个功能强大的选项，通过将日期作为引号括起来的参数提供，您可以快速地查明一个特定的日期究竟是星期几：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d &quot;nov 22&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">Wed Nov 22 00:00:00 EST 2006</span></span>
<span class="line"><span style="color:#e1e4e8;">$</span></span>
<span class="line"><span style="color:#e1e4e8;">在本示例中，您可以看到今年的 11 月 22 日是星期三。</span></span>
<span class="line"><span style="color:#e1e4e8;">所以，假设在 11 月 22 日召开一个重大的会议，您可以立即了解到这一天是星期三，而这一天您将赶到驻地办公室。</span></span>
<span class="line"><span style="color:#e1e4e8;">获得相对日期</span></span>
<span class="line"><span style="color:#e1e4e8;">d 选项还可以告诉您，相对于 当前日期若干天的究竟是哪一天，从现在开始的若干天或若干星期以后，或者以前（过去）。通过将这个相对偏移使用引号括起来，作为 -d 选项的参数，就可以完成这项任务。</span></span>
<span class="line"><span style="color:#e1e4e8;">例如，您需要了解两星期以后的日期。如果您处于 Shell 提示符处，那么可以迅速地得到答案：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d ’2 weeks’</span></span>
<span class="line"><span style="color:#e1e4e8;">关于使用该命令，还有其他一些重要的方法。使用 next/last指令，您可以得到以后的星期几是哪一天：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d ’next monday’ (下周一的日期)</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d last-month +%Y%m(上个月是几月)</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d next-month +%Y%m(下个月是几月)</span></span>
<span class="line"><span style="color:#e1e4e8;">使用 ago 指令，您可以得到过去的日期：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d ’30 days ago’ （30天前的日期）</span></span>
<span class="line"><span style="color:#e1e4e8;">您可以使用负数以得到相反的日期：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d ’dec 14 -2 weeks’ （相对:dec 14这个日期的两周前的日期）</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d ’-100 days’ (100天以前的日期)</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d ’50 days’(50天后的日期)</span></span>
<span class="line"><span style="color:#e1e4e8;">这个技巧非常有用，它可以根据将来的日期为自己设置提醒，可能是在脚本或 Shell 启动文件中，如下所示：</span></span>
<span class="line"><span style="color:#e1e4e8;">DAY=\`date -d ’2 weeks’ +&quot;%b %d&quot;\`</span></span>
<span class="line"><span style="color:#e1e4e8;">if test &quot;\`echo $DAY\`&quot; = &quot;Aug 16&quot;; then echo ’Product launch is now two weeks away!’; fi</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">##############################</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">unix shell中的日期格式转换</span></span>
<span class="line"><span style="color:#e1e4e8;">$ t_t=&quot;Jul  1 21:29&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date &quot;+%G-%m-%d %H:%M:%S&quot; -d &quot;$t_t&quot; # $t_t的格式是比较随意的</span></span>
<span class="line"><span style="color:#e1e4e8;">2008-07-01 21:29:00</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date +%b/%d/%G -d &quot;2008-07-01&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">Jul/01/2008</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">unix shell中的日期之间间隔的天数</span></span>
<span class="line"><span style="color:#e1e4e8;">$ expr &#39;(&#39; $(date +%s -d &quot;2008-07-02&quot;) - $(date +%s -d &quot;2008-05-30&quot;) &#39;)&#39; / 86400</span></span>
<span class="line"><span style="color:#e1e4e8;">33</span></span>
<span class="line"><span style="color:#e1e4e8;">##存在bcdate的话，可以直接使用。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">shell中日期加减指定间隔单位</span></span>
<span class="line"><span style="color:#e1e4e8;">增加36小时：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ a=\`date +%Y-%m-%d\`</span></span>
<span class="line"><span style="color:#e1e4e8;">$ b=\`date +%Y-%m-%d -d &quot;$a +36 hours&quot;\`</span></span>
<span class="line"><span style="color:#e1e4e8;">10天前：</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date -d &quot;$a -10 days&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">Sun Jun 22 00:00:00 CST 2008</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">以指定格式显示文件更改后最后日期，如yyyy-mm-dd hh24:mi:ss</span></span>
<span class="line"><span style="color:#e1e4e8;">$ date &quot;+%Y-%m-%d %H:%M:%S&quot; -r test.bak</span></span>
<span class="line"><span style="color:#e1e4e8;">2008-07-01 21:28:55</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">获得当天的日期</span></span>
<span class="line"><span style="color:#24292e;">date +%Y-%m-%d</span></span>
<span class="line"><span style="color:#24292e;">输出： 2011-07-28</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">将当前日期赋值给DATE变量</span></span>
<span class="line"><span style="color:#24292e;">DATE=$(date +%Y%m%d)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">有时候我们需要使用今天之前或者往后的日期，这时可以使用date的 -d参数</span></span>
<span class="line"><span style="color:#24292e;">获取明天的日期</span></span>
<span class="line"><span style="color:#24292e;">date -d next-day +%Y%m%d</span></span>
<span class="line"><span style="color:#24292e;">获取昨天的日期</span></span>
<span class="line"><span style="color:#24292e;">date -d last-day +%Y%m%d</span></span>
<span class="line"><span style="color:#24292e;">获取上个月的年和月</span></span>
<span class="line"><span style="color:#24292e;">date -d last-month +%Y%m</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">获取下个月的年和月</span></span>
<span class="line"><span style="color:#24292e;">date -d next-month +%Y%m</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">获取明年的年份</span></span>
<span class="line"><span style="color:#24292e;">date -d next-year +%Y</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">下面是一些date参数的说明和一些例子</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">名称 : date</span></span>
<span class="line"><span style="color:#24292e;">使用权限 : 所有使用者</span></span>
<span class="line"><span style="color:#24292e;">使用方式 : date [-u] [-d datestr] [-s datestr] [--utc] [--universal] [--date=datestr] [--set=datestr] [--help] [--version] [+FORMAT] [MMDDhhmm[[CC]YY][.ss]]</span></span>
<span class="line"><span style="color:#24292e;">说明 : date 能用来显示或设定系统的日期和时间，在显示方面，使用者能设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下 :</span></span>
<span class="line"><span style="color:#24292e;">时间方面 :</span></span>
<span class="line"><span style="color:#24292e;">% : 印出</span></span>
<span class="line"><span style="color:#24292e;">% %n : 下一行</span></span>
<span class="line"><span style="color:#24292e;">%t : 跳格</span></span>
<span class="line"><span style="color:#24292e;">%H : 小时(00..23)</span></span>
<span class="line"><span style="color:#24292e;">%I : 小时(01..12)</span></span>
<span class="line"><span style="color:#24292e;">%k : 小时(0..23)</span></span>
<span class="line"><span style="color:#24292e;">%l : 小时(1..12)</span></span>
<span class="line"><span style="color:#24292e;">%M : 分钟(00..59)</span></span>
<span class="line"><span style="color:#24292e;">%p : 显示本地 AM 或 PM</span></span>
<span class="line"><span style="color:#24292e;">%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)</span></span>
<span class="line"><span style="color:#24292e;">%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数 %S : 秒(00..61)</span></span>
<span class="line"><span style="color:#24292e;">%T : 直接显示时间 (24 小时制)</span></span>
<span class="line"><span style="color:#24292e;">%X : 相当于 %H:%M:%S</span></span>
<span class="line"><span style="color:#24292e;">%Z : 显示时区</span></span>
<span class="line"><span style="color:#24292e;">日期方面 :</span></span>
<span class="line"><span style="color:#24292e;">%a : 星期几 (Sun..Sat)</span></span>
<span class="line"><span style="color:#24292e;">%A : 星期几 (Sunday..Saturday)</span></span>
<span class="line"><span style="color:#24292e;">%b : 月份 (Jan..Dec)</span></span>
<span class="line"><span style="color:#24292e;">%B : 月份 (January..December)</span></span>
<span class="line"><span style="color:#24292e;">%c : 直接显示日期和时间</span></span>
<span class="line"><span style="color:#24292e;">%d : 日 (01..31)</span></span>
<span class="line"><span style="color:#24292e;">%D : 直接显示日期 (mm/dd/yy)</span></span>
<span class="line"><span style="color:#24292e;">%h : 同 %b</span></span>
<span class="line"><span style="color:#24292e;">%j : 一年中的第几天 (001..366)</span></span>
<span class="line"><span style="color:#24292e;">%m : 月份 (01..12)</span></span>
<span class="line"><span style="color:#24292e;">%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)</span></span>
<span class="line"><span style="color:#24292e;">%w : 一周中的第几天 (0..6)</span></span>
<span class="line"><span style="color:#24292e;">%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)</span></span>
<span class="line"><span style="color:#24292e;">%x : 直接显示日期 (mm/dd/yy)</span></span>
<span class="line"><span style="color:#24292e;">%y : 年份的最后两位数字 (00.99)</span></span>
<span class="line"><span style="color:#24292e;">%Y : 完整年份 (0000..9999)</span></span>
<span class="line"><span style="color:#24292e;">若是不以加号作为开头，则表示要设定时间，而时间格式为 MMDDhhmm[[CC]YY][.ss]，</span></span>
<span class="line"><span style="color:#24292e;">其中 MM 为月份，</span></span>
<span class="line"><span style="color:#24292e;">DD 为日，</span></span>
<span class="line"><span style="color:#24292e;">hh 为小时，</span></span>
<span class="line"><span style="color:#24292e;">mm 为分钟，</span></span>
<span class="line"><span style="color:#24292e;">CC 为年份前两位数字，</span></span>
<span class="line"><span style="color:#24292e;">YY 为年份后两位数字，</span></span>
<span class="line"><span style="color:#24292e;">ss 为秒数</span></span>
<span class="line"><span style="color:#24292e;">把计 :</span></span>
<span class="line"><span style="color:#24292e;">-d datestr : 显示 datestr 中所设定的时间 (非系统时间)</span></span>
<span class="line"><span style="color:#24292e;">--help : 显示辅助讯息</span></span>
<span class="line"><span style="color:#24292e;">-s datestr : 将系统时间设为 datestr 中所设定的时间</span></span>
<span class="line"><span style="color:#24292e;">-u : 显示目前的格林威治时间</span></span>
<span class="line"><span style="color:#24292e;">--version : 显示版本编号</span></span>
<span class="line"><span style="color:#24292e;">例子 :</span></span>
<span class="line"><span style="color:#24292e;">显示时间后跳行，再显示目前日期 : date +%T%n%D</span></span>
<span class="line"><span style="color:#24292e;">显示月份和日数 : date +%B %d</span></span>
<span class="line"><span style="color:#24292e;">显示日期和设定时间(12:34:56) : date --date 12:34:56</span></span>
<span class="line"><span style="color:#24292e;">设置系统当前时间（12:34:56）：date --s 12:34:56</span></span>
<span class="line"><span style="color:#24292e;">注意 : 当你不希望出现无意义的 0 时(比如说 1999/03/07)，则能在标记中插入 - 符号，比如说 date +%-H:%-M:%-S 会把时分秒中无意义的 0 给去掉，像是原本的 08:09:04 会变为 8:9:4。另外，只有取得权限者(比如说 root)才能设定系统时间。 当你以 root 身分更改了系统时间之后，请记得以 clock -w 来将系统时间写入 CMOS 中，这样下次重新开机时系统时间才会持续抱持最新的正确值。</span></span>
<span class="line"><span style="color:#24292e;">ntp时间同步</span></span>
<span class="line"><span style="color:#24292e;">linux系统下默认安装了ntp服务，手动进行ntp同步如下</span></span>
<span class="line"><span style="color:#24292e;">ntpdate ntp1.nl.net</span></span>
<span class="line"><span style="color:#24292e;">当然，也能指定其他的ntp服务器</span></span>
<span class="line"><span style="color:#24292e;">-------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">扩展功能</span></span>
<span class="line"><span style="color:#24292e;">date 工具可以完成更多的工作，不仅仅只是打印出当前的系统日期。您可以使用它来得到给定的日期究竟是星期几，并得到相对于当前日期的相对日期。了解某一天是星期几</span></span>
<span class="line"><span style="color:#24292e;">GNU 对 date 命令的另一个扩展是 -d 选项，当您的桌上没有日历表时（UNIX 用户不需要日历表），该选项非常有用。使用这个功能强大的选项，通过将日期作为引号括起来的参数提供，您可以快速地查明一个特定的日期究竟是星期几：</span></span>
<span class="line"><span style="color:#24292e;">$ date -d &quot;nov 22&quot;</span></span>
<span class="line"><span style="color:#24292e;">Wed Nov 22 00:00:00 EST 2006</span></span>
<span class="line"><span style="color:#24292e;">$</span></span>
<span class="line"><span style="color:#24292e;">在本示例中，您可以看到今年的 11 月 22 日是星期三。</span></span>
<span class="line"><span style="color:#24292e;">所以，假设在 11 月 22 日召开一个重大的会议，您可以立即了解到这一天是星期三，而这一天您将赶到驻地办公室。</span></span>
<span class="line"><span style="color:#24292e;">获得相对日期</span></span>
<span class="line"><span style="color:#24292e;">d 选项还可以告诉您，相对于 当前日期若干天的究竟是哪一天，从现在开始的若干天或若干星期以后，或者以前（过去）。通过将这个相对偏移使用引号括起来，作为 -d 选项的参数，就可以完成这项任务。</span></span>
<span class="line"><span style="color:#24292e;">例如，您需要了解两星期以后的日期。如果您处于 Shell 提示符处，那么可以迅速地得到答案：</span></span>
<span class="line"><span style="color:#24292e;">$ date -d ’2 weeks’</span></span>
<span class="line"><span style="color:#24292e;">关于使用该命令，还有其他一些重要的方法。使用 next/last指令，您可以得到以后的星期几是哪一天：</span></span>
<span class="line"><span style="color:#24292e;">$ date -d ’next monday’ (下周一的日期)</span></span>
<span class="line"><span style="color:#24292e;">$ date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d</span></span>
<span class="line"><span style="color:#24292e;">$ date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d</span></span>
<span class="line"><span style="color:#24292e;">$ date -d last-month +%Y%m(上个月是几月)</span></span>
<span class="line"><span style="color:#24292e;">$ date -d next-month +%Y%m(下个月是几月)</span></span>
<span class="line"><span style="color:#24292e;">使用 ago 指令，您可以得到过去的日期：</span></span>
<span class="line"><span style="color:#24292e;">$ date -d ’30 days ago’ （30天前的日期）</span></span>
<span class="line"><span style="color:#24292e;">您可以使用负数以得到相反的日期：</span></span>
<span class="line"><span style="color:#24292e;">$ date -d ’dec 14 -2 weeks’ （相对:dec 14这个日期的两周前的日期）</span></span>
<span class="line"><span style="color:#24292e;">$ date -d ’-100 days’ (100天以前的日期)</span></span>
<span class="line"><span style="color:#24292e;">$ date -d ’50 days’(50天后的日期)</span></span>
<span class="line"><span style="color:#24292e;">这个技巧非常有用，它可以根据将来的日期为自己设置提醒，可能是在脚本或 Shell 启动文件中，如下所示：</span></span>
<span class="line"><span style="color:#24292e;">DAY=\`date -d ’2 weeks’ +&quot;%b %d&quot;\`</span></span>
<span class="line"><span style="color:#24292e;">if test &quot;\`echo $DAY\`&quot; = &quot;Aug 16&quot;; then echo ’Product launch is now two weeks away!’; fi</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">##############################</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">unix shell中的日期格式转换</span></span>
<span class="line"><span style="color:#24292e;">$ t_t=&quot;Jul  1 21:29&quot;</span></span>
<span class="line"><span style="color:#24292e;">$ date &quot;+%G-%m-%d %H:%M:%S&quot; -d &quot;$t_t&quot; # $t_t的格式是比较随意的</span></span>
<span class="line"><span style="color:#24292e;">2008-07-01 21:29:00</span></span>
<span class="line"><span style="color:#24292e;">$ date +%b/%d/%G -d &quot;2008-07-01&quot;</span></span>
<span class="line"><span style="color:#24292e;">Jul/01/2008</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">unix shell中的日期之间间隔的天数</span></span>
<span class="line"><span style="color:#24292e;">$ expr &#39;(&#39; $(date +%s -d &quot;2008-07-02&quot;) - $(date +%s -d &quot;2008-05-30&quot;) &#39;)&#39; / 86400</span></span>
<span class="line"><span style="color:#24292e;">33</span></span>
<span class="line"><span style="color:#24292e;">##存在bcdate的话，可以直接使用。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">shell中日期加减指定间隔单位</span></span>
<span class="line"><span style="color:#24292e;">增加36小时：</span></span>
<span class="line"><span style="color:#24292e;">$ a=\`date +%Y-%m-%d\`</span></span>
<span class="line"><span style="color:#24292e;">$ b=\`date +%Y-%m-%d -d &quot;$a +36 hours&quot;\`</span></span>
<span class="line"><span style="color:#24292e;">10天前：</span></span>
<span class="line"><span style="color:#24292e;">$ date -d &quot;$a -10 days&quot;</span></span>
<span class="line"><span style="color:#24292e;">Sun Jun 22 00:00:00 CST 2008</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">以指定格式显示文件更改后最后日期，如yyyy-mm-dd hh24:mi:ss</span></span>
<span class="line"><span style="color:#24292e;">$ date &quot;+%Y-%m-%d %H:%M:%S&quot; -r test.bak</span></span>
<span class="line"><span style="color:#24292e;">2008-07-01 21:28:55</span></span></code></pre></div><p><strong>window下编写的shell脚本在linux执行报错</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ps:shell脚本没有权限的话--&gt;chmod +x xxx.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ps:shell脚本没有权限的话--&gt;chmod +x xxx.sh</span></span></code></pre></div><p>今天写了一个sh文件,设置好权限之后运行发现提示故障</p><p>#-bash: ./test.sh: /bin/bash^M: bad interpreter: No such file or directory</p><p>检查发现路径后面多了^M 字样,用vim打开没有,猜想应该是由于编写shell的系统为window,</p><p>用vi打开文件后用</p><p>如果出现fileforma＝dos那么就基本可以确定是这个问题了。</p><p>:set ff? #出现fileforma＝dos那么就基本可以确定是格式问题</p><p>解决办法:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">:set fileformat=unix</span></span>
<span class="line"><span style="color:#e1e4e8;">:wq</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">:set fileformat=unix</span></span>
<span class="line"><span style="color:#24292e;">:wq</span></span></code></pre></div><blockquote><p>没有需求,就没有脚本</p></blockquote><h1 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h1><h2 id="为什么学习shell" tabindex="-1">为什么学习shell <a class="header-anchor" href="#为什么学习shell" aria-label="Permalink to &quot;为什么学习shell&quot;">​</a></h2><p>为了解决一些重复性的事情，解放你的双手，shell可以传递命令给操作系统，做很多强大的事情。</p><h2 id="shell是什么" tabindex="-1">shell是什么 <a class="header-anchor" href="#shell是什么" aria-label="Permalink to &quot;shell是什么&quot;">​</a></h2><p>一门脚本语言，但是不需要编译，直接由解释器执行。其他脚本语言:Python、PHP、JavaScrip。</p><h3 id="shell的起源" tabindex="-1">shell的起源 <a class="header-anchor" href="#shell的起源" aria-label="Permalink to &quot;shell的起源&quot;">​</a></h3><p>1964年，美国AT&amp;T公司的贝尔实验室、麻省理工学院及美国通用电气公司共同参与开始研发一套可以安装在大型主机上的多用户、多任务的操作系统，该操作系统的名称为Multics。</p><p>1970年，丹尼斯•里奇和汤普逊启动了另外一个新的多用户、多任务的操作系统的项目，他们把这个项目称之为UNICS。</p><p>1973年，使用C语言重新编写了Unix。通过这次编写，使得Unix得以移植到其他的小型机上面。</p><p>1979年，第一个重要的标准UNIX Shell在Unix的第7版中推出，并以作者史蒂夫•伯恩（Stephen Bourne）的名字命名，叫做Bourne Shell，简称为sh。</p><p>20世纪70年代末，C Shell作为2BSD UNIX的一部分发布，简称csh。</p><p>之后又出现了许多其他的Shell程序，主要包括TenexCShell（tcsh）KornShell（ksh）以及GNU Bourne-Again shell（bash）。</p><blockquote><p>Linux系统中比较流程的shell程序都是bash，也推荐使用标准的bash</p></blockquote><h2 id="shell-能干嘛-场景" tabindex="-1">Shell 能干嘛?（场景） <a class="header-anchor" href="#shell-能干嘛-场景" aria-label="Permalink to &quot;Shell 能干嘛?（场景）&quot;">​</a></h2><ul><li>自动化批量<strong>系统初始化</strong></li></ul><p>比如系统的update、软件安装、系统的时区设置、安全策略等</p><ul><li>自动化批量<strong>软件部署</strong></li></ul><p>比如常用的软件环境，一个一个命令麻烦易出错。</p><p>tomcat,mysql,nginx库，LVS，LAMP、LNMP，磁盘阵列RAID等等</p><ul><li>自动化<strong>管理程序</strong></li></ul><p>比如虚拟化管理(KVM),MySQL管理，远程修改密码，配置更新等</p><ul><li>自动化<strong>扩容</strong></li></ul><p>比如集群管理扩容(自动增加主机+部署应用/上线业务)</p><p>怎么做到的: 系统监控工具(Zabbix)监控CPU大于80%,报警通知,或者通过通过PythonAPI，调用ESC接口增删云主机。在通过Shell Script部署上线</p><ul><li>自动化<strong>日志分析处理</strong>程序</li></ul><p>比如统计页面浏览量(PV),访问人数(UV),内存TOP状态等</p><ul><li>自动化<strong>信息采集及监控</strong>程序</li></ul><p>比如收集系统CPU,内存(Mem)，I\\O负载，磁盘(Disk),网络(Net),应用状态,TCP状态等</p><ul><li>自动化<strong>备份恢复</strong>程序</li></ul><p>比如数据库备份，增量数据同步，Crond定时调度等</p><ul><li>还可以干嘛? <ul><li>俄罗斯方块，坦克大战，算法，等等，<s>shell可以做一切事情</s>:逃)。</li></ul></li></ul><blockquote><p>shell学得好可以提升你的自动化水平</p></blockquote><h2 id="shell-涉及的岗位" tabindex="-1">shell 涉及的岗位 <a class="header-anchor" href="#shell-涉及的岗位" aria-label="Permalink to &quot;shell 涉及的岗位&quot;">​</a></h2><ul><li>Linux运维工程师</li><li>DBA工程师</li><li>DevOps工程师</li><li>软件开发工程师</li><li>数据分析师</li><li>架构师</li></ul><h2 id="脚本第一行" tabindex="-1">脚本第一行 <a class="header-anchor" href="#脚本第一行" aria-label="Permalink to &quot;脚本第一行&quot;">​</a></h2><p>使用vi命令创建shell脚本文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="color:#6A737D;"># 编写逻辑代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="color:#6A737D;"># 编写逻辑代码</span></span></code></pre></div><p>shell中的注释用<code>#</code>，并且到该行结束。<code>#!</code>告诉系统同一行中紧跟在它后面的那个参数是用来执行文件的程序。上面的例子中，<code>/bin/sh</code>作为这个程序。</p><h2 id="设置shell可执行" tabindex="-1">设置shell可执行 <a class="header-anchor" href="#设置shell可执行" aria-label="Permalink to &quot;设置shell可执行&quot;">​</a></h2><p>脚本编辑后不能马上执行，<code>-rw-r--r--</code>。为了让用户拥有某个文件的执行权限，可以用chmod修改。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">chmod u+x xx.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">chmod 744 xx.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">效果:</span></span>
<span class="line"><span style="color:#e1e4e8;">-rwx-r--r--</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">chmod u+x xx.sh</span></span>
<span class="line"><span style="color:#24292e;">chmod 744 xx.sh</span></span>
<span class="line"><span style="color:#24292e;">效果:</span></span>
<span class="line"><span style="color:#24292e;">-rwx-r--r--</span></span></code></pre></div><p><strong>指定解释器</strong></p><p>如果指定了解释器，则不需要给文件设置执行权限，只要有可读权限就行了。这种是开子进程执行。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">/bin/bash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xx.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">/bin/bash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xx.sh</span></span></code></pre></div><p><strong>source执行</strong>:是读取shell脚本内容,然后在当前进程执行。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xx.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xx.sh</span></span></code></pre></div><h2 id="向脚本传递参数" tabindex="-1">向脚本传递参数 <a class="header-anchor" href="#向脚本传递参数" aria-label="Permalink to &quot;向脚本传递参数&quot;">​</a></h2><p>从命令行传递给shell脚本的参数也叫位置参数，shell脚本会根据参数的位置接收它们的值。</p><p>然后，在脚本文件里可以通过一些系统变量获取这些参数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$0 当前脚本的名称</span></span>
<span class="line"><span style="color:#e1e4e8;">$# 命令行传给shell脚本的参数个数，不包含$0,即排除脚本名</span></span>
<span class="line"><span style="color:#e1e4e8;">$n 传递给脚本的第n个参数，比如$1表示第一个参数，$2表示第二个参数......，超过9要用\${}获取,比如\${10}</span></span>
<span class="line"><span style="color:#e1e4e8;">$* 所有的参数,格式为:&quot;参数1 参数2 参数3&quot; , 这个返回形式是一个字符串，默认用空格隔开。（所以如果入参包含空格(&quot;b c&quot;这样的)或者其他特殊字符，用$@获取）</span></span>
<span class="line"><span style="color:#e1e4e8;">$@ 所有的参数,格式为:&quot;参数1&quot; &quot;参数2&quot; &quot;参数3&quot; , 这个等价于$n</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">$_ 保存之前执行的命令的最后一个参数</span></span>
<span class="line"><span style="color:#e1e4e8;">$$ 当前进程的PID</span></span>
<span class="line"><span style="color:#e1e4e8;">$! 上一个后台进程的PID</span></span>
<span class="line"><span style="color:#e1e4e8;">$? 上一个命令的返回值 0 表示成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$0 当前脚本的名称</span></span>
<span class="line"><span style="color:#24292e;">$# 命令行传给shell脚本的参数个数，不包含$0,即排除脚本名</span></span>
<span class="line"><span style="color:#24292e;">$n 传递给脚本的第n个参数，比如$1表示第一个参数，$2表示第二个参数......，超过9要用\${}获取,比如\${10}</span></span>
<span class="line"><span style="color:#24292e;">$* 所有的参数,格式为:&quot;参数1 参数2 参数3&quot; , 这个返回形式是一个字符串，默认用空格隔开。（所以如果入参包含空格(&quot;b c&quot;这样的)或者其他特殊字符，用$@获取）</span></span>
<span class="line"><span style="color:#24292e;">$@ 所有的参数,格式为:&quot;参数1&quot; &quot;参数2&quot; &quot;参数3&quot; , 这个等价于$n</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">$_ 保存之前执行的命令的最后一个参数</span></span>
<span class="line"><span style="color:#24292e;">$$ 当前进程的PID</span></span>
<span class="line"><span style="color:#24292e;">$! 上一个后台进程的PID</span></span>
<span class="line"><span style="color:#24292e;">$? 上一个命令的返回值 0 表示成功</span></span></code></pre></div><h2 id="hello-world" tabindex="-1">hello world <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;hello world&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># 输出字符串</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># 输出字符串</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span></span></code></pre></div><p>切换解释器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/lcal/php5/bin/php</span></span>
<span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">输出字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/lcal/php5/bin/php</span></span>
<span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">php</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">输出字符串</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 单行注释</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 多行注释</span></span>
<span class="line"><span style="color:#e1e4e8;">:&lt;&lt;BLOCK</span></span>
<span class="line"><span style="color:#e1e4e8;">行1</span></span>
<span class="line"><span style="color:#e1e4e8;">行2</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">BLOCK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 单行注释</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 多行注释</span></span>
<span class="line"><span style="color:#24292e;">:&lt;&lt;BLOCK</span></span>
<span class="line"><span style="color:#24292e;">行1</span></span>
<span class="line"><span style="color:#24292e;">行2</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">BLOCK</span></span></code></pre></div><blockquote><p>here document，将BLOCK之间的重定向到不存在的命令，间接实现了多行注释</p></blockquote><h2 id="shell-退出状态" tabindex="-1">shell 退出状态 <a class="header-anchor" href="#shell-退出状态" aria-label="Permalink to &quot;shell 退出状态&quot;">​</a></h2><p>Linux中每个命令都会返回一个退出状态码(0~255)，一般成功的命令返回0，失败的返回非0.</p><p>如果没有再程序中用exit执行，则默认由最后一个命令的执行结果决定。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">命令1执行</span></span>
<span class="line"><span style="color:#e1e4e8;">命令n执行</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">等价于</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">命令1执行</span></span>
<span class="line"><span style="color:#e1e4e8;">命令n执行</span></span>
<span class="line"><span style="color:#e1e4e8;">exit $?</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">等价于</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">命令1执行</span></span>
<span class="line"><span style="color:#e1e4e8;">命令n执行</span></span>
<span class="line"><span style="color:#e1e4e8;">exit</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">如果命令n报错了，则可以通过$?，获取报错后手动执行的返回状态码。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">命令1执行</span></span>
<span class="line"><span style="color:#24292e;">命令n执行</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">等价于</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">命令1执行</span></span>
<span class="line"><span style="color:#24292e;">命令n执行</span></span>
<span class="line"><span style="color:#24292e;">exit $?</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">等价于</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">命令1执行</span></span>
<span class="line"><span style="color:#24292e;">命令n执行</span></span>
<span class="line"><span style="color:#24292e;">exit</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">如果命令n报错了，则可以通过$?，获取报错后手动执行的返回状态码。</span></span></code></pre></div><h2 id="shell-配置文件" tabindex="-1">shell 配置文件 <a class="header-anchor" href="#shell-配置文件" aria-label="Permalink to &quot;shell 配置文件&quot;">​</a></h2><p>Linux中有很多类型的shell，最常用的sh和bash，他们有各自的系统环境变量的设置方法，分别保存在不同的配置文件中。</p><ul><li>sh</li></ul><p>Bourne Shell(sh)的配置文件主要有2个,分别为每个用户主目录中的<code>.profile</code>文件以及<code>/etc/profile</code>文件。后者<code>/etc/profile</code>是所有用户共同使用的文件。每个用户在登录shell之后，会先读取和执行<code>/etc/profile</code>文件中的脚本，然后再读取和执行各自主目录中的<code>.profile</code>文件。</p><blockquote><p>可以理解为大厅(公共场所)和各自的房间(独立空间)</p></blockquote><ul><li>bash</li></ul><p>Bourne-Again shell（bash）的配置文件主要有5个，有4个在用户主目录中，分别是：<code>.bash_profile</code>,<code>.bashrc</code>,<code>.bash_logout</code>,<code>.bash_history</code>，还有一个在<code>/etc</code>目录下,叫<code>bashrc</code>。</p><p><code>.bash_profile</code>用来保存每个用户自己使用的shell信息，当用户登录时，这个文件被读取和执行，<strong>只执行一次</strong>。一般用来设置环境变量 和 执行用户的 <code>.bashrc</code> 文件(文件中可以看到代码调用)。</p><p><code>.bashrc</code>是属于某个用户的bash相关信息的文件。用户登录和<strong>每次</strong>打开新的bash都会执行这个文件。主要用来定义别名和函数。</p><p><code>.bash_logout</code>每次用户退出shell时会执行，一般为空。</p><p><code>/etc/bashrc</code>和sh中的<code>/etc/profile</code>非常像，任何用户登录bash后都会执行这个文件中的代码。</p><blockquote><p>一般不建议修改bash的<code>/etc/bashrc</code>和sh的<code>/etc/profile</code>，如果要修改应该将修改放到用户主目录下的配置文件。</p></blockquote><h1 id="shell基础-1" tabindex="-1">Shell基础 <a class="header-anchor" href="#shell基础-1" aria-label="Permalink to &quot;Shell基础&quot;">​</a></h1><h2 id="shell-变量" tabindex="-1">shell 变量 <a class="header-anchor" href="#shell-变量" aria-label="Permalink to &quot;shell 变量&quot;">​</a></h2><h2 id="shell-条件测试" tabindex="-1">shell 条件测试 <a class="header-anchor" href="#shell-条件测试" aria-label="Permalink to &quot;shell 条件测试&quot;">​</a></h2><h2 id="shell-判断语句" tabindex="-1">shell 判断语句 <a class="header-anchor" href="#shell-判断语句" aria-label="Permalink to &quot;shell 判断语句&quot;">​</a></h2><h2 id="shell-循环结构" tabindex="-1">shell 循环结构 <a class="header-anchor" href="#shell-循环结构" aria-label="Permalink to &quot;shell 循环结构&quot;">​</a></h2><h2 id="shell-函数" tabindex="-1">shell 函数 <a class="header-anchor" href="#shell-函数" aria-label="Permalink to &quot;shell 函数&quot;">​</a></h2><h2 id="shell-数组" tabindex="-1">shell 数组 <a class="header-anchor" href="#shell-数组" aria-label="Permalink to &quot;shell 数组&quot;">​</a></h2><h2 id="shell-正则表达式" tabindex="-1">shell 正则表达式 <a class="header-anchor" href="#shell-正则表达式" aria-label="Permalink to &quot;shell 正则表达式&quot;">​</a></h2><h2 id="shell-文本处理" tabindex="-1">shell 文本处理 <a class="header-anchor" href="#shell-文本处理" aria-label="Permalink to &quot;shell 文本处理&quot;">​</a></h2><h2 id="shell-流编辑" tabindex="-1">shell 流编辑 <a class="header-anchor" href="#shell-流编辑" aria-label="Permalink to &quot;shell 流编辑&quot;">​</a></h2><h2 id="shell-文件操作" tabindex="-1">shell 文件操作 <a class="header-anchor" href="#shell-文件操作" aria-label="Permalink to &quot;shell 文件操作&quot;">​</a></h2><h2 id="shell-进程" tabindex="-1">shell 进程 <a class="header-anchor" href="#shell-进程" aria-label="Permalink to &quot;shell 进程&quot;">​</a></h2><h2 id="shell-调试" tabindex="-1">shell 调试 <a class="header-anchor" href="#shell-调试" aria-label="Permalink to &quot;shell 调试&quot;">​</a></h2><h2 id="shell-实操" tabindex="-1">shell 实操 <a class="header-anchor" href="#shell-实操" aria-label="Permalink to &quot;shell 实操&quot;">​</a></h2>`,407),fs=[Ds];function As(_s,xs,ws,Ps,Ss,Ys){return a(),n("div",null,fs)}const Is=s($s,[["render",As]]);export{Ts as __pageData,Is as default};
