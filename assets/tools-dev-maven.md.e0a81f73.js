import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.027d2da0.js";const e="/images/image-20230917161342014.png",p="/images/image-20230917161334678.png",t="/images/image-20230917161330837.png",o="/images/image-20220411100417881.png",r="/images/image-20220411101018514.png",c="/images/image-20220629114326612.png",i="/images/image-20220629114414630.png",g="/images/image-20230917163659493.png",y="/images/image-20230917163707054.png",d="/images/image-20230917163737091.png",E="/images/image-20230917163743744.png",m="/images/image-20230917163748916.png",u="/images/image-20230917163759949.png",h="/images/image-20230917163806073.png",v="/images/image-20230917165008699.png",b="/images/image-20230917165131230.png",f="/images/image-20230917165137881.png",k="/images/image-20230917165150888.png",j="/images/image-20230917165155380.png",x="/images/image-20230917165205360.png",A="/images/image-20230917165209507.png",D="/images/image-20230917165224205.png",q="/images/image-20230917165230097.png",I="/images/image-20230917165234264.png",M="/images/image-20230917165239875.png",P="/images/image-20230917165246673.png",_="/images/image-20230917165251072.png",C="/images/image-20230917165258729.png",S="/images/image-20230917165302519.png",w="/images/image-20230917165328243.png",O="/images/image-20230917165343821.png",R="/images/image-20230917165348494.png",L="/images/image-20230917165354547.png",F="/images/image-20230917165400107.png",B="/images/image-20230917165404996.png",T="/images/image-20220708033039215.png",N="/images/image-20191224105135578.png",J="/images/image-20191224105159688.png",H="/images/image-20191224105359670.png",V="/images/image-20220708032800465.png",$="/images/image-20230917165428212.png",U="/images/image-20230917165433082.png",W="/images/image-20230917165437380.png",Y="/images/image-20230917165442221.png",G="/images/image-20230917165447201.png",X="/images/image-20230917170944047.png",K="/images/image-20230917170951224.png",Z="/images/image-20230917170955706.png",z="/images/image-20220708032917810.png",Q="/images/image-20230917171013024.png",ss="/images/image-20230917171006970.png",as="/images/image-20230917171019732.png",ns="/images/image-20230917171024179.png",ls="/images/image-20230917171031126.png",es="/images/image-20230917171034939.png",ps="/images/image-20230917171215741.png",ts="/images/image-20230917171220781.png",os="/images/image-20230917171232490.png",rs="/images/image-20230917171235994.png",cs="/images/image-20230917171240035.png",is="/images/image-20230917171246698.png",gs="/images/image-20230917171249920.png",ys="/images/image-20230917171253868.png",ds="/images/image-20230917171301741.png",Es="/images/image-20230917171306798.png",ms="/images/image-20230917171310809.png",us="/images/image-20230917171716634.png",hs="/images/image-20230917171721680.png",vs="/images/image-20230917171731555.png",bs="/images/image-20230917171736830.png",fs="/images/image-20230917171838275.png",ks="/images/image-20230917171842690.png",js="/images/image-20230917171846939.png",xs="/images/image-20230917171850718.png",As="/images/image-20230917171854949.png",Ds="/images/image-20230917171900392.png",qs="/images/image-20230917171906111.png",Is="/images/image-20230917171911308.png",Ms="/images/image-20230917171915945.png",Ps="/images/image-20230917171919860.png",_s="/images/image-20230917171924615.png",Cs="/images/image-20230917171929705.png",Ss="/images/image-20230917171933551.png",ws="/images/image-20230917171940089.png",Os="/images/image-20191222211914094.png",Rs="/images/image-20191222212314528.png",Ls="/images/image-20191222212255624.png",Fs="/images/image-20230917172054882.png",Bs="/images/image-20230917172059430.png",Ts="/images/image-20230917172111669.png",Ns="/images/image-20230917172116531.png",Js="/images/image-20220701112032458.png",Hs="/images/image-20220701160437052.png",Vs="/images/image-20220701160517183.png",$s="/images/image-20230917172544222.png",Us="/images/image-20230917172717570.png",Ws="/images/image-20220701172948395.png",Ys="/images/image-20220701174936960.png",Gs="/images/image-20220701175000633.png",Xs="/images/image-20220701181259849.png",Ks="/images/image-20220701183531605.png",Zs="/images/image-20220701183544763.png",zs="/images/image-20220701185347742.png",Qs="/images/image-20220701185452212.png",sa="/images/image-20220701185505856.png",aa="/images/image-20220717140648338.png",na="/images/image-20220717140657713.png",la="/images/image-20220717140727483.png",ea="/images/image-20220717141351009.png",ua=JSON.parse('{"title":"Maven","description":"","frontmatter":{"typora-root-url":"./..\\\\..\\\\..\\\\public"},"headers":[],"relativePath":"tools-dev-maven.md","filePath":"docs/06_工具/04_项目构建/01_Maven.md"}'),pa={name:"tools-dev-maven.md"},ta=l(`<h1 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h1><h2 id="项目构建工具的前世今生" tabindex="-1">项目构建工具的前世今生 <a class="header-anchor" href="#项目构建工具的前世今生" aria-label="Permalink to &quot;项目构建工具的前世今生&quot;">​</a></h2><h3 id="ant" tabindex="-1"><strong>Ant</strong> <a class="header-anchor" href="#ant" aria-label="Permalink to &quot;**Ant**&quot;">​</a></h3><p>Ant是第一个所谓的“现代构建工具”，用于自动化构建过程。它是用Java实现的，主要用于Java项目。Ant的第一个公开发行版是在2000年，它很快成为Java项目最流行的构建工具，这要归功于它的平台独立性(如Java)，设置门槛低，并提供可重复的构建。后来，它还获得了接受插件的能力。</p><h3 id="maven-1" tabindex="-1"><strong>Maven</strong> <a class="header-anchor" href="#maven-1" aria-label="Permalink to &quot;**Maven**&quot;">​</a></h3><p>Maven于2004年首次发布，旨在改进开发人员在使用Ant和其他构建工具时遇到的一些问题。Maven最大的成就被认为是引入了项目结构约定、依赖关系管理和一个中心工件库Maven central。</p><h3 id="gradle" tabindex="-1"><strong>Gradle</strong> <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;**Gradle**&quot;">​</a></h3><p>Gradle是三个构建工具中最年轻的一个，它的开发人员试图将Ant的能力和灵活性与Maven的依赖关系管理和约定结合起来，以创建漂亮而闪亮的构建工具。经过几年的开发，GradleV1.0于2012年发布，并迅速开始流行起来。它发展得非常快，已经被一些大企业采用——例如，Gradle被选为谷歌Android操作系统的构建工具。</p><p>一个有趣的观点是，在Gradle中，XML不再被使用。相反，开发人员拥有一种基于JVM语言Groovy的领域特定语言(DSL)，Groovy的发明是为了让开发人员摆脱XML的冗长，编写更简单、更清晰的语句。这在用户中引发了一场争论，即标准的、易于理解的(但冗长的)XML样式比DSL好还是坏。</p><h2 id="maven介绍" tabindex="-1">Maven介绍 <a class="header-anchor" href="#maven介绍" aria-label="Permalink to &quot;Maven介绍&quot;">​</a></h2><h3 id="什么是maven" tabindex="-1">什么是Maven <a class="header-anchor" href="#什么是maven" aria-label="Permalink to &quot;什么是Maven&quot;">​</a></h3><p>Maven是项目进行模型抽象，充分运用的面向对象的思想，Maven可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。</p><p>说白了: <strong>Maven是由Apache开发的一个工具</strong>。用来管理java项目(依赖(jar)管理, 项目构建, 分模块开发 ，管理项目的生命周期).</p><p><strong>官网</strong>：<a href="http://maven.apache.org/" target="_blank" rel="noreferrer">http://maven.apache.org/</a></p><blockquote><p>Maven是Apache软件基金会唯一维护的一款<strong>自动化构建工具</strong>，专注于服务Java平台的<strong>项目构建</strong>和<strong>依赖管理</strong>。</p></blockquote><p>Maven是一个强大的Java项目构建工具，基于POM(项目对象模型)文件，可用于项目构建、依赖模块管理和Javadoc生成等。</p><p>Maven 是一种<strong>声明式</strong>项目管理工具，通过在 POM 中配置 &quot;who&quot;,&quot;what&quot;,&quot;where&quot;等信息，即可满足编译、测试、打包、发布等项目构建需求。</p><h3 id="maven的作用" tabindex="-1">Maven的作用 <a class="header-anchor" href="#maven的作用" aria-label="Permalink to &quot;Maven的作用&quot;">​</a></h3><ul><li><p>依赖管理: maven对项目的第三方构件（jar包）进行统一管理。向工程中加入jar包不要手工从其它地方拷贝，通过maven定义jar包的坐标，自动从maven仓库中去下载到工程中。</p></li><li><p>项目构建: maven提供一套对项目生命周期管理的标准，开发人员、和测试人员统一使用maven进行项目构建。项目生命周期管理：编译、测试、打包、部署、运行。</p></li><li><p>maven对工程分模块构建，提高开发效率。 (后面Maven高级会涉及)</p></li></ul><h3 id="为什么用maven" tabindex="-1">为什么用Maven? <a class="header-anchor" href="#为什么用maven" aria-label="Permalink to &quot;为什么用Maven?&quot;">​</a></h3><h4 id="_1-jar包的规模" tabindex="-1">（1）jar包的规模 <a class="header-anchor" href="#_1-jar包的规模" aria-label="Permalink to &quot;（1）jar包的规模&quot;">​</a></h4><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。</p><p>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：</p><ul><li>Nacos 服务注册发现</li><li>Web 框架环境</li><li>图模板技术 Thymeleaf</li></ul><p>最终却导入了 106 个 jar 包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">org.springframework.security:spring-security-rsa:jar:1.0.9.RELEASE:compile com.netflix.ribbon: ribbon:jar:2.3.0:compile org.springframework.boot:spring-boot-starter-thymeleaf:jar:2.3.6.RELEASE:compile commons-configuration:commons-configuration:jar:1.8:compile org.apache.logging.log4j:log4j-api:jar:2.13.3:compile org.springframework:spring-beans:jar:5.2.11.RELEASE:compile org.springframework.cloud:spring-cloud-starter-netflix-ribbon:jar:2.2.6.RELEASE:compile org.apache.tomcat.embed:tomcat-embed-websocket:jar:9.0.39:compile com.alibaba.cloud:spring-cloud-alibaba-commons:jar:2.2.6.RELEASE:compile org.bouncycastle:bcprov-jdk15on:jar:1.64:compile org.springframework.security:spring-security-crypto:jar:5.3.5.RELEASE:compile org.apache.httpcomponents:httpasyncclient:jar:4.1.4:compile com.google.j2objc:j2objc-annotations:jar:1.3:compile com.fasterxml.jackson.core:jackson-databind:jar:2.11.3:compile io.reactivex:rxjava:jar:1.3.8:compile ch.qos.logback:logback-classic:jar:1.2.3:compile org.springframework:spring-web:jar:5.2.11.RELEASE:compile io.reactivex:rxnetty-servo:jar:0.4.9:runtime org.springframework:spring-core:jar:5.2.11.RELEASE:compile io.github.openfeign.form:feign-form-spring:jar:3.8.0:compile io.github.openfeign.form:feign-form:jar:3.8.0:compile com.netflix.ribbon:ribbon-loadbalancer:jar:2.3.0:compile org.apache.httpcomponents:httpcore:jar:4.4.13:compile org.thymeleaf.extras:thymeleaf-extras-java8time:jar:3.0.4.RELEASE:compile org.slf4j:jul-to-slf4j:jar:1.7.30:compile com.itheima.demo:demo09-base-entity:jar:1.0-SNAPSHOT:compile org.yaml:snakeyaml:jar:1.26:compile org.springframework.boot:spring-boot-starter-logging:jar:2.3.6.RELEASE:compile io.reactivex:rxnetty-contexts:jar:0.4.9:runtime org.apache.httpcomponents:httpclient:jar:4.5.13:compile io.github.openfeign:feign-core:jar:10.10.1:compile org.springframework.boot:spring-boot-starter-aop:jar:2.3.6.RELEASE:compile org.hdrhistogram:HdrHistogram:jar:2.1.9:compile org.springframework:spring-context:jar:5.2.11.RELEASE:compile commons-lang:commons-lang:jar:2.6:compile io.prometheus:simpleclient:jar:0.5.0:compile ch.qos.logback:logback-core:jar:1.2.3:compile org.springframework:spring-webmvc:jar:5.2.11.RELEASE:compile com.sun.jersey:jersey-core:jar:1.19.1:runtime javax.ws.rs:jsr311-api:jar:1.1.1:runtime javax.inject:javax.inject:jar:1:runtime org.springframework.cloud:spring-cloud-openfeign-core:jar:2.2.6.RELEASE:compile com.netflix.ribbon:ribbon-core:jar:2.3.0:compile com.netflix.hystrix:hystrix-core:jar:1.5.18:compile com.netflix.ribbon:ribbon-transport:jar:2.3.0:runtime org.springframework.boot:spring-boot-starter-json:jar:2.3.6.RELEASE:compile org.springframework.cloud:spring-cloud-starter-openfeign:jar:2.2.6.RELEASE:compile com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.11.3:compile com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime io.github.openfeign:feign-hystrix:jar:10.10.1:compile io.github.openfeign:feign-slf4j:jar:10.10.1:compile com.alibaba.nacos:nacos-client:jar:1.4.2:compile org.apache.httpcomponents:httpcore-nio:jar:4.4.13:compile com.sun.jersey:jersey-client:jar:1.19.1:runtime org.springframework.cloud:spring-cloud-context:jar:2.2.6.RELEASE:compile org.glassfish:jakarta.el:jar:3.0.3:compile org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.11.3:compile org.springframework.cloud:spring-cloud-commons:jar:2.2.6.RELEASE:compile org.aspectj:aspectjweaver:jar:1.9.6:compile com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:jar:2.2.6.RELEASE:compile com.google.guava:listenablefuture:jar:9999.0-empty-to-avoid-conflict-with-guava:compile com.alibaba.spring:spring-context-support:jar:1.0.10:compile jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile org.bouncycastle:bcpkix-jdk15on:jar:1.64:compile com.netflix.netflix-commons:netflix-commons-util:jar:0.3.0:runtime com.fasterxml.jackson.core:jackson-annotations:jar:2.11.3:compile com.google.guava:guava:jar:29.0-jre:compile com.google.guava:failureaccess:jar:1.0.1:compile org.springframework.boot:spring-boot:jar:2.3.6.RELEASE:compile com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.11.3:compile com.itheima.demo:demo08-base-api:jar:1.0-SNAPSHOT:compile org.springframework.cloud:spring-cloud-starter-netflix-archaius:jar:2.2.6.RELEASE:compile org.springframework.boot:spring-boot-autoconfigure:jar:2.3.6.RELEASE:compile org.slf4j:slf4j-api:jar:1.7.30:compile commons-io:commons-io:jar:2.7:compile org.springframework.cloud:spring-cloud-starter:jar:2.2.6.RELEASE:compile org.apache.tomcat.embed:tomcat-embed-core:jar:9.0.39:compile io.reactivex:rxnetty:jar:0.4.9:runtime com.fasterxml.jackson.core:jackson-core:jar:2.11.3:compile com.google.code.findbugs:jsr305:jar:3.0.2:compile com.netflix.archaius:archaius-core:jar:0.7.6:compile org.springframework.boot:spring-boot-starter-web:jar:2.3.6.RELEASE:compile commons-codec:commons-codec:jar:1.14:compile com.netflix.servo:servo-core:jar:0.12.21:runtime com.google.errorprone:error_prone_annotations:jar:2.3.4:compile org.attoparser:attoparser:jar:2.0.5.RELEASE:compile com.itheima.demo:demo10-base-util:jar:1.0-SNAPSHOT:compile org.checkerframework:checker-qual:jar:2.11.1:compile org.thymeleaf:thymeleaf-spring5:jar:3.0.11.RELEASE:compile commons-fileupload:commons-fileupload:jar:1.4:compile com.netflix.ribbon:ribbon-httpclient:jar:2.3.0:compile com.netflix.netflix-commons:netflix-statistics:jar:0.1.1:runtime org.unbescape:unbescape:jar:1.1.6.RELEASE:compile org.springframework:spring-jcl:jar:5.2.11.RELEASE:compile com.alibaba.nacos:nacos-common:jar:1.4.2:compile commons-collections:commons-collections:jar:3.2.2:runtime javax.persistence:persistence-api:jar:1.0:compile com.alibaba.nacos:nacos-api:jar:1.4.2:compile org.thymeleaf:thymeleaf:jar:3.0.11.RELEASE:compile org.springframework:spring-aop:jar:5.2.11.RELEASE:compile org.springframework.boot:spring-boot-starter:jar:2.3.6.RELEASE:compile org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.6.RELEASE:compile org.springframework.cloud:spring-cloud-netflix-ribbon:jar:2.2.6.RELEASE:compile org.springframework:spring-expression:jar:5.2.11.RELEASE:compile org.springframework.cloud:spring-cloud-netflix-archaius:jar:2.2.6.RELEASE:compile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">org.springframework.security:spring-security-rsa:jar:1.0.9.RELEASE:compile com.netflix.ribbon: ribbon:jar:2.3.0:compile org.springframework.boot:spring-boot-starter-thymeleaf:jar:2.3.6.RELEASE:compile commons-configuration:commons-configuration:jar:1.8:compile org.apache.logging.log4j:log4j-api:jar:2.13.3:compile org.springframework:spring-beans:jar:5.2.11.RELEASE:compile org.springframework.cloud:spring-cloud-starter-netflix-ribbon:jar:2.2.6.RELEASE:compile org.apache.tomcat.embed:tomcat-embed-websocket:jar:9.0.39:compile com.alibaba.cloud:spring-cloud-alibaba-commons:jar:2.2.6.RELEASE:compile org.bouncycastle:bcprov-jdk15on:jar:1.64:compile org.springframework.security:spring-security-crypto:jar:5.3.5.RELEASE:compile org.apache.httpcomponents:httpasyncclient:jar:4.1.4:compile com.google.j2objc:j2objc-annotations:jar:1.3:compile com.fasterxml.jackson.core:jackson-databind:jar:2.11.3:compile io.reactivex:rxjava:jar:1.3.8:compile ch.qos.logback:logback-classic:jar:1.2.3:compile org.springframework:spring-web:jar:5.2.11.RELEASE:compile io.reactivex:rxnetty-servo:jar:0.4.9:runtime org.springframework:spring-core:jar:5.2.11.RELEASE:compile io.github.openfeign.form:feign-form-spring:jar:3.8.0:compile io.github.openfeign.form:feign-form:jar:3.8.0:compile com.netflix.ribbon:ribbon-loadbalancer:jar:2.3.0:compile org.apache.httpcomponents:httpcore:jar:4.4.13:compile org.thymeleaf.extras:thymeleaf-extras-java8time:jar:3.0.4.RELEASE:compile org.slf4j:jul-to-slf4j:jar:1.7.30:compile com.itheima.demo:demo09-base-entity:jar:1.0-SNAPSHOT:compile org.yaml:snakeyaml:jar:1.26:compile org.springframework.boot:spring-boot-starter-logging:jar:2.3.6.RELEASE:compile io.reactivex:rxnetty-contexts:jar:0.4.9:runtime org.apache.httpcomponents:httpclient:jar:4.5.13:compile io.github.openfeign:feign-core:jar:10.10.1:compile org.springframework.boot:spring-boot-starter-aop:jar:2.3.6.RELEASE:compile org.hdrhistogram:HdrHistogram:jar:2.1.9:compile org.springframework:spring-context:jar:5.2.11.RELEASE:compile commons-lang:commons-lang:jar:2.6:compile io.prometheus:simpleclient:jar:0.5.0:compile ch.qos.logback:logback-core:jar:1.2.3:compile org.springframework:spring-webmvc:jar:5.2.11.RELEASE:compile com.sun.jersey:jersey-core:jar:1.19.1:runtime javax.ws.rs:jsr311-api:jar:1.1.1:runtime javax.inject:javax.inject:jar:1:runtime org.springframework.cloud:spring-cloud-openfeign-core:jar:2.2.6.RELEASE:compile com.netflix.ribbon:ribbon-core:jar:2.3.0:compile com.netflix.hystrix:hystrix-core:jar:1.5.18:compile com.netflix.ribbon:ribbon-transport:jar:2.3.0:runtime org.springframework.boot:spring-boot-starter-json:jar:2.3.6.RELEASE:compile org.springframework.cloud:spring-cloud-starter-openfeign:jar:2.2.6.RELEASE:compile com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.11.3:compile com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime io.github.openfeign:feign-hystrix:jar:10.10.1:compile io.github.openfeign:feign-slf4j:jar:10.10.1:compile com.alibaba.nacos:nacos-client:jar:1.4.2:compile org.apache.httpcomponents:httpcore-nio:jar:4.4.13:compile com.sun.jersey:jersey-client:jar:1.19.1:runtime org.springframework.cloud:spring-cloud-context:jar:2.2.6.RELEASE:compile org.glassfish:jakarta.el:jar:3.0.3:compile org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.11.3:compile org.springframework.cloud:spring-cloud-commons:jar:2.2.6.RELEASE:compile org.aspectj:aspectjweaver:jar:1.9.6:compile com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:jar:2.2.6.RELEASE:compile com.google.guava:listenablefuture:jar:9999.0-empty-to-avoid-conflict-with-guava:compile com.alibaba.spring:spring-context-support:jar:1.0.10:compile jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile org.bouncycastle:bcpkix-jdk15on:jar:1.64:compile com.netflix.netflix-commons:netflix-commons-util:jar:0.3.0:runtime com.fasterxml.jackson.core:jackson-annotations:jar:2.11.3:compile com.google.guava:guava:jar:29.0-jre:compile com.google.guava:failureaccess:jar:1.0.1:compile org.springframework.boot:spring-boot:jar:2.3.6.RELEASE:compile com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.11.3:compile com.itheima.demo:demo08-base-api:jar:1.0-SNAPSHOT:compile org.springframework.cloud:spring-cloud-starter-netflix-archaius:jar:2.2.6.RELEASE:compile org.springframework.boot:spring-boot-autoconfigure:jar:2.3.6.RELEASE:compile org.slf4j:slf4j-api:jar:1.7.30:compile commons-io:commons-io:jar:2.7:compile org.springframework.cloud:spring-cloud-starter:jar:2.2.6.RELEASE:compile org.apache.tomcat.embed:tomcat-embed-core:jar:9.0.39:compile io.reactivex:rxnetty:jar:0.4.9:runtime com.fasterxml.jackson.core:jackson-core:jar:2.11.3:compile com.google.code.findbugs:jsr305:jar:3.0.2:compile com.netflix.archaius:archaius-core:jar:0.7.6:compile org.springframework.boot:spring-boot-starter-web:jar:2.3.6.RELEASE:compile commons-codec:commons-codec:jar:1.14:compile com.netflix.servo:servo-core:jar:0.12.21:runtime com.google.errorprone:error_prone_annotations:jar:2.3.4:compile org.attoparser:attoparser:jar:2.0.5.RELEASE:compile com.itheima.demo:demo10-base-util:jar:1.0-SNAPSHOT:compile org.checkerframework:checker-qual:jar:2.11.1:compile org.thymeleaf:thymeleaf-spring5:jar:3.0.11.RELEASE:compile commons-fileupload:commons-fileupload:jar:1.4:compile com.netflix.ribbon:ribbon-httpclient:jar:2.3.0:compile com.netflix.netflix-commons:netflix-statistics:jar:0.1.1:runtime org.unbescape:unbescape:jar:1.1.6.RELEASE:compile org.springframework:spring-jcl:jar:5.2.11.RELEASE:compile com.alibaba.nacos:nacos-common:jar:1.4.2:compile commons-collections:commons-collections:jar:3.2.2:runtime javax.persistence:persistence-api:jar:1.0:compile com.alibaba.nacos:nacos-api:jar:1.4.2:compile org.thymeleaf:thymeleaf:jar:3.0.11.RELEASE:compile org.springframework:spring-aop:jar:5.2.11.RELEASE:compile org.springframework.boot:spring-boot-starter:jar:2.3.6.RELEASE:compile org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.6.RELEASE:compile org.springframework.cloud:spring-cloud-netflix-ribbon:jar:2.2.6.RELEASE:compile org.springframework:spring-expression:jar:5.2.11.RELEASE:compile org.springframework.cloud:spring-cloud-netflix-archaius:jar:2.2.6.RELEASE:compile</span></span></code></pre></div><p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- web启动器依赖 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- 视图模板技术 thymeleaf --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- web启动器依赖 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- 视图模板技术 thymeleaf --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span></code></pre></div><h4 id="_2-jar包的来源" tabindex="-1">（2）jar包的来源 <a class="header-anchor" href="#_2-jar包的来源" aria-label="Permalink to &quot;（2）jar包的来源&quot;">​</a></h4><ul><li>这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载。</li><li>第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题。 <ul><li>jar包的名称</li><li>jar包的版本</li><li>jar包内的具体细节</li></ul></li><li>而使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范。</li></ul><h4 id="_3-jar包之间的依赖关系" tabindex="-1">（3）jar包之间的依赖关系 <a class="header-anchor" href="#_3-jar包之间的依赖关系" aria-label="Permalink to &quot;（3）jar包之间的依赖关系&quot;">​</a></h4><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。</p><p>下面是前面例子中 jar 包之间的依赖关系：</p><p><img src="`+e+'" alt="image-20230917161342014"></p><p>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助。</p><p>而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。</p><h3 id="maven的好处" tabindex="-1">Maven的好处 <a class="header-anchor" href="#maven的好处" aria-label="Permalink to &quot;Maven的好处&quot;">​</a></h3><ul><li>使用普通方式构建项目</li></ul><p><img src="'+p+'" alt="image-20230917161334678"></p><ul><li><p>使用Maven构建项目</p><p><img src="'+t+'" alt="image-20230917161330837"></p></li></ul><h2 id="maven仓库和坐标-重点" tabindex="-1">Maven仓库和坐标(重点) <a class="header-anchor" href="#maven仓库和坐标-重点" aria-label="Permalink to &quot;Maven仓库和坐标(重点)&quot;">​</a></h2><h3 id="maven的仓库" tabindex="-1">Maven的仓库 <a class="header-anchor" href="#maven的仓库" aria-label="Permalink to &quot;Maven的仓库&quot;">​</a></h3><blockquote><p>Maven 仓库是项目中依赖的第三方库</p></blockquote><p>在 Maven 中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件，Maven 仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方</p><table><thead><tr><th>仓库名称</th><th>作用</th></tr></thead><tbody><tr><td>本地仓库</td><td>相当于缓存，工程第一次会从远程仓库（互联网）去下载jar 包，将jar包存在本地仓库（在程序员的电脑上）。第二次不需要从远程仓库去下载。先从本地仓库找，如果找不到才会去远程仓库找。</td></tr><tr><td>中央仓库</td><td>仓库中jar由专业团队（maven团队）统一维护。中央仓库的地址：<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noreferrer">https://repo1.maven.org/maven2/</a></td></tr><tr><td>远程仓库</td><td>在公司内部架设一台私服，其它公司架设一台仓库，对外公开。</td></tr></tbody></table><p>注意：除本地仓库以外的仓库都可以叫做远程仓库</p><p>当项目编译时，Maven首先从本地仓库中寻找项目所需的Jar包，若本地仓库没有，再到Maven的中央仓库下载所需Jar包，这 3 个仓库中，jar包的查找顺序如下：</p><p><img src="'+o+`" alt="image-20220411100417881"></p><h4 id="本地仓库" tabindex="-1">本地仓库 <a class="header-anchor" href="#本地仓库" aria-label="Permalink to &quot;本地仓库&quot;">​</a></h4><blockquote><p>Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。默认位置：<code>当前用户名\\.m2\\repository。</code></p></blockquote><p>运行 Maven 的时候，Maven 所需要的任何构件都是直接从本地仓库获取的，如果本地仓库没有，它会首先尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件。</p><p>本地仓库默认位置在 <code>当前用户名\\.m2\\repository</code>，我们也可以修改本地仓库的位置，在 maven 安装目录下的 <code>conf/settings.xml</code>文件中可以修改，在该配置文件中可以看到 localRepository 节点被注释掉了，我们可以直接复制该节点，将值修改为本地路径即可</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- localRepository</span></span>
<span class="line"><span style="color:#6A737D;">   | The path to the local repository maven will use to store artifacts.</span></span>
<span class="line"><span style="color:#6A737D;">   |</span></span>
<span class="line"><span style="color:#6A737D;">   | Default: \${user.home}/.m2/repository</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">localRepository</span><span style="color:#E1E4E8;">&gt;E:/develop/maven_repository&lt;/</span><span style="color:#85E89D;">localRepository</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- localRepository</span></span>
<span class="line"><span style="color:#6A737D;">   | The path to the local repository maven will use to store artifacts.</span></span>
<span class="line"><span style="color:#6A737D;">   |</span></span>
<span class="line"><span style="color:#6A737D;">   | Default: \${user.home}/.m2/repository</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">localRepository</span><span style="color:#24292E;">&gt;E:/develop/maven_repository&lt;/</span><span style="color:#22863A;">localRepository</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>当你运行 Maven 命令，Maven 会将下载依赖的文件放到你指定的路径中。</p><h4 id="中央仓库" tabindex="-1">中央仓库 <a class="header-anchor" href="#中央仓库" aria-label="Permalink to &quot;中央仓库&quot;">​</a></h4><blockquote><p>中央仓库属于远程仓库的一种，Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等，一般来说，简单的Java项目依赖的包都可以在这里下载到</p></blockquote><p>中央仓库需要通过网络才能访问，低版本的 maven 中，比如 <code>maven-2.0.10</code>，可以在 <code>\${M2_HOME}/lib/maven-2.0.10-uber.jar</code> 中找到 pom.xml 配置文件</p><p>但是在 3.xxx 版本及之后的版本，在 maven 安装目录下的<code>lib/maven-model-builder-\${version}.jar</code>下，可以在 <code>\\org\\apache\\maven\\model\\pom-4.0.0.xml</code>取到 <code>pom-4.0.0.xml</code> 配置文件，该配置文件是所有 Maven POM 的父 POM，所有Maven项目继承该配置</p><p><img src="`+r+`" alt="image-20220411101018514"></p><p>你可以在 pom-4.0.0.xml 配置文件中找到如下配置信息</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">repositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;central&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;Central Repository&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- 默认的中央仓库地址 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;https://repo.maven.apache.org/maven2&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">layout</span><span style="color:#E1E4E8;">&gt;default&lt;/</span><span style="color:#85E89D;">layout</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">snapshots</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;false&lt;/</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">snapshots</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">repositories</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">repositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;central&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;Central Repository&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- 默认的中央仓库地址 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;https://repo.maven.apache.org/maven2&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">layout</span><span style="color:#24292E;">&gt;default&lt;/</span><span style="color:#22863A;">layout</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">snapshots</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;false&lt;/</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">snapshots</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">repositories</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>可以看到，中央仓库的id为central，远程url地址为 <code>https://repo.maven.apache.org/maven2</code>，它关闭了snapshot版本构件下载的支持</p><blockquote><p>但是国外的远程库下载速度比较慢，甚至可能会出现无法访问的问题，此时我们可以配置国内的仓库，比如阿里云中央仓库等</p></blockquote><h3 id="maven的坐标" tabindex="-1">Maven的坐标 <a class="header-anchor" href="#maven的坐标" aria-label="Permalink to &quot;Maven的坐标&quot;">​</a></h3><p>Maven的一个核心的作用就是管理项目的依赖，引入我们所需的各种jar包等。为了能自动化的解析任何一个Java构件，Maven必须将这些Jar包或者其他资源进行唯一标识，这是管理项目的依赖的基础，也就是我们要说的坐标。包括我们自己开发的项目，也是要通过坐标进行唯一标识的，这样才能才其它项目中进行依赖引用。坐标的定义元素如下：</p><ul><li>groupId:项目组织唯一的标识符，实际对应JAVA的包的结构 (一般写公司的组织名称 eg:com.itheima,com.alibaba)</li><li>artifactId: 项目的名称</li><li>version：定义项目的当前版本</li></ul><p>例如：要引入druid，只需要在pom.xml配置文件中配置引入druid的坐标即可：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependecies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!--druid连接池--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;druid&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;    </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0.9&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;mysql&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mysql-connector-java&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;5.1.6&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependecies</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependecies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--druid连接池--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;druid&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;    </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.0.9&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;mysql&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;mysql-connector-java&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;5.1.6&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependecies</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ol><li>仓库(本地仓库,中央仓库,远程仓库(私服)) <ul><li>先从本地仓库找 <ul><li>如果有, 就直接获得使用</li><li>如果没有, 从中央仓库找, 自动的下载到本地仓库</li></ul></li></ul></li><li>通过坐标从仓库里面找到对应的jar使用</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;druid&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0.9&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;druid&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;    </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.0.9&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ol start="3"><li>maven坐标搜索网站的地址: <a href="https://mvnrepository.com/" target="_blank" rel="noreferrer">https://mvnrepository.com/</a></li><li>以后工作中maven坐标是直接拷贝</li></ol><h2 id="maven安装" tabindex="-1">Maven安装 <a class="header-anchor" href="#maven安装" aria-label="Permalink to &quot;Maven安装&quot;">​</a></h2><h3 id="下载maven" tabindex="-1">下载Maven <a class="header-anchor" href="#下载maven" aria-label="Permalink to &quot;下载Maven&quot;">​</a></h3><ul><li><a href="http://maven.apache.org/" target="_blank" rel="noreferrer">http://maven.apache.org/</a></li><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noreferrer">Maven – Download Apache Maven</a></li></ul><p><img src="`+c+'" alt="image-20220629114326612"></p><p><img src="'+i+'" alt="image-20220629114414630"></p><h3 id="安装maven" tabindex="-1">安装Maven <a class="header-anchor" href="#安装maven" aria-label="Permalink to &quot;安装Maven&quot;">​</a></h3><p>将Maven压缩包解压，即安装完毕</p><p><img src="'+g+'" alt="image-20230917163659493"></p><h3 id="maven目录介绍" tabindex="-1">Maven目录介绍 <a class="header-anchor" href="#maven目录介绍" aria-label="Permalink to &quot;Maven目录介绍&quot;">​</a></h3><p><img src="'+y+'" alt="image-20230917163707054"></p><h3 id="配置环境变量" tabindex="-1">配置环境变量 <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;配置环境变量&quot;">​</a></h3><p>配置JDK环境</p><blockquote><p>在环境变量中增加<code>MAVEN_HOME</code></p></blockquote><ol><li>先在系统变量当中添加一个环境变量 MAVEN_HOME，变量值为 maven 的安装目录的根目录，比如：<code>D:\\dev\\apache-maven-3.6.3</code></li></ol><p><img src="'+d+'" alt="image-20230917163737091"></p><ol start="2"><li>然后找到系统变量 Path，给该变量的值后面添加：<code>;%MAVEN_HOME%\\bin</code> 即可</li></ol><p><img src="'+E+'" alt="image-20230917163743744"></p><ol start="3"><li>验证</li></ol><blockquote><p>检验 maven 安装是否成功，直接在命令窗口输入 mvn -v ，如果有输出 maven 的版本说明安装成功：</p></blockquote><p><img src="'+m+'" alt="image-20230917163748916"></p><h3 id="配置本地仓库" tabindex="-1">配置本地仓库 <a class="header-anchor" href="#配置本地仓库" aria-label="Permalink to &quot;配置本地仓库&quot;">​</a></h3><h4 id="将软件文件夹中的repository解压" tabindex="-1">将软件文件夹中的repository解压 <a class="header-anchor" href="#将软件文件夹中的repository解压" aria-label="Permalink to &quot;将软件文件夹中的repository解压&quot;">​</a></h4><p><img src="'+u+'" alt="image-20230917163759949"></p><h4 id="配置本地仓库-1" tabindex="-1">配置本地仓库 <a class="header-anchor" href="#配置本地仓库-1" aria-label="Permalink to &quot;配置本地仓库&quot;">​</a></h4><p>在maven的安装目录中conf/ settings.xml文件，在这里配置本地仓库</p><p><img src="'+h+`" alt="image-20230917163806073"></p><ul><li>示例代码</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">settings</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">xmlns:xsi</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">xsi:schemaLocation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- localRepository</span></span>
<span class="line"><span style="color:#6A737D;">   | The path to the local repository maven will use to store artifacts.</span></span>
<span class="line"><span style="color:#6A737D;">   |</span></span>
<span class="line"><span style="color:#6A737D;">   | Default: \${user.home}/.m2/repository</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">localRepository</span><span style="color:#E1E4E8;">&gt;E:/source/04_Maven/repository_pinyougou&lt;/</span><span style="color:#85E89D;">localRepository</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">settings</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">xmlns:xsi</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">xsi:schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- localRepository</span></span>
<span class="line"><span style="color:#6A737D;">   | The path to the local repository maven will use to store artifacts.</span></span>
<span class="line"><span style="color:#6A737D;">   |</span></span>
<span class="line"><span style="color:#6A737D;">   | Default: \${user.home}/.m2/repository</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  --&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">localRepository</span><span style="color:#24292E;">&gt;E:/source/04_Maven/repository_pinyougou&lt;/</span><span style="color:#22863A;">localRepository</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="测试maven安装成功" tabindex="-1">测试Maven安装成功 <a class="header-anchor" href="#测试maven安装成功" aria-label="Permalink to &quot;测试Maven安装成功&quot;">​</a></h3><p>打开cmd本地控制台，输入mvn -version</p><p><img src="`+v+`" alt="image-20230917165008699"></p><h3 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ol><li>注意事项 <ul><li><code>Maven安装包</code> 和<code>仓库</code> 都需要解压到一个==没有中文和空格==的目录下(建议解压到不同的目录)</li><li>配置 <ul><li>MAVEN_HOME 配置到Maven的解压目录</li><li>Path 配置到bin目录</li></ul></li><li>在<code>apache-maven-3.3.9\\conf\\settings.xml</code>配置本地仓库</li></ul></li></ol><h3 id="项目中配置镜像仓库" tabindex="-1">项目中配置镜像仓库 <a class="header-anchor" href="#项目中配置镜像仓库" aria-label="Permalink to &quot;项目中配置镜像仓库&quot;">​</a></h3><blockquote><p>我们是可以在自己的项目中配置镜像仓库的</p></blockquote><p>配置我们自己的远程仓库有很多好处，比如你有一个局域网的远程仓库，使用该仓库能大大提高下载速度，继而提高构建速度，也有可能你依赖的一个 jar 在 central 中找不到，它只存在于某个特定的公共仓库，这样你也不得不添加那个远程仓库的配置。</p><blockquote><p>我们可以在项目的 pom.xml 文件中配置远程仓库。比如下面配置远程仓库指向阿里云仓库</p></blockquote><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">project</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">xmlns:xsi</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">xsi:schemaLocation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">modelVersion</span><span style="color:#E1E4E8;">&gt;4.0.0&lt;/</span><span style="color:#85E89D;">modelVersion</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.heima&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;maven_project&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">repositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;maven-ali&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://maven.aliyun.com/nexus/content/repositories/central&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">releases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">releases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">snapshots</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">updatePolicy</span><span style="color:#E1E4E8;">&gt;always&lt;/</span><span style="color:#85E89D;">updatePolicy</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">checksumPolicy</span><span style="color:#E1E4E8;">&gt;fail&lt;/</span><span style="color:#85E89D;">checksumPolicy</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">snapshots</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">repositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">project</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">project</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">xmlns:xsi</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">xsi:schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">modelVersion</span><span style="color:#24292E;">&gt;4.0.0&lt;/</span><span style="color:#22863A;">modelVersion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.heima&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;maven_project&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.0-SNAPSHOT&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">repositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;maven-ali&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://maven.aliyun.com/nexus/content/repositories/central&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">releases</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">releases</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">snapshots</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">updatePolicy</span><span style="color:#24292E;">&gt;always&lt;/</span><span style="color:#22863A;">updatePolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">checksumPolicy</span><span style="color:#24292E;">&gt;fail&lt;/</span><span style="color:#22863A;">checksumPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">snapshots</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">repositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">project</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><code>&lt;repositories&gt;</code>下面可以添加多个<code>&lt;repository&gt;</code>，每个<code>&lt;repository&gt;</code>都有它唯一的ID，一个描述性的name，以及最重要的远程仓库的url。</p><p><code>&lt;releases&gt;&lt;enabled&gt;</code>true<code>&lt;/enabled&gt;&lt;/releases&gt;</code>告诉Maven可以从这个仓库下载 releases 版本的构件，而<code>&lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;</code> 告诉Maven不要从这个仓库下载 snapshot 版本的构件，禁止从公共仓库下载snapshot构件是推荐的做法，因为这些构件不稳定，且不受你控制，你应该避免使用，当然，如果你想使用局域网内组织内部的仓库，你可以激活snapshot的支持。</p><h3 id="settings-xml配置镜像仓库" tabindex="-1">settings.xml配置镜像仓库 <a class="header-anchor" href="#settings-xml配置镜像仓库" aria-label="Permalink to &quot;settings.xml配置镜像仓库&quot;">​</a></h3><blockquote><p>在项目的 pom.xml 文件中可以配置中央仓库，但是这样每个项目都需要配置一遍，需要重复工作</p></blockquote><p>我们可以直接在 maven 安装目录下的 conf/settings.xml 文件中配置中央仓库。</p><blockquote><p>找到 mirrors 标签，添加如下配置</p></blockquote><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mirrors</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- mirror</span></span>
<span class="line"><span style="color:#6A737D;">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span>
<span class="line"><span style="color:#6A737D;">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span>
<span class="line"><span style="color:#6A737D;">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span>
<span class="line"><span style="color:#6A737D;">     |</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;mirror&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;/mirror&gt;</span></span>
<span class="line"><span style="color:#6A737D;">     --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;alimaven&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;aliyun maven&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;central&lt;/</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mirrors</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mirrors</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- mirror</span></span>
<span class="line"><span style="color:#6A737D;">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span>
<span class="line"><span style="color:#6A737D;">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span>
<span class="line"><span style="color:#6A737D;">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span>
<span class="line"><span style="color:#6A737D;">     |</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;mirror&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span>
<span class="line"><span style="color:#6A737D;">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;/mirror&gt;</span></span>
<span class="line"><span style="color:#6A737D;">     --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;alimaven&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;aliyun maven&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;central&lt;/</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mirrors</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>可以看到 <code>&lt;mirrorOf&gt;</code> 的值是 central，意思就是用以上镜像替代 Maven 自带的中央仓库</p></blockquote><h2 id="idea集成maven-很重要" tabindex="-1">IDEA集成Maven(很重要) <a class="header-anchor" href="#idea集成maven-很重要" aria-label="Permalink to &quot;IDEA集成Maven(很重要)&quot;">​</a></h2><h3 id="maven在idea中配置" tabindex="-1">maven在idea中配置 <a class="header-anchor" href="#maven在idea中配置" aria-label="Permalink to &quot;maven在idea中配置&quot;">​</a></h3><ul><li>配置Maven</li></ul><p><img src="`+b+'" alt="image-20230917165131230"></p><p>配置默认Maven环境 目的: 为了下次创建的时候 不需要再选择Maven了, 使用的就是这个默认环境的</p><ul><li>配置参数(解决创建慢的问题) -DarchetypeCatalog=internal</li></ul><p><img src="'+f+`" alt="image-20230917165137881"></p><ul><li>然后新创建project，一定不要使用原来的project，要求各位第一次使用maven创建项目的时候，一定要联网</li></ul><h3 id="maven工程目录结构" tabindex="-1">maven工程目录结构 <a class="header-anchor" href="#maven工程目录结构" aria-label="Permalink to &quot;maven工程目录结构&quot;">​</a></h3><blockquote><p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构，一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">MavenProject</span></span>
<span class="line"><span style="color:#e1e4e8;">        |-- pom.xml   maven项目的配置文件。对项目中的所有jar包依赖进行统一管理</span></span>
<span class="line"><span style="color:#e1e4e8;">        |-- src</span></span>
<span class="line"><span style="color:#e1e4e8;">            |-- main</span></span>
<span class="line"><span style="color:#e1e4e8;">                 | -- java  存放项目源代码</span></span>
<span class="line"><span style="color:#e1e4e8;">                 | -- resources（可省略）  存放项目配置文件 .xml等 </span></span>
<span class="line"><span style="color:#e1e4e8;">            |-- test（可省略）</span></span>
<span class="line"><span style="color:#e1e4e8;">                 | -- java  存放单元测试源代码</span></span>
<span class="line"><span style="color:#e1e4e8;">                 | -- resources   存放单元测试资源文件 .xml等</span></span>
<span class="line"><span style="color:#e1e4e8;">        |-- target（由maven生成）  存放所有编译、打包生成的文件</span></span>
<span class="line"><span style="color:#e1e4e8;">            |-- classes  存放项目源代码编译输出的字节码文件</span></span>
<span class="line"><span style="color:#e1e4e8;">            |-- test-classes  存放测试代码编译输出的字节码文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">MavenProject</span></span>
<span class="line"><span style="color:#24292e;">        |-- pom.xml   maven项目的配置文件。对项目中的所有jar包依赖进行统一管理</span></span>
<span class="line"><span style="color:#24292e;">        |-- src</span></span>
<span class="line"><span style="color:#24292e;">            |-- main</span></span>
<span class="line"><span style="color:#24292e;">                 | -- java  存放项目源代码</span></span>
<span class="line"><span style="color:#24292e;">                 | -- resources（可省略）  存放项目配置文件 .xml等 </span></span>
<span class="line"><span style="color:#24292e;">            |-- test（可省略）</span></span>
<span class="line"><span style="color:#24292e;">                 | -- java  存放单元测试源代码</span></span>
<span class="line"><span style="color:#24292e;">                 | -- resources   存放单元测试资源文件 .xml等</span></span>
<span class="line"><span style="color:#24292e;">        |-- target（由maven生成）  存放所有编译、打包生成的文件</span></span>
<span class="line"><span style="color:#24292e;">            |-- classes  存放项目源代码编译输出的字节码文件</span></span>
<span class="line"><span style="color:#24292e;">            |-- test-classes  存放测试代码编译输出的字节码文件</span></span></code></pre></div><pre><code>   默认情况下，项目在编译过后，会将 \`src/main/java\`编译过后的字节码文件和 \`src/main/resource\` 中的文件放在\`target/classes\`目录下。

   但是，\`src/main/java\` 目录下的非包且非java的文件在编译过后并不会自动被拷贝在 \`target/classes\` 目录下，而是会丢失。

   如果我们想要将 \`src/main/java\` 目录下的非包且非java的文件也一并拷贝在\`target/classes\` 目录下，则需要在 pom.xml 文件的 build 标签下进行配置。
</code></pre><h2 id="idea创建maven工程" tabindex="-1">IDEA创建Maven工程 <a class="header-anchor" href="#idea创建maven工程" aria-label="Permalink to &quot;IDEA创建Maven工程&quot;">​</a></h2><h3 id="创建javase工程" tabindex="-1">创建javase工程 <a class="header-anchor" href="#创建javase工程" aria-label="Permalink to &quot;创建javase工程&quot;">​</a></h3><h4 id="创建java工程" tabindex="-1">创建java工程 <a class="header-anchor" href="#创建java工程" aria-label="Permalink to &quot;创建java工程&quot;">​</a></h4><p><img src="`+k+'" alt="image-20230917165150888"></p><p><img src="'+j+'" alt="image-20230917165155380"></p><p><img src="'+x+'" alt="image-20230917165205360"></p><p><img src="'+A+'" alt="image-20230917165209507"></p><h4 id="java工程目录结构" tabindex="-1">java工程目录结构 <a class="header-anchor" href="#java工程目录结构" aria-label="Permalink to &quot;java工程目录结构&quot;">​</a></h4><ul><li>需要main/java文件夹变成 源码的目录(存放java源码)</li></ul><p><img src="'+D+'" alt="image-20230917165224205"></p><ul><li>需要test/java文件夹变成 测试源码的目录(存放单元测试)</li></ul><p><img src="'+q+'" alt="image-20230917165230097"></p><ul><li><p>创建resources目录, 变成资源的目录</p><p><img src="'+I+'" alt="image-20230917165234264"></p></li><li><p>整体结构</p><p><img src="'+M+'" alt="image-20230917165239875"></p></li></ul><h4 id="编写hello-world" tabindex="-1">编写Hello World！ <a class="header-anchor" href="#编写hello-world" aria-label="Permalink to &quot;编写Hello World！&quot;">​</a></h4><p><img src="'+P+'" alt="image-20230917165246673"></p><p><img src="'+_+'" alt="image-20230917165251072"></p><h4 id="小结-2" tabindex="-1">小结 <a class="header-anchor" href="#小结-2" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ol><li>JavaSe工程的骨架</li></ol><p><img src="'+C+'" alt="image-20230917165258729"></p><ol start="2"><li>项目的结构</li></ol><p><img src="'+S+'" alt="image-20230917165302519"></p><h3 id="创建javaweb工程" tabindex="-1">创建javaweb工程 <a class="header-anchor" href="#创建javaweb工程" aria-label="Permalink to &quot;创建javaweb工程&quot;">​</a></h3><h4 id="创建javaweb工程-1" tabindex="-1">创建javaweb工程 <a class="header-anchor" href="#创建javaweb工程-1" aria-label="Permalink to &quot;创建javaweb工程&quot;">​</a></h4><ul><li>创建javaweb工程与创建javase工程类似，但在选择Maven骨架时，选择maven-archetype-webapp即可：</li></ul><p><img src="'+w+'" alt="image-20230917165328243"></p><ul><li>创建好的javaweb工程如下：</li></ul><p><img src="'+O+'" alt="image-20230917165343821"></p><ul><li>所以，要手动创建一个java目录用于编写java代码：</li></ul><p><img src="'+R+'" alt="image-20230917165348494"></p><ul><li>还要将java目录添加为Source Root：</li></ul><p><img src="'+L+'" alt="image-20230917165354547"></p><h4 id="发布javaweb工程" tabindex="-1">发布javaweb工程 <a class="header-anchor" href="#发布javaweb工程" aria-label="Permalink to &quot;发布javaweb工程&quot;">​</a></h4><p><img src="'+F+'" alt="image-20230917165400107"></p><h4 id="浏览器访问效果" tabindex="-1">浏览器访问效果 <a class="header-anchor" href="#浏览器访问效果" aria-label="Permalink to &quot;浏览器访问效果&quot;">​</a></h4><p><img src="'+B+'" alt="image-20230917165404996"></p><h4 id="target目录" tabindex="-1">target目录 <a class="header-anchor" href="#target目录" aria-label="Permalink to &quot;target目录&quot;">​</a></h4><p><img src="'+T+'" alt="image-20220708033039215"></p><h4 id="小结-3" tabindex="-1">小结 <a class="header-anchor" href="#小结-3" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ol><li>选择骨架选择webapp</li></ol><p><img src="'+N+'" alt="image-20191224105135578"></p><ol start="2"><li>pom.xml</li></ol><p><img src="'+J+'" alt="image-20191224105159688"></p><ol start="3"><li>web工程结构</li></ol><p><img src="'+H+'" alt="image-20191224105359670"></p><p><img src="'+V+'" alt="image-20220708032800465"></p><h3 id="不使用骨架创建工程" tabindex="-1">不使用骨架创建工程 <a class="header-anchor" href="#不使用骨架创建工程" aria-label="Permalink to &quot;不使用骨架创建工程&quot;">​</a></h3><h4 id="不使用骨架创建javase项目" tabindex="-1">不使用骨架创建javase项目 <a class="header-anchor" href="#不使用骨架创建javase项目" aria-label="Permalink to &quot;不使用骨架创建javase项目&quot;">​</a></h4><ul><li>第一步</li></ul><p><img src="'+$+'" alt="image-20230917165428212"></p><ul><li>第二步</li></ul><p><img src="'+U+'" alt="image-20230917165433082"></p><ul><li>第三步</li></ul><p><img src="'+W+'" alt="image-20230917165437380"></p><ul><li>第四步</li></ul><p><img src="'+Y+'" alt="image-20230917165442221"></p><h4 id="不使用骨架创建javaweb项目" tabindex="-1">不使用骨架创建javaweb项目 <a class="header-anchor" href="#不使用骨架创建javaweb项目" aria-label="Permalink to &quot;不使用骨架创建javaweb项目&quot;">​</a></h4><ul><li>安装一个插件(JBLJavaToWeb)</li></ul><ul><li>第一步</li></ul><p><img src="'+G+'" alt="image-20230917165447201"></p><ul><li>第二步</li></ul><p><img src="'+X+'" alt="image-20230917170944047"></p><ul><li>第三步</li></ul><p><img src="'+K+'" alt="image-20230917170951224"></p><ul><li>第四步</li></ul><p><img src="'+Z+'" alt="image-20230917170955706"></p><h4 id="小结-4" tabindex="-1">小结 <a class="header-anchor" href="#小结-4" aria-label="Permalink to &quot;小结&quot;">​</a></h4><p>我们可以使用JBLJavaToWeb插件，轻松地将没有使用骨架创建的java项目转换成javaweb项目</p><p><img src="'+z+'" alt="image-20220708032917810"></p><h2 id="maven常用命令" tabindex="-1">Maven常用命令 <a class="header-anchor" href="#maven常用命令" aria-label="Permalink to &quot;Maven常用命令&quot;">​</a></h2><p>Maven的常用命令管理项目的生命周期</p><h3 id="clean命令" tabindex="-1">clean命令 <a class="header-anchor" href="#clean命令" aria-label="Permalink to &quot;clean命令&quot;">​</a></h3><p><strong>清除编译产生的target文件夹内容</strong>，可以配合相应命令一起使用，如mvn clean package， mvn clean test</p><p><img src="'+Q+'" alt="image-20230917171013024"></p><p><img src="'+ss+'" alt="image-20230917171006970"></p><h3 id="compile命令" tabindex="-1">compile命令 <a class="header-anchor" href="#compile命令" aria-label="Permalink to &quot;compile命令&quot;">​</a></h3><p>该命令可以对src/main/java目录的下的代码进行编译</p><p><img src="'+as+'" alt="image-20230917171019732"></p><p><img src="'+ns+'" alt="image-20230917171024179"></p><h3 id="test命令" tabindex="-1">test命令 <a class="header-anchor" href="#test命令" aria-label="Permalink to &quot;test命令&quot;">​</a></h3><p><strong>测试命令,先将src/main/java以及src/test/java中的类都进行编译，然后再执行src/test/java/下所有junit的测试用例</strong></p><p><img src="'+ls+'" alt="image-20230917171031126"></p><ul><li>在src/test/java下创建测试类DemoTest</li></ul><p><img src="'+es+'" alt="image-20230917171034939"></p><ul><li>执行test命令测试</li></ul><p><img src="'+ps+'" alt="image-20230917171215741"></p><ul><li>控制台显示测试结果</li></ul><p><img src="'+ts+'" alt="image-20230917171220781"></p><h3 id="package命令" tabindex="-1">package命令 <a class="header-anchor" href="#package命令" aria-label="Permalink to &quot;package命令&quot;">​</a></h3><p>mvn package，打包项目</p><p>先编译，再执行测试，然后再打包(只会将main/java里面的代码打到包)</p><ul><li>如果是JavaSe的项目,打包成jar包</li><li>如果是JavaWeb的项目,打包成war包</li></ul><p><img src="'+os+'" alt="image-20230917171232490"></p><p><img src="'+rs+'" alt="image-20230917171235994"></p><p>打包后的项目会在target目录下找到</p><p><img src="'+cs+'" alt="image-20230917171240035"></p><h3 id="install命令" tabindex="-1">install命令 <a class="header-anchor" href="#install命令" aria-label="Permalink to &quot;install命令&quot;">​</a></h3><p>mvn install，打包后将其安装在本地仓库</p><p><img src="'+is+'" alt="image-20230917171246698"></p><p><img src="'+gs+'" alt="image-20230917171249920"></p><p>安装完毕后，在本地仓库中可以找到itheima_javase_demo的信息</p><p><img src="'+ys+`" alt="image-20230917171253868"></p><h3 id="小结-5" tabindex="-1">小结 <a class="header-anchor" href="#小结-5" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ol><li><p>命令作用</p><ul><li>clean 用来清除编译后的文件(target文件夹里面的)<strong>【一般清缓存】</strong></li><li>compile 编译只会编译main里面的内容</li><li>test 执行单元测试，先将main、test中的内容进行编译，然后执行test中的测试方法</li><li>package 打包 (<strong>javaSe--&gt;jar, javaweb--&gt;war</strong>)，其实执行打包之前先执行test，然后对项目进行打包</li><li>install 把项目打包之后<strong>安装到本地仓库</strong>，其实执行install之前先执行了打包，然后对项目进行安装到本地仓库</li></ul></li><li><p>生命周期</p><p>当我们执行了install 也会执行compile test package</p></li></ol><h2 id="maven依赖管理-引入依赖" tabindex="-1">Maven依赖管理(引入依赖) <a class="header-anchor" href="#maven依赖管理-引入依赖" aria-label="Permalink to &quot;Maven依赖管理(引入依赖)&quot;">​</a></h2><h3 id="导入依赖" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖" aria-label="Permalink to &quot;导入依赖&quot;">​</a></h3><p>导入依赖坐标，无需手动导入jar包就可以引入jar。在pom.xml中使用<code>&lt;dependency&gt;</code>标签引入依赖。</p><p>做项目/工作里面 都有整套的依赖的, 不需要背诵的.</p><p>去Maven官网找, 赋值,粘贴. <code>http://mvnrepository.com/</code></p><h3 id="导入junit的依赖" tabindex="-1">导入junit的依赖 <a class="header-anchor" href="#导入junit的依赖" aria-label="Permalink to &quot;导入junit的依赖&quot;">​</a></h3><ul><li>导入junit坐标依赖</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.12&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.12&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>进行单元测试</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test running...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test running...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="导入servlet的依赖" tabindex="-1">导入servlet的依赖 <a class="header-anchor" href="#导入servlet的依赖" aria-label="Permalink to &quot;导入servlet的依赖&quot;">​</a></h3><ul><li>创建Servlet，但是发现报错，原因是没有导入Servlet的坐标依赖</li></ul><p><img src="`+ds+`" alt="image-20230917171301741"></p><ul><li>导入Servlet的坐标依赖</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;javax.servlet&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;javax.servlet-api&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;3.1.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;provided&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;javax.servlet&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;javax.servlet-api&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;3.1.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;provided&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>原有报错的Servlet恢复正常</li></ul><p><img src="`+Es+'" alt="image-20230917171306798"></p><h3 id="依赖范围" tabindex="-1">依赖范围 <a class="header-anchor" href="#依赖范围" aria-label="Permalink to &quot;依赖范围&quot;">​</a></h3><p><img src="'+ms+`" alt="image-20230917171310809"></p><ul><li><p>compile 编译、测试、运行，A在编译时依赖B，并且在测试和运行时也依赖</p><p>例如：strus-core、spring-beans, C3P0,Druid。打到war包或jar包</p></li><li><p><strong>provided 编译、和测试有效</strong>，A在编译和测试时需要B</p><p>例如：servlet-api就是编译和测试有用，在运行时不用（tomcat容器已提供）</p><p>不会打到war</p></li><li><p>runtime：测试运行有效,</p><p>例如：jdbc驱动包 ，在开发代码中针对java的jdbc接口开发，编译不用</p><p>在运行和测试时需要通过jdbc驱动包（mysql驱动）连接数据库，需要的</p><p>会打到war</p></li><li><p>test：只是测试有效，只在单元测试类中用</p><p>例如：junit</p><p>不会打到war</p></li><li><p>按照依赖强度，由强到弱来排序：(理解)</p><p>compile&gt; provided&gt; runtime&gt; test</p></li></ul><h3 id="小结-6" tabindex="-1">小结 <a class="header-anchor" href="#小结-6" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ol><li><p>坐标不需要背, 做项目时候/工作开发 都有整套的坐标. 如果是导入一些特定, 可以查阅网站,直接拷贝</p></li><li><p>作用范围</p><ul><li>compile 编译、测试、打包运行部署 有效 【默认】</li><li><strong>provided 编译, 测试 有效. 打包运行部署 无效</strong></li><li>runtime 测试、打包运行部署 有效 编译无效</li><li>test 只是测试有效，只在单元测试类中用</li></ul></li><li><p>Servlet,JSP 这类jar 需要加上provided , 因为部署到Tomcat里面. tomcat里面有, 如果没有加上provided , 可能会导致jar 冲突</p><p>单元测试的 建议加上test</p></li></ol><h2 id="maven插件-了解" tabindex="-1">Maven插件(了解) <a class="header-anchor" href="#maven插件-了解" aria-label="Permalink to &quot;Maven插件(了解)&quot;">​</a></h2><p>Maven是一个核心引擎，提供了基本的项目处理能力和建设过程的管理，以及一系列的插件是用来执行实际建设任务。maven插件可以完成一些特定的功能。例如，集成jdk插件可以方便的修改项目的编译环境；集成tomcat插件后，无需安装tomcat服务器就可以运行tomcat进行项目的发布与测试。在pom.xml中通过plugin标签引入maven的功能插件。</p><h3 id="jdk编译版本的插件【了解】" tabindex="-1">JDK编译版本的插件【了解】 <a class="header-anchor" href="#jdk编译版本的插件【了解】" aria-label="Permalink to &quot;JDK编译版本的插件【了解】&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--jdk编译插件--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;maven-compiler-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;3.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;">&gt;1.8&lt;/</span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">target</span><span style="color:#E1E4E8;">&gt;1.8&lt;/</span><span style="color:#85E89D;">target</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">encoding</span><span style="color:#E1E4E8;">&gt;utf-8&lt;/</span><span style="color:#85E89D;">encoding</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--jdk编译插件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;maven-compiler-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;3.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">source</span><span style="color:#24292E;">&gt;1.8&lt;/</span><span style="color:#22863A;">source</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">target</span><span style="color:#24292E;">&gt;1.8&lt;/</span><span style="color:#22863A;">target</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoding</span><span style="color:#24292E;">&gt;utf-8&lt;/</span><span style="color:#22863A;">encoding</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="tomcat7服务端的插件-部署项目" tabindex="-1">Tomcat7服务端的插件(部署项目) <a class="header-anchor" href="#tomcat7服务端的插件-部署项目" aria-label="Permalink to &quot;Tomcat7服务端的插件(部署项目)&quot;">​</a></h3><ul><li>添加tomcat7插件</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.tomcat.maven&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;tomcat7-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 指定端口 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">&gt;82&lt;/</span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 请求路径 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;/&lt;/</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.tomcat.maven&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;tomcat7-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 指定端口 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">port</span><span style="color:#24292E;">&gt;82&lt;/</span><span style="color:#22863A;">port</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 请求路径 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;/&lt;/</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>注意: Maven的中央仓库中只有Tomcat7.X版本的插件，而之前我们使用的是8.X的版本，如果想使Tomcat8.X的插件可以去其他第三方仓库进行寻找，或者使用IDEA集成外部Tomcat8极其以上版本，进行项目的发布。</p></blockquote><h3 id="小结-7" tabindex="-1">小结 <a class="header-anchor" href="#小结-7" aria-label="Permalink to &quot;小结&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">           &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">           &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">           &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="maven配置修改" tabindex="-1">maven配置修改 <a class="header-anchor" href="#maven配置修改" aria-label="Permalink to &quot;maven配置修改&quot;">​</a></h2><h3 id="修改不使用骨架创建maven项目的默认编译版本" tabindex="-1">修改不使用骨架创建maven项目的默认编译版本 <a class="header-anchor" href="#修改不使用骨架创建maven项目的默认编译版本" aria-label="Permalink to &quot;修改不使用骨架创建maven项目的默认编译版本&quot;">​</a></h3><ol><li><p>不使用骨架创建的maven项目的默认编译版本是1.5或者1.4版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;profile&gt;   </span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;id&gt;jdk1.8&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;activation&gt;   </span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;jdk&gt;1.8&lt;/jdk&gt;   </span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/activation&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;properties&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/properties&gt;   </span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/profile&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">将上述标签内容添加到settings文件的&lt;profiles&gt;标签中</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;profile&gt;   </span></span>
<span class="line"><span style="color:#24292e;">        &lt;id&gt;jdk1.8&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;activation&gt;   </span></span>
<span class="line"><span style="color:#24292e;">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;jdk&gt;1.8&lt;/jdk&gt;   </span></span>
<span class="line"><span style="color:#24292e;">        &lt;/activation&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;properties&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/properties&gt;   </span></span>
<span class="line"><span style="color:#24292e;">&lt;/profile&gt;</span></span>
<span class="line"><span style="color:#24292e;">将上述标签内容添加到settings文件的&lt;profiles&gt;标签中</span></span></code></pre></div></li></ol><h3 id="彻底解决引入依赖的时候卡、报错" tabindex="-1">彻底解决引入依赖的时候卡、报错 <a class="header-anchor" href="#彻底解决引入依赖的时候卡、报错" aria-label="Permalink to &quot;彻底解决引入依赖的时候卡、报错&quot;">​</a></h3><p>修改settings.xml文件，添加如下代码</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mirrors</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;alimaven&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;aliyun maven&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;central&lt;/</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;uk&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;central&lt;/</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;Human Readable Name for this Mirror.&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://uk.maven.org/maven2/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;CN&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;OSChina Central&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://maven.oschina.net/content/groups/public/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;central&lt;/</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;nexus&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;internal nexus repository&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://repo.maven.apache.org/maven2&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;central&lt;/</span><span style="color:#85E89D;">mirrorOf</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">mirror</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">mirrors</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mirrors</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;alimaven&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;aliyun maven&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;central&lt;/</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;uk&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;central&lt;/</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;Human Readable Name for this Mirror.&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://uk.maven.org/maven2/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;CN&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;OSChina Central&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://maven.oschina.net/content/groups/public/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;central&lt;/</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;nexus&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;internal nexus repository&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://repo.maven.apache.org/maven2&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;central&lt;/</span><span style="color:#22863A;">mirrorOf</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">mirror</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">mirrors</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h3><ol><li>引入依赖之后，要检查依赖是否引入成功</li></ol><p><img src="`+us+'" alt="image-20230917171716634"></p><ol start="2"><li><p>如果dependencies中大块报红</p><ol><li>先使用cleanLastUpdated文件，进行清理。清完之后刷新</li><li>检查自己的maven配置是否正确</li></ol><p><img src="'+hs+'" alt="image-20230917171721680"></p><ol start="3"><li>检查settings.xml中的本地仓库路径配置是否正确</li></ol><p><img src="'+vs+'" alt="image-20230917171731555"></p><ol start="4"><li>将所有的依赖删除，接着一个一个依赖添加，添加一个就刷新一下，看是否添加成功，如果发现了哪个依赖报错，很有可能是因为你的本地仓库中没有该版本，所以我们可以尝试切换版本</li></ol></li></ol><h2 id="maven私服【了解】" tabindex="-1">maven私服【了解】 <a class="header-anchor" href="#maven私服【了解】" aria-label="Permalink to &quot;maven私服【了解】&quot;">​</a></h2><h3 id="私服概述" tabindex="-1">私服概述 <a class="header-anchor" href="#私服概述" aria-label="Permalink to &quot;私服概述&quot;">​</a></h3><p><strong>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服</strong>， 私服服务器即是公司内部的 maven 远程仓库， 每个员工的电脑上安装 maven 软件并且连接私服服务器，员工将自己开发的项目打成 jar 并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。私服还充当一个代理服务器，当私服上没有 jar 包会从互联网中央仓库自动下载，如下 图 :</p><p><img src="'+bs+'" alt="image-20230917171736830"></p><blockquote><p>私服也属于远程仓库的一种，一般来说，私服仓库搭建在公司局域网内，专供公司内部开发人员提供服务，不是对外使用的</p></blockquote><p>一般Maven下载jar包的步骤是：<code>本地仓库（本机）---&gt;私服（局域网）---&gt;中心仓库（外部网络）</code></p><h3 id="私服搭建" tabindex="-1">私服搭建 <a class="header-anchor" href="#私服搭建" aria-label="Permalink to &quot;私服搭建&quot;">​</a></h3><h4 id="下载-nexus" tabindex="-1">下载 nexus <a class="header-anchor" href="#下载-nexus" aria-label="Permalink to &quot;下载 nexus&quot;">​</a></h4><p>Nexus 是 Maven 仓库管理器， 通过 nexus 可以搭建 maven 仓库，同时 nexus 还提供强大的仓库管理功能，构件搜索功能等。 下载地址： <a href="http://www.sonatype.org/nexus/archived/" target="_blank" rel="noreferrer">http://www.sonatype.org/nexus/archived/</a></p><p>下载： nexus-2.12.0-01-bundle.zip</p><p><img src="'+fs+'" alt="image-20230917171838275"></p><h4 id="安装-nexus" tabindex="-1">安装 nexus <a class="header-anchor" href="#安装-nexus" aria-label="Permalink to &quot;安装 nexus&quot;">​</a></h4><p>解压 nexus-2.12.0-01-bundle.zip，进入 bin 目录：</p><p><img src="'+ks+'" alt="image-20230917171842690"></p><p>以管理员权限运行命令行,进入 bin 目录，执行 nexus.bat install</p><p><img src="'+js+'" alt="image-20230917171846939"></p><p>安装成功在服务中查看有 nexus 服务：</p><p><img src="'+xs+'" alt="image-20230917171850718"></p><h4 id="卸载nexus" tabindex="-1">卸载nexus <a class="header-anchor" href="#卸载nexus" aria-label="Permalink to &quot;卸载nexus&quot;">​</a></h4><p>cmd 进入 nexus 的 bin 目录，执行： nexus.bat uninstall</p><p><img src="'+As+'" alt="image-20230917171854949"></p><h4 id="启动-nexus" tabindex="-1">启动 nexus <a class="header-anchor" href="#启动-nexus" aria-label="Permalink to &quot;启动 nexus&quot;">​</a></h4><ul><li><p>方式一</p><p>cmd 进入 bin 目录，执行 nexus.bat start</p></li><li><p>方式二</p><p>直接启动 nexus 服务</p><p><img src="'+Ds+'" alt="image-20230917171900392"></p></li></ul><p>登录</p><ul><li><p>访问: <code>http://localhost:8081/nexus/</code></p><blockquote><p>查看 nexus 的配置文件 conf/nexus.properties ,里面有端口号</p></blockquote></li></ul><p><img src="'+qs+'" alt="image-20230917171906111"></p><ul><li>点击右上角的 Log in，输入账号和密码 登陆 (账号admin,密码admin123 )</li></ul><p><img src="'+Is+'" alt="image-20230917171911308"></p><ul><li>登录成功</li></ul><p><img src="'+Ms+'" alt="image-20230917171915945"></p><h4 id="仓库类型" tabindex="-1">仓库类型 <a class="header-anchor" href="#仓库类型" aria-label="Permalink to &quot;仓库类型&quot;">​</a></h4><p><img src="'+Ps+'" alt="image-20230917171919860"></p><p><img src="'+_s+'" alt="image-20230917171924615"></p><p><img src="'+Cs+'" alt="image-20230917171929705"></p><p>nexus 的仓库有 4 种类型：</p><p><img src="'+Ss+`" alt="image-20230917171933551"></p><ol><li>hosted，宿主仓库， 部署自己的 jar 到这个类型的仓库，包括 releases 和 snapshot 两部分， Releases 公司内部发布版本仓库、 Snapshots 公司内部测试版本仓库</li><li>proxy，代理仓库， 用于代理远程的公共仓库，如 maven 中央仓库，用户连接私服，私服自动去中央仓库下载 jar 包或者插件。</li><li>group，仓库组，用来合并多个 hosted/proxy 仓库，通常我们配置自己的 maven 连接仓库组。</li><li>virtual(虚拟)：兼容 Maven1 版本的 jar 或者插件</li></ol><h4 id="小结-8" tabindex="-1">小结 <a class="header-anchor" href="#小结-8" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ol><li><p>对着文档搭建一下就OK</p></li><li><p>安装的时候需要以<code>管理员</code> 身份</p></li><li><p>路径不要有中文</p></li></ol><h3 id="私服使用" tabindex="-1">私服使用 <a class="header-anchor" href="#私服使用" aria-label="Permalink to &quot;私服使用&quot;">​</a></h3><h4 id="将项目发布到私服" tabindex="-1">将项目发布到私服 <a class="header-anchor" href="#将项目发布到私服" aria-label="Permalink to &quot;将项目发布到私服&quot;">​</a></h4><h5 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h5><p>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队或模块开发人员使用。 本例子假设多团队分别开发 . 某个团队开发完在common_utils, 将 common_utils发布到私服供 其它团队使用.</p><h5 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h5><p>第一步： 需要在客户端即部署common_utils工程的电脑上配置 maven环境，并修改 settings.xml文件(Maven配置文件)， 配置连接私服的用户和密码 。此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和密码一致 (配置到<code>&lt;servers&gt;</code>标签下)</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;releases&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">&gt;admin&lt;/</span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">&gt;admin123&lt;/</span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;snapshots&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">&gt;admin&lt;/</span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">&gt;admin123&lt;/</span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">server</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;releases&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">username</span><span style="color:#24292E;">&gt;admin&lt;/</span><span style="color:#22863A;">username</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;admin123&lt;/</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">server</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">server</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;snapshots&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">username</span><span style="color:#24292E;">&gt;admin&lt;/</span><span style="color:#22863A;">username</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;admin123&lt;/</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">server</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>releases: 连接发布版本项目仓库 snapshots: 连接测试版本项目仓库</p><p><img src="`+ws+`" alt="image-20230917171940089"></p><p>第二步： 在需要发布配置项目 pom.xml . 配置私服仓库的地址，本公司的自己的 jar 包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为 release 则上传到私服的 release 仓库，如果版本为snapshot 则上传到私服的 snapshot 仓库 .</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">distributionManagement</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;releases&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://localhost:8081/nexus/content/repositories/releases/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">snapshotRepository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;snapshots&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://localhost:8081/nexus/content/repositories/snapshots/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">snapshotRepository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">distributionManagement</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">distributionManagement</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;releases&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://localhost:8081/nexus/content/repositories/releases/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">snapshotRepository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;snapshots&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://localhost:8081/nexus/content/repositories/snapshots/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">snapshotRepository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">distributionManagement</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>注意： pom.xml 这里<code>&lt;id&gt;</code> 和 settings.xml 配置<code>&lt;id&gt;</code>对应！</li></ul><h5 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h5><p>1、 首先启动 nexus 2、 对 common_utils工程执行 deploy 命令</p><p>根据本项目pom.xml中version定义决定发布到哪个仓库，如果version定义为snapshot，执行 deploy后查看 nexus 的 snapshot仓库， 如果 version定义为 release则项目将发布到 nexus的 release 仓库，本项目将发布到 snapshot 仓库：</p><p><img src="`+Os+`" alt="image-20191222211914094"></p><h4 id="从私服下载-jar-包" tabindex="-1">从私服下载 jar 包 <a class="header-anchor" href="#从私服下载-jar-包" aria-label="Permalink to &quot;从私服下载 jar 包&quot;">​</a></h4><h5 id="需求-1" tabindex="-1">需求 <a class="header-anchor" href="#需求-1" aria-label="Permalink to &quot;需求&quot;">​</a></h5><p>没有配置 nexus 之前，如果本地仓库没有，去中央仓库下载，通常在企业中会在局域网内部署一台私服服务器， 有了私服本地项目首先去本地仓库找 jar，如果没有找到则连接私服从私服下载 jar 包，如果私服没有 jar 包私服同时作为代理服务器从中央仓库下载 jar 包，这样做的好处是一方面由私服对公司项目的依赖 jar 包统一管理，一方面提高下载速度， 项目连接私服下载 jar 包的速度要比项目连接中央仓库的速度快的多。</p><p>本例子测试从私服下载 commons-utils工程 jar 包。</p><h5 id="在-settings-xml-中配置仓库" tabindex="-1">在 settings.xml 中配置仓库 <a class="header-anchor" href="#在-settings-xml-中配置仓库" aria-label="Permalink to &quot;在 settings.xml 中配置仓库&quot;">​</a></h5><p>在客户端的 settings.xml 中配置私服的仓库，由于 setting.xml 中没有 repositories 的配置标签需要使用 profile 定义仓库。(<strong>配置在<code>&lt;profiles&gt;</code>标签下</strong>)</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">profile</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!--profile 的 id--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;dev&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">repositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!--仓库 id， repositories 可以配置多个仓库，保证 id 不重复--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;nexus&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!--仓库地址，即 nexus 仓库组的地址--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://localhost:8081/nexus/content/groups/public/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!--是否下载 releases 构件--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">releases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">releases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!--是否下载 snapshots 构件--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">snapshots</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">snapshots</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">repository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">repositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">pluginRepositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- 插件仓库， maven 的运行依赖插件，也需要从私服下载插件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pluginRepository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 插件仓库的 id 不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;public&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;Public Repositories&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;http://localhost:8081/nexus/content/groups/public/&lt;/</span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">pluginRepository</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">pluginRepositories</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">profile</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">profile</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--profile 的 id--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;dev&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">repositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--仓库 id， repositories 可以配置多个仓库，保证 id 不重复--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;nexus&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--仓库地址，即 nexus 仓库组的地址--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://localhost:8081/nexus/content/groups/public/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--是否下载 releases 构件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">releases</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">releases</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--是否下载 snapshots 构件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">snapshots</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">snapshots</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">repository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">repositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">pluginRepositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- 插件仓库， maven 的运行依赖插件，也需要从私服下载插件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pluginRepository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 插件仓库的 id 不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;public&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;Public Repositories&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;http://localhost:8081/nexus/content/groups/public/&lt;/</span><span style="color:#22863A;">url</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">pluginRepository</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">pluginRepositories</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">profile</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>使用 profile 定义仓库需要激活才可生效。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">activeProfiles</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">activeProfile</span><span style="color:#E1E4E8;">&gt;dev&lt;/</span><span style="color:#85E89D;">activeProfile</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">activeProfiles</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">activeProfiles</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">activeProfile</span><span style="color:#24292E;">&gt;dev&lt;/</span><span style="color:#22863A;">activeProfile</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">activeProfiles</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h5 id="测试从私服下载-jar-包" tabindex="-1">测试从私服下载 jar 包 <a class="header-anchor" href="#测试从私服下载-jar-包" aria-label="Permalink to &quot;测试从私服下载 jar 包&quot;">​</a></h5><ul><li><p>删掉本地仓库的day01_javase_02</p></li><li><p>编译依赖day01_javase_02的工程</p></li></ul><p><img src="`+Rs+'" alt="image-20191222212314528"></p><ul><li>出现如下日志</li></ul><p><img src="'+Ls+'" alt="image-20191222212255624"></p><h4 id="小结-9" tabindex="-1">小结 <a class="header-anchor" href="#小结-9" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ol><li>对着文档操作</li></ol><h2 id="maven安装jar" tabindex="-1">maven安装Jar <a class="header-anchor" href="#maven安装jar" aria-label="Permalink to &quot;maven安装Jar&quot;">​</a></h2><h3 id="把jar安装到本地仓库-掌握" tabindex="-1">把jar安装到本地仓库(掌握) <a class="header-anchor" href="#把jar安装到本地仓库-掌握" aria-label="Permalink to &quot;把jar安装到本地仓库(掌握)&quot;">​</a></h3><ul><li>随便找一个 jar 包测试， 可以先 CMD进入到 jar 包所在位置，运行</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mvn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install:install-file</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DgroupId=com.itheima</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DartifactId=nbutil</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dversion=1.1.37</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dfile=nbutil-1.1.37.jar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dpackaging=jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mvn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install:install-file</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DgroupId=com.itheima</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DartifactId=nbutil</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dversion=1.1.37</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dfile=nbutil-1.1.37.jar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dpackaging=jar</span></span></code></pre></div><p><img src="'+Fs+'" alt="image-20230917172054882"></p><p><img src="'+Bs+`" alt="image-20230917172059430"></p><h3 id="把jar安装到私服" tabindex="-1">把jar安装到私服 <a class="header-anchor" href="#把jar安装到私服" aria-label="Permalink to &quot;把jar安装到私服&quot;">​</a></h3><p>需要在 maven 软件的核心配置文件 settings.xml 中配置第三方仓库的 server 信息</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;thirdparty&lt;/</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">&gt;admin&lt;/</span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">&gt;admin123&lt;/</span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">server</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;thirdparty&lt;/</span><span style="color:#22863A;">id</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">username</span><span style="color:#24292E;">&gt;admin&lt;/</span><span style="color:#22863A;">username</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;admin123&lt;/</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">server</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>才能执行一下命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mvn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deploy:deploy-file</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DgroupId=com.itheima</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DartifactId=nbutil</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dversion=1.1.37</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dpackaging=jar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dfile=nbutil-1.1.37.jar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Durl=http://localhost:8081/nexus/content/repositories/thirdparty/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DrepositoryId=thirdparty</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mvn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy:deploy-file</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DgroupId=com.itheima</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DartifactId=nbutil</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dversion=1.1.37</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dpackaging=jar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dfile=nbutil-1.1.37.jar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Durl=http://localhost:8081/nexus/content/repositories/thirdparty/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DrepositoryId=thirdparty</span></span></code></pre></div><p><img src="`+Ts+'" alt="image-20230917172111669"></p><p><img src="'+Ns+`" alt="image-20230917172116531"></p><h4 id="参数说明" tabindex="-1">参数说明 <a class="header-anchor" href="#参数说明" aria-label="Permalink to &quot;参数说明&quot;">​</a></h4><p>DgroupId 和 DartifactId 构成了该 jar 包在 pom.xml 的坐标，项目就是依靠这两个属性定位。自己起名字也行。</p><p>Dfile 表示需要上传的 jar 包的绝对路径。</p><p>Durl 私服上仓库的位置，打开 nexus——&gt;repositories 菜单，可以看到该路径。</p><p>DrepositoryId 服务器的表示 id，在 nexus 的 configuration 可以看到。</p><p>Dversion 表示版本信息。</p><p>关于 jar 包准确的版本：</p><p>包的名字上一般会带版本号，如果没有那可以解压该包，会发现一个叫 MANIFEST.MF 的文件</p><p>这个文件就有描述该包的版本信息。</p><p>比如 Specification-Version: 2.2 可以知道该包的版本了。</p><p>上传成功后，在 nexus 界面点击 3rd party 仓库可以看到这包。</p><h4 id="小结-10" tabindex="-1">小结 <a class="header-anchor" href="#小结-10" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ol><li>有些jar中央仓库没有(eg:oracle驱动), 从官网/网络上下载下来, 安装到本地仓库. 我们的Maven项目就可以使用了</li><li>具体操作参考文档</li></ol><h3 id="cleanlastupdated-bat" tabindex="-1"><code>cleanLastUpdated.bat</code> <a class="header-anchor" href="#cleanlastupdated-bat" aria-label="Permalink to &quot;\`cleanLastUpdated.bat\`&quot;">​</a></h3><p>清理无效jar包脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">set REPOSITORY_PATH=C:\\maven\\apache-maven-3.5.2\\repository</span></span>
<span class="line"><span style="color:#e1e4e8;">rem 正在搜索...</span></span>
<span class="line"><span style="color:#e1e4e8;">for /f &quot;delims=&quot; %%i in (&#39;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&#39;) do (</span></span>
<span class="line"><span style="color:#e1e4e8;">    del /s /q %%i</span></span>
<span class="line"><span style="color:#e1e4e8;">)</span></span>
<span class="line"><span style="color:#e1e4e8;">rem 搜索完毕</span></span>
<span class="line"><span style="color:#e1e4e8;">pause</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">set REPOSITORY_PATH=C:\\maven\\apache-maven-3.5.2\\repository</span></span>
<span class="line"><span style="color:#24292e;">rem 正在搜索...</span></span>
<span class="line"><span style="color:#24292e;">for /f &quot;delims=&quot; %%i in (&#39;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&#39;) do (</span></span>
<span class="line"><span style="color:#24292e;">    del /s /q %%i</span></span>
<span class="line"><span style="color:#24292e;">)</span></span>
<span class="line"><span style="color:#24292e;">rem 搜索完毕</span></span>
<span class="line"><span style="color:#24292e;">pause</span></span></code></pre></div><h2 id="pom层次" tabindex="-1">Pom层次 <a class="header-anchor" href="#pom层次" aria-label="Permalink to &quot;Pom层次&quot;">​</a></h2><h3 id="pom文件简介" tabindex="-1">Pom文件简介 <a class="header-anchor" href="#pom文件简介" aria-label="Permalink to &quot;Pom文件简介&quot;">​</a></h3><pre><code>   而 pom.xml 主要描述了项目的基本信息，用于描述项目如何构建，声明项目依赖等等，是项目级别的配置文件，执行任务或目标时，Maven 会在当前目录中查找 POM，然后读取 POM，获取所需的配置信息，然后执行目标。

   pom（project object model）即项目对象模型，maven 把一个项目的结构和内容抽象成一个模型，在 xml 文件中进行声明，以方便进行构建和描述。
</code></pre><h3 id="super-pom" tabindex="-1">Super POM <a class="header-anchor" href="#super-pom" aria-label="Permalink to &quot;Super POM&quot;">​</a></h3><p>经过我们前面的学习，我们看到 Maven 在构建过程中有很多默认的设定。例如：源文件存放的目录、测试源文件存放的目录、构建输出的目录……等等。但是其实这些要素也都是被 Maven 定义过的。定义的位置就是：<strong>超级 POM</strong>。</p><p>关于超级 POM，Maven 官网是这样介绍的：</p><blockquote><p>The Super POM is Maven&#39;s default POM. All POMs extend the Super POM unless explicitly set, meaning the configuration specified in the Super POM is inherited by the POMs you created for your projects.</p><p>译文：Super POM 是 Maven 的默认 POM。除非明确设置，否则所有 POM 都扩展 Super POM，这意味着 Super POM 中指定的配置由您为项目创建的 POM 继承。</p></blockquote><p>所以我们自己的 POM 即使没有明确指定一个父工程（父 POM），其实也默认继承了超级 POM。就好比一个 Java 类默认继承了 Object 类。</p><p>这个POM文件可以在 <a href="https://maven.apache.org/ref/3.8.1/maven-model-builder/super-pom.html" target="_blank" rel="noreferrer">[Maven Super Pom](Maven Model Builder – Super POM)</a> 找到。</p><p>也可以在 本地这个路径找到 <code>$MAVEN_HOME/lib/maven-model-builder-3.8.1.jar!/org/apache/maven/model/pom-4.0.0.xml</code></p><p><strong>1. repositories</strong></p><p>定义了一个名叫 central的repository，value是 &#39;<a href="https://repo.maven.apache.org/maven2" target="_blank" rel="noreferrer">https://repo.maven.apache.org/maven2</a>&#39;，可以从这个地址拉下来dependency。</p><p><strong>2. pluginRepositories</strong></p><p>默认 plugin的 repositories</p><p><strong>3. build</strong></p><p>设置了一些默认的路径，其中还定义了 几个插件，不过<a href="https://maven.apache.org/ref/3.8.1/maven-model-builder/super-pom.html" target="_blank" rel="noreferrer">Maven官方</a>也提醒，未来的版本会去掉。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;pluginManagement&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- NOTE: These plugins will be removed from future versions of the super POM --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/pluginManagement&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;pluginManagement&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- NOTE: These plugins will be removed from future versions of the super POM --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/pluginManagement&gt;</span></span></code></pre></div><h4 id="父-pom" tabindex="-1">父 POM <a class="header-anchor" href="#父-pom" aria-label="Permalink to &quot;父 POM&quot;">​</a></h4><p>和 Java 类一样，POM 之间其实也是<strong>单继承</strong>的。如果我们给一个 POM 指定了父 POM，那么继承关系如下图所示：</p><p><img src="`+Js+`" alt="image-20220701112032458"></p><h4 id="有效-pom" tabindex="-1">有效 POM <a class="header-anchor" href="#有效-pom" aria-label="Permalink to &quot;有效 POM&quot;">​</a></h4><p>有效 POM 英文翻译为 effective POM，它的概念是这样的——在 POM 的继承关系中，子 POM 可以覆盖父 POM 中的配置；如果子 POM 没有覆盖，那么父 POM 中的配置将会被继承。按照这个规则，继承关系中的所有 POM 叠加到一起，就得到了一个最终生效的 POM。显然 Maven 实际运行过程中，执行构建操作就是按照这个最终生效的 POM 来运行的。这个最终生效的 POM 就是<strong>有效 POM</strong>，英文叫<strong>effective POM</strong></p><p>查看有效 POM：</p><blockquote><p>mvn help:effective-pom</p></blockquote><p>综上所述，平时我们使用和配置的 POM 其实大致是由四个层次组成的：</p><ul><li>超级 POM：所有 POM 默认继承，只是有直接和间接之分。</li><li>父 POM：这一层可能没有，可能有一层，也可能有很多层。</li><li>当前 pom.xml 配置的 POM：我们最多关注和最多使用的一层。</li><li>有效 POM：隐含的一层，但是实际上真正生效的一层。</li></ul><h4 id="pom文件构成" tabindex="-1">Pom文件构成 <a class="header-anchor" href="#pom文件构成" aria-label="Permalink to &quot;Pom文件构成&quot;">​</a></h4><blockquote><p>一个基本的pom.xml文件配置如下</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- maven模型的版本，对于maven2和maven3来说，只能是4.0.0 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- 公司或者组织的唯一标志，一般是公司域名的倒写，或者是公司域名倒写+项目名。并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;org.heima&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    </span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- 项目的唯一ID，一个groupId下面可以有多个项目，通过artifactId来区分 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;maven_project&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- 项目的版本号 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/project&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span style="color:#24292e;">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292e;">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- maven模型的版本，对于maven2和maven3来说，只能是4.0.0 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- 公司或者组织的唯一标志，一般是公司域名的倒写，或者是公司域名倒写+项目名。并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.heima&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    </span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- 项目的唯一ID，一个groupId下面可以有多个项目，通过artifactId来区分 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;maven_project&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- 项目的版本号 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/project&gt;</span></span></code></pre></div><p>所有 POM 文件都需要 <code>&lt;project&gt;</code> 标签元素和该标签下的三个必需字段：groupId，artifactId，version。</p><pre><code>   groupId + artifactId + version = 坐标，坐标可用于标识互联网中的唯一资源，在Maven中，坐标是Jar包的唯一标识，Maven通过坐标在仓库中找到项目所需的Jar包。
</code></pre><h3 id="常见标签" tabindex="-1">常见标签 <a class="header-anchor" href="#常见标签" aria-label="Permalink to &quot;常见标签&quot;">​</a></h3><blockquote><p>下面我们看下Maven中的常用标签</p></blockquote><h4 id="parent标签" tabindex="-1">parent标签 <a class="header-anchor" href="#parent标签" aria-label="Permalink to &quot;parent标签&quot;">​</a></h4><blockquote><p>在maven多模块项目中引用父pom依赖，在<code>springboot</code>项目中就有父依赖</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;!--引用springBoot父项目--&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/parent&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!--引用springBoot父项目--&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/parent&gt;</span></span></code></pre></div><h4 id="properties标签" tabindex="-1">properties标签 <a class="header-anchor" href="#properties标签" aria-label="Permalink to &quot;properties标签&quot;">​</a></h4><blockquote><p>定义一些全局属性值，常用于jar包版本定义全局管理jar包版本后面可以<code>\${}</code> 取值</p></blockquote><pre><code>   在springboot项目中父pom会定义一些项目jar包版本依赖 ，所以我们在引用jar时候才不用写jar包版本，会自动跟随父pom中定义的jar包版本
</code></pre><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;2.4.7&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/parent&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;properties&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;activemq.version&gt;5.15.11&lt;/activemq.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;appengine-sdk.version&gt;1.9.77&lt;/appengine-sdk.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artemis.version&gt;2.10.1&lt;/artemis.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;aspectj.version&gt;1.9.5&lt;/aspectj.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;assertj.version&gt;3.13.2&lt;/assertj.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;atomikos.version&gt;4.0.6&lt;/atomikos.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;awaitility.version&gt;4.0.1&lt;/awaitility.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;bitronix.version&gt;2.1.4&lt;/bitronix.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;build-helper-maven-plugin.version&gt;3.0.0&lt;/build-helper-maven-plugin.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;byte-buddy.version&gt;1.10.4&lt;/byte-buddy.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;caffeine.version&gt;2.8.0&lt;/caffeine.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;cassandra-driver.version&gt;3.7.2&lt;/cassandra-driver.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;classmate.version&gt;1.5.1&lt;/classmate.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;commons-codec.version&gt;1.13&lt;/commons-codec.version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;/properties&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;2.4.7&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/parent&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;properties&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;activemq.version&gt;5.15.11&lt;/activemq.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;appengine-sdk.version&gt;1.9.77&lt;/appengine-sdk.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artemis.version&gt;2.10.1&lt;/artemis.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;aspectj.version&gt;1.9.5&lt;/aspectj.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;assertj.version&gt;3.13.2&lt;/assertj.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;atomikos.version&gt;4.0.6&lt;/atomikos.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;awaitility.version&gt;4.0.1&lt;/awaitility.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;bitronix.version&gt;2.1.4&lt;/bitronix.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;build-helper-maven-plugin.version&gt;3.0.0&lt;/build-helper-maven-plugin.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;byte-buddy.version&gt;1.10.4&lt;/byte-buddy.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;caffeine.version&gt;2.8.0&lt;/caffeine.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;cassandra-driver.version&gt;3.7.2&lt;/cassandra-driver.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;classmate.version&gt;1.5.1&lt;/classmate.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;commons-codec.version&gt;1.13&lt;/commons-codec.version&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;/properties&gt;</span></span></code></pre></div><h4 id="dependencymanagement标签" tabindex="-1">dependencyManagement标签 <a class="header-anchor" href="#dependencymanagement标签" aria-label="Permalink to &quot;dependencyManagement标签&quot;">​</a></h4><blockquote><p>在<code>Maven</code>多模块的时候，管理依赖关系是非常重要的，各种依赖包冲突，查询问题起来非常复杂，于是就用到了，在springboot项目中父模块就定义了</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependencyManagement&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-boot&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-boot-test-autoconfigure&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;/dependencyManagement&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependencyManagement&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-boot&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-boot-test-autoconfigure&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;/dependencyManagement&gt;</span></span></code></pre></div><blockquote><p>那么在子模块中只需要<code>&lt;groupId&gt;和&lt;artifactId&gt;</code>即可，不需要加入版本号，</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><blockquote><p>使用dependencyManagement可以统一管理项目的版本号，确保应用的各个项目的依赖和版本一致，不用每个模块项目都弄一个版本号，不利于管理，当需要变更版本号的时候只需要在父类容器里更新，不需要任何一个子项目的修改；如果某个子项目需要另外一个特殊的版本号时，只需要在自己的模块dependencies中声明一个版本号即可。子类就会使用子类声明的版本号，不继承于父类版本号</p></blockquote><h4 id="dependencies标签" tabindex="-1">dependencies标签 <a class="header-anchor" href="#dependencies标签" aria-label="Permalink to &quot;dependencies标签&quot;">​</a></h4><blockquote><p>用于引入项目依赖</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!--aop 切面--&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/dependencies&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!--aop 切面--&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependencies&gt;</span></span></code></pre></div><h5 id="dependencies和dependencymanagement区别" tabindex="-1">dependencies和dependencyManagement区别 <a class="header-anchor" href="#dependencies和dependencymanagement区别" aria-label="Permalink to &quot;dependencies和dependencyManagement区别&quot;">​</a></h5><p><code>Dependencies</code>相对于<code>dependencyManagement</code>，所有声明在dependencies里的依赖都会自动引入，并默认被所有的子项目继承， 而<code>dependencyManagement</code>里只是声明依赖，并不自动实现引入，因此子项目需要显示的声明需要用的依赖。</p><pre><code>   如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。
</code></pre><h4 id="build标签" tabindex="-1">build标签 <a class="header-anchor" href="#build标签" aria-label="Permalink to &quot;build标签&quot;">​</a></h4><p>在实际使用 Maven 的过程中，我们会发现 build 标签有时候有，有时候没，这是怎么回事呢？其实通过有效 POM 我们能够看到，build 标签的相关配置其实一直都在，只是在我们需要定制构建过程的时候才会通过配置 build 标签覆盖默认值或补充配置。这一点我们可以通过打印有效 POM 来看到。</p><p>所以<strong>本质</strong>上来说：我们配置的 build 标签都是对<strong>超级 POM 配置</strong>的<strong>叠加</strong>。那我们又为什么要在默认配置的基础上叠加呢？很简单，在默认配置无法满足需求的时候<strong>定制构建过程</strong>。</p><p><strong>build 标签组成</strong></p><p>从示例中我们能够看到，build 标签的子标签大致包含三个主体部分：</p><p><strong>① 定义约定的目录结构</strong></p><p>参考示例中的如下部分：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;directory&gt;\${project.basedir}/target&lt;/directory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;outputDirectory&gt;\${project.build.directory}/classes&lt;/outputDirectory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;finalName&gt;\${project.artifactId}-\${project.version}&lt;/finalName&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;testOutputDirectory&gt;\${project.build.directory}/test-classes&lt;/testOutputDirectory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;sourceDirectory&gt;\${project.basedir}/src/main/java&lt;/sourceDirectory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;scriptSourceDirectory&gt;\${project.basedir}/src/main/scripts&lt;/scriptSourceDirectory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;testSourceDirectory&gt;\${project.basedir}/src/test/java&lt;/testSourceDirectory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;resources&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;resource&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;directory&gt;\${project.basedir}/src/main/resources&lt;/directory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/resource&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/resources&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;testResources&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;testResource&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;directory&gt;\${project.basedir}/src/test/resources&lt;/directory&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/testResource&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;directory&gt;\${project.basedir}/target&lt;/directory&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;outputDirectory&gt;\${project.build.directory}/classes&lt;/outputDirectory&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;finalName&gt;\${project.artifactId}-\${project.version}&lt;/finalName&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;testOutputDirectory&gt;\${project.build.directory}/test-classes&lt;/testOutputDirectory&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;sourceDirectory&gt;\${project.basedir}/src/main/java&lt;/sourceDirectory&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;scriptSourceDirectory&gt;\${project.basedir}/src/main/scripts&lt;/scriptSourceDirectory&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;testSourceDirectory&gt;\${project.basedir}/src/test/java&lt;/testSourceDirectory&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;resources&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;resource&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;directory&gt;\${project.basedir}/src/main/resources&lt;/directory&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/resource&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/resources&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;testResources&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;testResource&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;directory&gt;\${project.basedir}/src/test/resources&lt;/directory&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/testResource&gt;</span></span></code></pre></div><p>我们能看到各个目录的作用如下：</p><table><thead><tr><th>目录名</th><th>作用</th></tr></thead><tbody><tr><td>sourceDirectory</td><td>主体源程序存放目录</td></tr><tr><td>scriptSourceDirectory</td><td>脚本源程序存放目录</td></tr><tr><td>testSourceDirectory</td><td>测试源程序存放目录</td></tr><tr><td>outputDirectory</td><td>主体源程序编译结果输出目录</td></tr><tr><td>testOutputDirectory</td><td>测试源程序编译结果输出目录</td></tr><tr><td>resources</td><td>主体资源文件存放目录</td></tr><tr><td>testResources</td><td>测试资源文件存放目录</td></tr><tr><td>directory</td><td>构建结果输出目录</td></tr></tbody></table><p><strong>② 备用插件管理</strong></p><p>pluginManagement 标签存放着几个插件：</p><ul><li>maven-antrun-plugin</li><li>maven-assembly-plugin</li><li>maven-dependency-plugin</li><li>maven-release-plugin</li></ul><p>通过 pluginManagement 标签管理起来的插件就像 dependencyManagement 一样，子工程使用时可以省略版本号，起到在父工程中统一管理版本的效果。情看下面例子：</p><ul><li>被 spring-boot-dependencies 管理的插件信息：</li><li>子工程使用的插件信息：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/build&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/build&gt;</span></span></code></pre></div><p><strong>③生命周期插件</strong></p><p>plugins 标签存放的是默认生命周期中实际会用到的插件，这些插件想必大家都不陌生，所以抛开插件本身不谈，我们来看看 plugin 标签的结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;3.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;executions&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;execution&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;id&gt;default-compile&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;phase&gt;compile&lt;/phase&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;goals&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;goal&gt;compile&lt;/goal&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;/goals&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/execution&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;execution&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;id&gt;default-testCompile&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;phase&gt;test-compile&lt;/phase&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;goals&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;goal&gt;testCompile&lt;/goal&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;/goals&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/execution&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/executions&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/plugin&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;3.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;executions&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;execution&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;id&gt;default-compile&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;phase&gt;compile&lt;/phase&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;goals&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;goal&gt;compile&lt;/goal&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/goals&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/execution&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;execution&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;id&gt;default-testCompile&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;phase&gt;test-compile&lt;/phase&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;goals&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;goal&gt;testCompile&lt;/goal&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/goals&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/execution&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/executions&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/plugin&gt;</span></span></code></pre></div><p><strong>典型应用：指定 JDK 版本</strong></p><p>① 提出问题</p><p>前面我们在 settings.xml 中配置了 JDK 版本，那么将来把 Maven 工程部署都服务器上，脱离了 settings.xml 配置，如何保证程序正常运行呢？思路就是我们直接把 JDK 版本信息告诉负责编译操作的 maven-compiler-plugin 插件，让它在构建过程中，按照我们指定的信息工作。</p><p>② 暂时取消 settings.xml 配置</p><p>为了测试对 maven-compiler-plugin 插件进行配置的效果，我们暂时取消 settings.xml 中的 profile 配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;!-- 配置Maven工程的默认JDK版本 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;!-- &lt;profile&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;id&gt;jdk-1.8&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;activation&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;jdk&gt;1.8&lt;/jdk&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;/activation&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;properties&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;/properties&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/profile&gt; --&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!-- 配置Maven工程的默认JDK版本 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;!-- &lt;profile&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;id&gt;jdk-1.8&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;activation&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;jdk&gt;1.8&lt;/jdk&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;/activation&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;properties&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;/properties&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/profile&gt; --&gt;</span></span></code></pre></div><p>③ 编写源文件代码</p><p>很明显这里用到了 Lambda 表达式，这是 JDK 1.8 才支持的语法。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">package com.itheima.maven;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">public class Hello {</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    public void hello() {</span></span>
<span class="line"><span style="color:#e1e4e8;">        new Thread(()-&gt;{</span></span>
<span class="line"><span style="color:#e1e4e8;">            System.out.println(&quot;thread ...&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">        }).start();</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">package com.itheima.maven;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">public class Hello {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public void hello() {</span></span>
<span class="line"><span style="color:#24292e;">        new Thread(()-&gt;{</span></span>
<span class="line"><span style="color:#24292e;">            System.out.println(&quot;thread ...&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        }).start();</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>此时我们执行编译命令：</p><p><img src="`+Hs+`" alt="image-20220701160437052"></p><p>④ 配置构建过程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;!-- build 标签：意思是告诉 Maven，你的构建行为，我要开始定制了！ --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!-- plugins 标签：Maven 你给我听好了，你给我构建的时候要用到这些插件！ --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;!-- plugin 标签：这是我要指定的一个具体的插件 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;!-- 插件的坐标。此处引用的 maven-compiler-plugin 插件不是第三方的，是一个 Maven 自带的插件。 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;version&gt;3.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            </span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;!-- configuration 标签：配置 maven-compiler-plugin 插件 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;configuration&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;!-- 具体配置信息会因为插件不同、需求不同而有所差异 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;source&gt;1.8&lt;/source&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;target&gt;1.8&lt;/target&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;/configuration&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/build&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!-- build 标签：意思是告诉 Maven，你的构建行为，我要开始定制了！ --&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!-- plugins 标签：Maven 你给我听好了，你给我构建的时候要用到这些插件！ --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;!-- plugin 标签：这是我要指定的一个具体的插件 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;!-- 插件的坐标。此处引用的 maven-compiler-plugin 插件不是第三方的，是一个 Maven 自带的插件。 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;version&gt;3.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">            </span></span>
<span class="line"><span style="color:#24292e;">            &lt;!-- configuration 标签：配置 maven-compiler-plugin 插件 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;configuration&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;!-- 具体配置信息会因为插件不同、需求不同而有所差异 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;source&gt;1.8&lt;/source&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;target&gt;1.8&lt;/target&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/configuration&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/build&gt;</span></span></code></pre></div><p>⑤ 再次执行编译命令</p><p><img src="`+Vs+`" alt="image-20220701160517183"></p><p>⑥ 两种配置方式比较</p><ul><li>settings.xml 中配置：仅在本地生效，如果脱离当前 settings.xml 能够覆盖的范围，则无法生效。</li><li>在当前 Maven 工程 pom.xml 中配置：无论在哪个环境执行编译等构建操作都有效。</li></ul><p>还有另外一种方式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;properties&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/properties&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;properties&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/properties&gt;</span></span></code></pre></div><h2 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h2><h3 id="依赖传递" tabindex="-1">依赖传递 <a class="header-anchor" href="#依赖传递" aria-label="Permalink to &quot;依赖传递&quot;">​</a></h3><p><img src="`+$s+`" alt="image-20230917172544222"></p><h3 id="传递性依赖机制" tabindex="-1">传递性依赖机制 <a class="header-anchor" href="#传递性依赖机制" aria-label="Permalink to &quot;传递性依赖机制&quot;">​</a></h3><pre><code>   项目A中，我们为了实现某一个功能通常会引入第三方库，这里是一个compile依赖范围的B依赖，而B依赖同时又依赖于另一个compile依赖范围的C组件。

   那么对A而言，C就是它的一个传递性依赖，在Maven中，其会将我们在POM文件中显式声明的直接依赖(本例的B依赖)引入到项目中，对于**必要**的间接依赖(本例的C依赖)则会以传递性依赖的形式**自动地**引入到项目A中，而无需我们手动显式地在POM文件中声明C依赖来引入。

   Maven的传递性依赖机制，大大地减少了人工维护间接依赖的复杂度
</code></pre><h4 id="传递性依赖的依赖范围" tabindex="-1">传递性依赖的依赖范围 <a class="header-anchor" href="#传递性依赖的依赖范围" aria-label="Permalink to &quot;传递性依赖的依赖范围&quot;">​</a></h4><blockquote><p>项目A依赖于B组件，B组件依赖于C组件，则我们将A对于B的依赖称之为<strong>第一直接依赖</strong>，B对于C的依赖称之为<strong>第二直接依赖</strong>。</p></blockquote><pre><code>   根据上文可知，A对于C的依赖是传递性依赖，**必要**的间接依赖C将通过传递性依赖机制，被自动引入到A中。那么如何判定一个间接依赖是否有必要被引入呢？间接依赖被引入后其依赖范围又是什么呢？

   答案其实很简单，就是通过第一直接依赖的依赖范围和第二直接依赖的依赖范围之间的关系，来判定是否有必要引入间接依赖以及确定引入间接依赖后其依赖范围。

   如下表所示，若结果为N，则意味着该传递性依赖为非必要的，无需引入；否则，该间接依赖为必要的并自动引入该间接依赖，且引入后该传递依赖的依赖范围如下表单元格中的文字所示
</code></pre><blockquote><p>Maven依赖范围不仅控制依赖与classpath的关系，还会影响依赖传递</p></blockquote><pre><code>   最左边一列表示第一直接依赖范围，最上面一行表示第二直接依赖范围，中间的交叉单元格则表示传递性依赖范围
</code></pre><table><thead><tr><th></th><th>compile</th><th>test</th><th>provided</th><th>runtime</th></tr></thead><tbody><tr><td>compile</td><td>compile</td><td>N</td><td>N</td><td>runtime</td></tr><tr><td>test</td><td>test</td><td>N</td><td>N</td><td>test</td></tr><tr><td>provided</td><td>provided</td><td>N</td><td>provided</td><td>provided</td></tr><tr><td>runtime</td><td>runtime</td><td>N</td><td>N</td><td>runtime</td></tr></tbody></table><blockquote><p>仔细观察上面表格，我们发现这样的规律</p></blockquote><ul><li>当第二直接依赖的范围是compile的时候，传递性依赖的范围与第一直接依赖的范围一致；</li><li>当第二直接依赖的范围是test的时候，依赖不会得以传递；</li><li>当第二直接依赖的范围是provided的时候，只传递第一直接依赖的范围也为provided的依赖，切传递性依赖的范围同样为provided；</li><li>当第二直接依赖的范围是runtime的时候，传递性依赖的范围与第一直接依赖的范围一致，但compile例外，此时传递性依赖的范围为runtime。</li></ul><h4 id="依赖调解" tabindex="-1">依赖调解 <a class="header-anchor" href="#依赖调解" aria-label="Permalink to &quot;依赖调解&quot;">​</a></h4><blockquote><p>在Maven中由于传递性依赖的机制，一般情况下我们不需要关心间接依赖的管理。</p></blockquote><pre><code>   而当间接依赖出问题时，我们需要知道该间接依赖是通过哪条依赖路径引入的，特别是该间接依赖存在多条引入路径时，确定间接依赖引入的路径就显得尤为重要。当一个间接依赖存在多条引入路径时，为避免依赖重复Maven会通过**依赖调解**来确定该间接依赖的引入路径
</code></pre><blockquote><p>依赖调解遵循以下原则，<strong>优先使用第一原则，当第一原则无法解决时，则通过第二原则解决</strong></p></blockquote><ul><li>第一原则: 路径最短者优先</li><li>第二原则: 第一声明者优先</li></ul><h5 id="路径最短者优先" tabindex="-1">路径最短者优先 <a class="header-anchor" href="#路径最短者优先" aria-label="Permalink to &quot;路径最短者优先&quot;">​</a></h5><blockquote><p>假设在项目A中存在如下依赖关系:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">A -&gt; X -&gt; Y -&gt; Z(2.0)   // dist(A-&gt;Z) = 3</span></span>
<span class="line"><span style="color:#e1e4e8;">A -&gt; M -&gt; Z(2.1)        // dist(A-&gt;Z) = 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">A -&gt; X -&gt; Y -&gt; Z(2.0)   // dist(A-&gt;Z) = 3</span></span>
<span class="line"><span style="color:#24292e;">A -&gt; M -&gt; Z(2.1)        // dist(A-&gt;Z) = 2</span></span></code></pre></div><pre><code>   项目A依赖的Z组件有2个版本，很显然不可能同时引入两个版本的间接依赖，这里可以看到，Z(2.0)依赖的依赖路径长度为3，Z(2.1)依赖的依赖路径长度为2。

   根据依赖调解的第一原则——**路径最短者优先**，所以，2.1版本的Z组件将通过 A -&gt; M -&gt; Z(2.1) 路径被引入到A中
</code></pre><h5 id="第一声明者优先" tabindex="-1">第一声明者优先 <a class="header-anchor" href="#第一声明者优先" aria-label="Permalink to &quot;第一声明者优先&quot;">​</a></h5><pre><code>   假设在项目B中存在如下依赖关系，间接依赖W在两条依赖路径中的路径长度均为2，这时候就无法通过依赖调解的第一原则来确定引入路径。此时需要使用依赖调解的第二原则——**第一声明者优先**。

   根据项目B的POM文件中直接依赖K、P的声明顺序，先声明的直接依赖，则其间接依赖即通过该路径被引入
</code></pre><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">B -&gt; K -&gt; W(1.0)        // dist(B-&gt;W) = 2</span></span>
<span class="line"><span style="color:#e1e4e8;">B -&gt; P -&gt; W(2.0)        // dist(B-&gt;W) = 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">B -&gt; K -&gt; W(1.0)        // dist(B-&gt;W) = 2</span></span>
<span class="line"><span style="color:#24292e;">B -&gt; P -&gt; W(2.0)        // dist(B-&gt;W) = 2</span></span></code></pre></div><pre><code>   项目B的POM文件内容如下所示，由于P依赖比K依赖先声明，则2.0版本的的W组件将通过 B -&gt; P -&gt; W(2.0) 路径被引入到B中
</code></pre><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;P&lt;/artifactId&gt;        </span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;K&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/dependencies&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;P&lt;/artifactId&gt;        </span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;K&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependencies&gt;</span></span></code></pre></div><h4 id="依赖处理" tabindex="-1">依赖处理 <a class="header-anchor" href="#依赖处理" aria-label="Permalink to &quot;依赖处理&quot;">​</a></h4><blockquote><p>有时候依赖调解会引入一些不需要的jar，我们可以通过一些方式进行处理</p></blockquote><h5 id="可选依赖-option" tabindex="-1">可选依赖 option <a class="header-anchor" href="#可选依赖-option" aria-label="Permalink to &quot;可选依赖 option&quot;">​</a></h5><blockquote><p>可选依赖是通过项目中的POM文件的依赖元素dependency下的option元素中进行配置，只有显式地配置项目中某依赖的option元素为true时，该依赖才是可选依赖；</p></blockquote><pre><code>   不设置该元素或值为false时，该依赖即不是可选依赖，其意义在于，当某个间接依赖是可选依赖时，无论依赖范围是什么，其都不会因为传递性依赖机制而被引入
</code></pre><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;junit&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;4.13.2&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;optional&gt;true&lt;/optional&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;junit&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;4.13.2&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;optional&gt;true&lt;/optional&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p><strong>optional元素默认值（false）</strong> 当父项目添加junit依赖时，并未添加optional选项，也就是默认的optional元素的值为false。 父项目并未设置optional元素为true，那么便具有依赖传递性。此时，子项目B中会直接引入父项目A中引入的Junit的jar包。也就是说B项目打包时，jar/war包中会包含junit的jar包。</p><p><strong>optional元素为true</strong> 当父项目引入junit依赖时，设置optional元素为true。那么，子项目B便有了更多的选择。</p><p>如果项目B不需要Junit的jar包，那么在其pom文件中不需进行任何处理便可以。如果B项目也需要对应的jar包依赖，可以有两种选择：第一、A项目中对应依赖的optional设置为false或去掉；第二、B项目中直接引入需要的该依赖。</p><h6 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h6><blockquote><p>这里简单介绍下option元素的实际应用场景</p></blockquote><pre><code>   我们在开发项目A的过程中，需要依赖一个第三方持久层的M组件，而这个M组件对两种不同数据库均支持( MySql、Oracle)，故M组件中需要依赖这两种不同数据库的驱动实现——X、Y组件。

   对于开发项目A的工程师而言，他可能在项目开发只需要使用其中一种数据库(例如MySql，其驱动实现为X依赖)，如果数据库驱动实现X、Y不是可选依赖，则均会传递到项目A中。

   虽然一般情况下这不会引发任何问题，但是会因引入不必要的依赖Y而造成项目体积增大，如果该M组件还支持更多类型的数据库，就会引入更多的不必要的数据库驱动实现依赖进来；而如果M组件中的X、Y依赖是可选依赖的话，则工程师就可以根据实际需要在A项目的POM文件中显式地引入所需数据库的驱动实现依赖即可
</code></pre><h6 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h6><blockquote><p>当然，一般情况下是不推荐使用可选依赖的，使用可选依赖一般是因为项目中支持、实现多种特性所造成的</p></blockquote><h5 id="排除依赖-exclusions" tabindex="-1">排除依赖 exclusions <a class="header-anchor" href="#排除依赖-exclusions" aria-label="Permalink to &quot;排除依赖 exclusions&quot;">​</a></h5><pre><code>   间接依赖是可以通过传递性依赖机制引入到当前项目中，而有时候第三方组件B的C依赖由于版本(1.0)过低存在安全漏洞。

   我们期望能够将该间接依赖直接剔除出去，不通过传递依赖的形式引入到项目中，这时即可通过exclusions元素实现，该元素下可以包含若干个 exclusion 子元素，然后再在POM中显式地引入合适版本(3.3)的C依赖
</code></pre><p><img src="`+Us+`" alt="image-20230917172717570"></p><blockquote><p>在exclusion元素中，只需给定groupId、artifactId即可确定依赖，而无需指定版本version</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;com.apple&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;B&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;version&gt;2.3&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;exclusions&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;exclusion&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;groupId&gt;com.google&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;artifactId&gt;C&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;/exclusion&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/exclusions&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;groupId&gt;com.google&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;artifactId&gt;C&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;version&gt;3.3&lt;/version&gt;        </span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/dependencies&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependencies&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;com.apple&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;B&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;version&gt;2.3&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;exclusions&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;exclusion&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;groupId&gt;com.google&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;artifactId&gt;C&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/exclusion&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/exclusions&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;groupId&gt;com.google&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;artifactId&gt;C&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;version&gt;3.3&lt;/version&gt;        </span></span>
<span class="line"><span style="color:#24292e;">    &lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependencies&gt;</span></span></code></pre></div><h2 id="合理的依赖范围" tabindex="-1">合理的依赖范围 <a class="header-anchor" href="#合理的依赖范围" aria-label="Permalink to &quot;合理的依赖范围&quot;">​</a></h2><blockquote><p>依赖范围：控制依赖与三种classpath的关系，可在POM文件的依赖元素dependency中的scope元素中进行配置，缺省值 compile</p></blockquote><pre><code>   Maven在编译、测试、运行(含打包)阶段中所需的依赖并不完全一致，所以Maven通过三种不同的classpath实现在不同阶段引入所需的依赖：编译classpath、测试classpath、运行classpath
</code></pre><h3 id="常见依赖范围" tabindex="-1">常见依赖范围 <a class="header-anchor" href="#常见依赖范围" aria-label="Permalink to &quot;常见依赖范围&quot;">​</a></h3><blockquote><p>常见的依赖范围有：</p></blockquote><ul><li><p><strong>compile</strong> :</p><p>不声明scope元素的情况下的<strong>默认值</strong>；compile表示被依赖包需要参与当前项目的编译，包括后续的测试，运行周期也参与其中，是一个比较强的依赖；打包的时候通常需要包含进去。</p></li><li><p><strong>provided</strong> :</p><p><code>provided</code> 类型的scope只会在项目的<code>编译</code>、<code>测试</code>阶段起作用；可以认为在目标容器中已经提供了这个依赖，无需在提供，但是在编写代码或者编译时可能会用到这个依赖；<code>依赖不会被打入到项目jar包中</code>。</p></li><li><p><strong>runtime</strong> :</p><p><code>runtime</code>与<code>compile</code>比较相似，区别在于<code>runtime</code> 跳过了<code>编译</code>阶段，打包的时候通常需要包含进去。</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">例：当你的代码需要使用jdbc连接一个mysql数据库，通常我们会希望针对标准 JDBC 抽象进行编码，而不是直接错误的使用 MySQL driver实现。这个时候依赖的scope就需要设置为runtime。这意味着我们在编译时无法使用该依赖，该依赖会被包含在最终的产物中，在程序最终执行时可以在classpath下找到它。</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">例：当你的代码需要使用jdbc连接一个mysql数据库，通常我们会希望针对标准 JDBC 抽象进行编码，而不是直接错误的使用 MySQL driver实现。这个时候依赖的scope就需要设置为runtime。这意味着我们在编译时无法使用该依赖，该依赖会被包含在最终的产物中，在程序最终执行时可以在classpath下找到它。</span></span>
<span class="line"><span style="color:#24292e;">        &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/dependency&gt;</span></span></code></pre></div><ul><li><p><strong>test</strong> :</p><p>在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，<code>不会被打包到项目jar包中</code>，同时如果项目A依赖于项目B，项目B中的<code>test</code>作用域下的依赖不会被继承。</p></li><li><p><strong>system</strong> :</p><p>系统依赖范围，其效果与provided的依赖范围一致。其用于添加非Maven仓库的本地依赖，通过依赖元素dependency中的systemPath元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，一般不推荐使用</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;!--引用--&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;groupId&gt;xxxx&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;artifactId&gt;xxx&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;systemPath&gt;D:\\tempare\\itheima-maven-test-aaa-1.0-SNAPSHOT.jar&lt;/systemPath&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;scope&gt;system&lt;/scope&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;version&gt;1.4.12&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!--引用--&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;groupId&gt;xxxx&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;artifactId&gt;xxx&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;systemPath&gt;D:\\tempare\\itheima-maven-test-aaa-1.0-SNAPSHOT.jar&lt;/systemPath&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;scope&gt;system&lt;/scope&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;version&gt;1.4.12&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/dependency&gt;</span></span></code></pre></div><ul><li><p><strong>import</strong> ：</p><p>import 只能在pom文件的中使用，从而引入其他的pom文件中引入依赖，如：在Spring boot 项目的POM文件中，我们可以通过在POM文件中继承 Spring-boot-starter-parent来引用Spring boot默认依赖的jar包，如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;2.0.1.BUILD-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/parent&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;2.0.1.BUILD-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/parent&gt;</span></span></code></pre></div><p>但是，通过上面的parent继承的方法，只能继承一个 spring-boot-start-parent。实际开发中，用户很可能需要继承自己公司的标准parent配置，这个时候可以使用 scope=import 来实现多继承。代码如下：</p><pre><code>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
         &lt;dependency&gt;
             &lt;!-- Import dependency management from Spring Boot --&gt;
             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
             &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
             &lt;version&gt;2.0.1.BUILD-SNAPSHOT&lt;/version&gt;
             &lt;type&gt;pom&lt;/type&gt;
             &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre><p>通过上面方式，就可以获取spring-boot-dependencies.2.0.1.BUILD-SNAPSHOT.pom文件中dependencyManagement配置的jar包依赖。如果要继承多个，可以在dependencyManagement中添加，如：</p><pre><code> &lt;dependencyManagement&gt;
     &lt;dependencies&gt;
         &lt;!-- Override Spring Data release train provided by Spring Boot --&gt;
         &lt;dependency&gt;
             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
             &lt;artifactId&gt;spring-data-releasetrain&lt;/artifactId&gt;
             &lt;version&gt;Fowler-SR2&lt;/version&gt;
             &lt;type&gt;pom&lt;/type&gt;
             &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;2.0.1.BUILD-SNAPSHOT&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre></li></ul><p><strong>依赖关系</strong></p><blockquote><p>依赖范围与三种classpath的关系一览表，如下所示:</p></blockquote><table><thead><tr><th>依赖范围（scope）</th><th>对于编译classpath有效</th><th>对于测试classpath有效</th><th>对于运行时classpath有效</th><th>例子</th></tr></thead><tbody><tr><td>compile(默认)</td><td>Y</td><td>Y</td><td>Y</td><td>Spring-core</td></tr><tr><td>test</td><td>N</td><td>Y</td><td>N</td><td>Junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>N</td><td>servlet-api</td></tr><tr><td>runtime</td><td>N</td><td>Y</td><td>Y</td><td>JDBC驱动实现</td></tr><tr><td>system</td><td>Y</td><td>Y</td><td>N</td><td>本地的，Maven仓库之外的类库文件</td></tr></tbody></table><h2 id="体系外jar包引入" tabindex="-1">体系外jar包引入 <a class="header-anchor" href="#体系外jar包引入" aria-label="Permalink to &quot;体系外jar包引入&quot;">​</a></h2><h3 id="提出问题" tabindex="-1">提出问题 <a class="header-anchor" href="#提出问题" aria-label="Permalink to &quot;提出问题&quot;">​</a></h3><p>『体系外 jar 包』</p><p>而实际开发中确实有可能用到一些 jar 包并非是用 Maven 的方式发布，那自然也没法通过 Maven 导入。</p><p>此时如果我们能够拿到该 jar 包的源码那还可以自己建一个 Maven 工程，自己打包。可是如果连源码都没有呢？</p><p>这方面的例子包括一些人脸识别用的 jar 包、海康视频监控 jar 包等等。</p><h3 id="解决办法" tabindex="-1">解决办法 <a class="header-anchor" href="#解决办法" aria-label="Permalink to &quot;解决办法&quot;">​</a></h3><h4 id="准备一个体系外-jar-包" tabindex="-1">准备一个体系外 jar 包 <a class="header-anchor" href="#准备一个体系外-jar-包" aria-label="Permalink to &quot;准备一个体系外 jar 包&quot;">​</a></h4><p>我们通过学 Maven 以前的方式创建一个 Java 工程，然后导出 jar 包即可用来测试。</p><p><img src="`+Ws+`" alt="image-20220701172948395"></p><h4 id="将该-jar-包安装到-maven-仓库" tabindex="-1">将该 jar 包安装到 Maven 仓库 <a class="header-anchor" href="#将该-jar-包安装到-maven-仓库" aria-label="Permalink to &quot;将该 jar 包安装到 Maven 仓库&quot;">​</a></h4><p>这里我们使用 install 插件的 install-file 目标：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mvn install:install-file -Dfile=[体系外 jar 包路径] \\zdy-spring-boot-starter-1.0-SNAPSHOT.jar</span></span>
<span class="line"><span style="color:#e1e4e8;">-DgroupId=[给体系外 jar 包强行设定坐标] \\</span></span>
<span class="line"><span style="color:#e1e4e8;">-DartifactId=[给体系外 jar 包强行设定坐标] \\</span></span>
<span class="line"><span style="color:#e1e4e8;">-Dversion=1 \\</span></span>
<span class="line"><span style="color:#e1e4e8;">-Dpackage=jar</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">mvn deploy:deploy-file -Dfile=文件的位置 -DgroupId=文件groupID  -Dversion=文件的版本号 -Dpackaging=jar -Durl=http://ip地址/nexus/content/repositories/releases -DrepositoryId=releases</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mvn install:install-file -Dfile=[体系外 jar 包路径] \\zdy-spring-boot-starter-1.0-SNAPSHOT.jar</span></span>
<span class="line"><span style="color:#24292e;">-DgroupId=[给体系外 jar 包强行设定坐标] \\</span></span>
<span class="line"><span style="color:#24292e;">-DartifactId=[给体系外 jar 包强行设定坐标] \\</span></span>
<span class="line"><span style="color:#24292e;">-Dversion=1 \\</span></span>
<span class="line"><span style="color:#24292e;">-Dpackage=jar</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">mvn deploy:deploy-file -Dfile=文件的位置 -DgroupId=文件groupID  -Dversion=文件的版本号 -Dpackaging=jar -Durl=http://ip地址/nexus/content/repositories/releases -DrepositoryId=releases</span></span></code></pre></div><p>例如（Windows 系统下使用 ^ 符号换行；Linux 系统用 \\）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mvn install:install-file -Dfile=D:\\cz_workspace\\code\\maven_demo\\zdy-spring-boot-starter-1.0-SNAPSHOT.jar ^</span></span>
<span class="line"><span style="color:#e1e4e8;">-DgroupId=com.itheima.maven ^</span></span>
<span class="line"><span style="color:#e1e4e8;">-DartifactId=zdy-spring-boot-starter ^</span></span>
<span class="line"><span style="color:#e1e4e8;">-Dversion=1.0 ^</span></span>
<span class="line"><span style="color:#e1e4e8;">-Dpackaging=jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mvn install:install-file -Dfile=D:\\cz_workspace\\code\\maven_demo\\zdy-spring-boot-starter-1.0-SNAPSHOT.jar ^</span></span>
<span class="line"><span style="color:#24292e;">-DgroupId=com.itheima.maven ^</span></span>
<span class="line"><span style="color:#24292e;">-DartifactId=zdy-spring-boot-starter ^</span></span>
<span class="line"><span style="color:#24292e;">-Dversion=1.0 ^</span></span>
<span class="line"><span style="color:#24292e;">-Dpackaging=jar</span></span></code></pre></div><p>执行结果：</p><p><img src="`+Ys+'" alt="image-20220701174936960"></p><p>再看本地仓库中确实有：</p><p><img src="'+Gs+`" alt="image-20220701175000633"></p><h4 id="测试-1" tabindex="-1">测试 <a class="header-anchor" href="#测试-1" aria-label="Permalink to &quot;测试&quot;">​</a></h4><p>在其它地方依赖这个 jar 包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;groupId&gt;com.itheima.maven&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;artifactId&gt;zdy-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;version&gt;1.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;com.itheima.maven&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;zdy-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;1.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><h2 id="生命周期-插件" tabindex="-1">生命周期 &amp; 插件 <a class="header-anchor" href="#生命周期-插件" aria-label="Permalink to &quot;生命周期 &amp; 插件&quot;">​</a></h2><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><ul><li><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一</p></li><li><p>maven把项目的构建划分为不同的生命周期(lifecycle)。粗略一点的话，它这个过程(phase)包括：编译、测试、打包、集成测试、验证、部署。maven中所有的执行动作(goal)都需要指明自己在这个过程中的执行位置，然后maven执行的时候，就依照过程的发展依次调用这些goal进行各种处理。</p></li></ul><h3 id="三套生命周期" tabindex="-1">三套生命周期 <a class="header-anchor" href="#三套生命周期" aria-label="Permalink to &quot;三套生命周期&quot;">​</a></h3><p>下面列出了default、clean和site生命周期的所有构建阶段，这些阶段按照指定的顺序执行。</p><ol><li>Clean Lifecycle 在进行真正的构建之前进行一些清理工作</li><li>Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等</li><li>Site Lifecycle 生成项目报告，站点，发布站点</li></ol><p>注意：执行某个生命周期的某个阶段不会影响其它的生命周期！</p><p>如果要同时执行多个生命周期的阶段可在命令行输入多个命令，中间以空格隔开，例如： clean package 该命令执行clean生命周期的clean阶段和default生命周期的package阶段。</p><h4 id="clean生命周期" tabindex="-1">clean生命周期 <a class="header-anchor" href="#clean生命周期" aria-label="Permalink to &quot;clean生命周期&quot;">​</a></h4><p>包含三个阶段：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1. pre-clean：执行一些清理前需要完成的工作</span></span>
<span class="line"><span style="color:#e1e4e8;">2. clean：清理上一次构建生成的文件</span></span>
<span class="line"><span style="color:#e1e4e8;">3. post-clean：执行一些清理后需要完成的工作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1. pre-clean：执行一些清理前需要完成的工作</span></span>
<span class="line"><span style="color:#24292e;">2. clean：清理上一次构建生成的文件</span></span>
<span class="line"><span style="color:#24292e;">3. post-clean：执行一些清理后需要完成的工作</span></span></code></pre></div><h4 id="default生命周期" tabindex="-1">default生命周期 <a class="header-anchor" href="#default生命周期" aria-label="Permalink to &quot;default生命周期&quot;">​</a></h4><p><strong>default生命周期定义了真正构建时所需要执行的所有步骤，是所有生命周期中最核心的部分</strong></p><p><img src="`+Xs+`" alt="image-20220701181259849"></p><h4 id="site生命周期" tabindex="-1">site生命周期 <a class="header-anchor" href="#site生命周期" aria-label="Permalink to &quot;site生命周期&quot;">​</a></h4><p>Maven能够基于POM包含的信息，自动生成一个友好的站点，方便团队交流和发布项目信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pre-site：执行一些在生产项目站点前需要完成的工作</span></span>
<span class="line"><span style="color:#e1e4e8;">site：生成项目站点文档</span></span>
<span class="line"><span style="color:#e1e4e8;">post-site：执行一些在生产项目站点之后需要完成的工作</span></span>
<span class="line"><span style="color:#e1e4e8;">site-deploy：将生成的项目站点发布到服务器上</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pre-site：执行一些在生产项目站点前需要完成的工作</span></span>
<span class="line"><span style="color:#24292e;">site：生成项目站点文档</span></span>
<span class="line"><span style="color:#24292e;">post-site：执行一些在生产项目站点之后需要完成的工作</span></span>
<span class="line"><span style="color:#24292e;">site-deploy：将生成的项目站点发布到服务器上</span></span></code></pre></div><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h3><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>maven插件主要是为maven中生命周期中的阶段服务的，maven中只是定义了3套生命周期，以及每套生命周期中有哪些阶段，具体每个阶段中执行什么操作，完全是交给插件去干。</p><ul><li>插件可以通过 mvn 命令的方式调用直接运行</li><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件</li><li>maven默认在各个生命周期上都绑定了预先设定的插件来完成相应功能</li></ul><p>插件通常提供了一个目标的集合，并且可以使用下面的语法执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;code&gt;mvn [plugin-name]:[goal-name]&lt;/code&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;code&gt;mvn [plugin-name]:[goal-name]&lt;/code&gt;</span></span></code></pre></div><p>例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;code&gt;mvn compiler:compile&lt;/code&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;code&gt;mvn compiler:compile&lt;/code&gt;</span></span></code></pre></div><h4 id="插件目标" tabindex="-1">插件目标 <a class="header-anchor" href="#插件目标" aria-label="Permalink to &quot;插件目标&quot;">​</a></h4><p>maven中的插件以jar的方式存在于仓库中，通过坐标进行访问，每个插件中可能为了代码可以重用，一个插件可能包含了多个功能。插件中的每个功能就叫做插件的目标（Plugin Goal），每个插件中可能包含一个或者多个插件目标（Plugin Goal）。</p><ul><li>例如maven-dependency-plugin插件有十多个目标，常见的有dependency:analyze、dependency:tree、dependency:list等不同的功能</li><li>列出插件的所有目标： <ul><li>mvn 插件goupId:插件artifactId[:插件version]:help</li><li>mvn 插件前缀:help</li></ul></li></ul><h4 id="插件前缀" tabindex="-1">插件前缀 <a class="header-anchor" href="#插件前缀" aria-label="Permalink to &quot;插件前缀&quot;">​</a></h4><p>运行插件的时候，可以通过指定插件坐标的方式运行。maven中给插件定义了一些简捷的插件前缀，可以通过插件前缀来运行指定的插件。</p><p>可以通过下面命令查看到插件的前缀：mvn help:describe -Dplugin=插件goupId:插件artifactId[:插件version]</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mvn help:describe -Dplugin=org.apache.maven.plugins:maven-help-plugin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mvn help:describe -Dplugin=org.apache.maven.plugins:maven-help-plugin</span></span></code></pre></div><p>使用mvn命令调用插件的时候，可以使用插件的前缀来代替繁琐的插件坐标的方式。</p><p>插件前缀与插件groupId:artifactId是一一对应的关系，这个关系的配置存储在仓库的元数据中</p><h4 id="插件和生命周期阶段绑定" tabindex="-1">插件和生命周期阶段绑定 <a class="header-anchor" href="#插件和生命周期阶段绑定" aria-label="Permalink to &quot;插件和生命周期阶段绑定&quot;">​</a></h4><p>将生命周期中的阶段和插件的目标进行绑定的时候，执行 mvn 阶段 就可以执行和这些阶段绑定的 插件目标 。</p><h5 id="内置绑定" tabindex="-1">内置绑定 <a class="header-anchor" href="#内置绑定" aria-label="Permalink to &quot;内置绑定&quot;">​</a></h5><p>为了让用户不用任何配置就能构件Maven项目，Maven在核心为一些主要的生命周期阶段绑定了很多插件目标，这些绑定就是内置绑定。下面是三个生命周期中的内置绑定：</p><p><img src="`+Ks+'" alt="image-20220701183531605"></p><p>default生命周期阶段</p><p><img src="'+Zs+`" alt="image-20220701183544763"></p><h5 id="自定义绑定" tabindex="-1">自定义绑定 <a class="header-anchor" href="#自定义绑定" aria-label="Permalink to &quot;自定义绑定&quot;">​</a></h5><ul><li>用户可以自己选择将某个插件目标绑定到生命周期的某个阶段上</li><li>举例：创建项目的源码jar包，将其安装到仓库中，我们将<strong>maven-source-plugin插件</strong>中的<strong>jar-no-fork目标</strong>绑定到<strong>default生命周期的verify阶段</strong>上，这样就可以将项目的主代码打包成jar文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;version&gt;3.2.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;executions&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;!-- 使用插件需要执行的任务 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;execution&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                     &lt;!-- 任务id --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                    &lt;id&gt;attach-sources&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                    &lt;!-- 绑定的阶段 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                    &lt;phase&gt;verify&lt;/phase&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                     &lt;!-- 任务中插件的目标，可以指定多个 --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                    &lt;goals&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                        &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                    &lt;/goals&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;/execution&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;/executions&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/build&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">运行命令：mvn install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;version&gt;3.2.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;executions&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;!-- 使用插件需要执行的任务 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;execution&gt;</span></span>
<span class="line"><span style="color:#24292e;">                     &lt;!-- 任务id --&gt;</span></span>
<span class="line"><span style="color:#24292e;">                    &lt;id&gt;attach-sources&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">                    &lt;!-- 绑定的阶段 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">                    &lt;phase&gt;verify&lt;/phase&gt;</span></span>
<span class="line"><span style="color:#24292e;">                     &lt;!-- 任务中插件的目标，可以指定多个 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">                    &lt;goals&gt;</span></span>
<span class="line"><span style="color:#24292e;">                        &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span></span>
<span class="line"><span style="color:#24292e;">                    &lt;/goals&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;/execution&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/executions&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/build&gt;</span></span>
<span class="line"><span style="color:#24292e;">运行命令：mvn install</span></span></code></pre></div><h3 id="插件配置" tabindex="-1">插件配置 <a class="header-anchor" href="#插件配置" aria-label="Permalink to &quot;插件配置&quot;">​</a></h3><h4 id="命令行插件配置" tabindex="-1">命令行插件配置 <a class="header-anchor" href="#命令行插件配置" aria-label="Permalink to &quot;命令行插件配置&quot;">​</a></h4><p>用户可以<strong>在Maven命令中使用-D参数，并伴随一个参数键 = 参数值的形式，来配置插件目标的参数</strong>，例如，maven-surefire-plugin提供了一个maven.test.skip参数，当其值为true的时候，跳过执行测试</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$mvn install -Dmaven.test.skip = true  //参数-D是Java自带的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$mvn install -Dmaven.test.skip = true  //参数-D是Java自带的</span></span></code></pre></div><h4 id="pom中插件全局配置" tabindex="-1">POM中插件全局配置 <a class="header-anchor" href="#pom中插件全局配置" aria-label="Permalink to &quot;POM中插件全局配置&quot;">​</a></h4><p>用户可以<strong>在声明插件的时候，对插件进行一个全局的配置</strong>，也就是说，<strong>所有基于该插件目标的任务，都会使用这些配置</strong>。例如，配置maven-compiler-plugin告诉它编译Java1.5的源文件，生成与JVM1.5兼容的字节码文件，如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;version&gt;3.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;configuration&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;source&gt;1.5&lt;/source&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">                &lt;target&gt;1.5&lt;/target&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">            &lt;/configuration&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/build&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;build&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;version&gt;3.1&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;configuration&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;source&gt;1.5&lt;/source&gt;</span></span>
<span class="line"><span style="color:#24292e;">                &lt;target&gt;1.5&lt;/target&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/configuration&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/plugin&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/plugins&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/build&gt;</span></span></code></pre></div><h2 id="依赖纠错" tabindex="-1">依赖纠错 <a class="header-anchor" href="#依赖纠错" aria-label="Permalink to &quot;依赖纠错&quot;">​</a></h2><p>由于实际开发时我们往往都会整合使用很多大型框架，所以一个项目中哪怕只是一个模块也会涉及到大量 jar 包。数以百计的 jar 包要彼此协调、精密配合才能保证程序正常运行。而规模如此庞大的 jar 包组合在一起难免会有磕磕碰碰。最关键的是由于 jar 包冲突所导致的问题非常诡异，这里我们只能罗列较为典型的问题，而没法保证穷举。</p><p>但是我们仍然能够指出一点：一般来说，由于我们自己编写代码、配置文件写错所导致的问题通常能够在异常信息中看到我们自己类的全类名或配置文件的所在路径。如果整个错误信息中完全没有我们负责的部分，全部是框架、第三方工具包里面的类报错，这往往就是 jar 包的问题所引起的。</p><p>而具体的表现形式中，主要体现为找不到类或找不到方法。</p><ul><li>java.lang.<strong>ClassNotFoundException</strong>：编译过程中找不到类</li><li>java.lang.<strong>NoClassDefFoundError</strong>：运行过程中找不到类</li><li>java.lang.<strong>NoSuchMethodError</strong></li></ul><h3 id="分析解决" tabindex="-1">分析解决 <a class="header-anchor" href="#分析解决" aria-label="Permalink to &quot;分析解决&quot;">​</a></h3><p>很多情况下常用框架之间的整合容易出现的冲突问题都有人总结过了，拿抛出的异常搜索一下基本上就可以直接找到对应的 jar 包。我们接下来要说的是通用方法。</p><p>不管具体使用的是什么工具，基本思路无非是这么两步：</p><ul><li>第一步：把彼此冲突的 jar 包找到</li><li>第二步：在冲突的 jar 包中选定一个。具体做法无非是通过 exclusions 排除依赖，或是明确声明依赖。</li></ul><h3 id="idea-的-maven-helper-插件" tabindex="-1">IDEA 的 Maven Helper 插件 <a class="header-anchor" href="#idea-的-maven-helper-插件" aria-label="Permalink to &quot;IDEA 的 Maven Helper 插件&quot;">​</a></h3><p>这个插件是 IDEA 中安装的插件，不是 Maven 插件。它能够给我们罗列出来同一个 jar 包的不同版本，以及它们的来源</p><p><img src="`+zs+'" alt="image-20220701185347742"></p><p><img src="'+Qs+'" alt="image-20220701185452212"></p><p>其中三个选项分别表示如下:</p><ol><li>Conflicts（查看冲突）</li><li>All Dependencies as List（列表形式查看所有依赖）</li><li>All Dependencies as Tree（树形式查看所有依赖）</li></ol><p><img src="'+sa+'" alt="image-20220701185505856"></p><p>2、IEDA使用Maven命令查看依赖冲突方法</p><p>①：想要查看maven的依赖树的时候使用Maven命令来查看依赖：</p><p><code>maven dependency:tree</code></p><p>②：查看是否有依赖冲突也可以使用Maven命令来查看：</p><p><code>mvn dependency:tree -Dverbose -Dincludes=:</code></p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><h3 id="maven下载依赖中途失败解决" tabindex="-1">maven下载依赖中途失败解决 <a class="header-anchor" href="#maven下载依赖中途失败解决" aria-label="Permalink to &quot;maven下载依赖中途失败解决&quot;">​</a></h3><p>今天又遇到了这个问题：dependency冲突问题，看了一下，知道是因为之前WiFi突然断掉，jar包没有下载成功。 以前只有一个jar包，直接到对应的目录下删除lastupload结尾的文件，maven upload就可以了。 但是很多jar包时候就不方便了，解决办法：clean intall -U</p><p><em>Bigint 相当于java里面的long</em></p><h3 id="maven项目pom文件有删除线解决办法" tabindex="-1"><strong>maven项目pom文件有删除线解决办法</strong> <a class="header-anchor" href="#maven项目pom文件有删除线解决办法" aria-label="Permalink to &quot;**maven项目pom文件有删除线解决办法**&quot;">​</a></h3><p>项目中不知道操作了什么，造成一个maven模块不能被识别</p><p><img src="'+aa+'" alt="image-20220717140648338"></p><p>解决办法，打开preference，按照如下图方式找到对应的模块，去掉前面的钩即可</p><p><img src="'+na+'" alt="image-20220717140657713"></p><h3 id="maven-loading-archetype-list以及加载archetype-xml很慢" tabindex="-1">maven loading archetype list以及加载archetype.xml很慢 <a class="header-anchor" href="#maven-loading-archetype-list以及加载archetype-xml很慢" aria-label="Permalink to &quot;maven loading archetype list以及加载archetype.xml很慢&quot;">​</a></h3><p><img src="'+la+`" alt="image-20220717140727483"></p><h3 id="maven-项目卡在-generating-project-in-batch-mode" tabindex="-1">MAVEN 项目卡在 Generating project in Batch mode <a class="header-anchor" href="#maven-项目卡在-generating-project-in-batch-mode" aria-label="Permalink to &quot;MAVEN 项目卡在 Generating project in Batch mode&quot;">​</a></h3><p>IDEA 创建 MAVEN 项目卡在 Generating project in Batch mode。是 MAVEN 一直在请求：<a href="http://repo1.maven.org/maven2/archetype-catalog.xml" target="_blank" rel="noreferrer">http://repo1.maven.org/maven2/archetype-catalog.xml</a></p><p>这个项目目录的 xml 文件，由于墙的问题，加载缓慢，等待时间十分漫长。**解决方法：**修改 setting.xml 文件，把 mirror 改成阿里的镜像。</p><p>1、打开 maven 目录下的 conf/setting.xml，注意要是 idea 使用的 maven。</p><p>2、搜索 <code>&lt;mirrors&gt;</code>；找到<code>&lt;mirrors&gt;</code>。在 <code>&lt;mirrors&gt;</code> 节点下添加。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;mirror&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;id&gt;alimaven&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;name&gt;aliyun maven&lt;/name&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/mirror&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;mirror&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;id&gt;alimaven&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;name&gt;aliyun maven&lt;/name&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span></span>
<span class="line"><span style="color:#24292e;">&lt;/mirror&gt;</span></span></code></pre></div><p>3、运行 MVN 命令的时候加上 <strong>-DarchetypeCatalog=local</strong> 这个参数。在 IDEA 中：</p><p><img src="`+ea+`" alt="image-20220717141351009"></p><h3 id="maven-3-8-https问题" tabindex="-1">maVen 3.8 https问题 <a class="header-anchor" href="#maven-3-8-https问题" aria-label="Permalink to &quot;maVen 3.8 https问题&quot;">​</a></h3><p>Since Maven 3.8.1 http repositories are blocked.</p><p>Downgrade Maven to version 3.8.1 or earlier in settings</p><p>自版本 3.8.1 起，Maven 默认阻止外部 HTTP 存储库</p><p>解决办法：修改settings.xml中下面的配置为<code>false</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;mirror&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">          &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">          &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">          &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">          &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">          &lt;blocked&gt;true&lt;/blocked&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/mirror&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;mirror&gt;</span></span>
<span class="line"><span style="color:#24292e;">          &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">          &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span></span>
<span class="line"><span style="color:#24292e;">          &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span></span>
<span class="line"><span style="color:#24292e;">          &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span></span>
<span class="line"><span style="color:#24292e;">          &lt;blocked&gt;true&lt;/blocked&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/mirror&gt;</span></span></code></pre></div>`,643),oa=[ta];function ra(ca,ia,ga,ya,da,Ea){return a(),n("div",null,oa)}const ha=s(pa,[["render",ra]]);export{ua as __pageData,ha as default};
